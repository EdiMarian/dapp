{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toArray = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toArray\");\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Token = exports.TokenType = void 0;\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar address_1 = require(\"./address\");\n\nvar TokenType;\n\n(function (TokenType) {\n  TokenType[TokenType[\"Fungible\"] = 0] = \"Fungible\";\n  TokenType[TokenType[\"Semifungible\"] = 1] = \"Semifungible\";\n  TokenType[TokenType[\"Nonfungible\"] = 2] = \"Nonfungible\";\n})(TokenType = exports.TokenType || (exports.TokenType = {}));\n\nvar Token = /*#__PURE__*/function () {\n  function Token(init) {\n    _classCallCheck(this, Token);\n\n    this.identifier = ''; // Token identifier (ticker + random string, eg. MYTOKEN-12345)\n\n    this.name = ''; // Token name (eg. MyTokenName123)\n\n    this.ticker = '';\n    this.type = TokenType.Fungible;\n    this.owner = new address_1.Address();\n    this.supply = '0'; // Circulating supply = initial minted supply + local mints - local burns\n\n    this.decimals = 18;\n    this.isPaused = false;\n    this.canUpgrade = false;\n    this.canMint = false;\n    this.canBurn = false;\n    this.canChangeOwner = false;\n    this.canPause = false;\n    this.canFreeze = false;\n    this.canWipe = false;\n    this.canAddSpecialRoles = false;\n    this.canTransferNftCreateRole = false;\n    this.nftCreateStopped = false;\n    this.wiped = false;\n    Object.assign(this, init);\n  }\n\n  _createClass(Token, [{\n    key: \"getTokenName\",\n    value: function getTokenName() {\n      return this.name;\n    }\n  }, {\n    key: \"typeAsString\",\n    value: function typeAsString() {\n      return TokenType[this.type];\n    }\n  }, {\n    key: \"getTokenIdentifier\",\n    value: function getTokenIdentifier() {\n      return this.identifier;\n    }\n  }, {\n    key: \"isEgld\",\n    value: function isEgld() {\n      return this.getTokenIdentifier() == \"EGLD\";\n    }\n  }, {\n    key: \"isFungible\",\n    value: function isFungible() {\n      return !this.isNft();\n    }\n  }, {\n    key: \"isNft\",\n    value: function isNft() {\n      switch (this.type) {\n        case TokenType.Fungible:\n          return false;\n\n        case TokenType.Semifungible:\n        case TokenType.Nonfungible:\n          return true;\n      }\n    }\n  }], [{\n    key: \"fromHttpResponse\",\n    value: function fromHttpResponse(response) {\n      return new Token({\n        identifier: response.identifier,\n        name: response.name,\n        ticker: response.ticker,\n        type: TokenType[response.type],\n        owner: new address_1.Address(response.owner),\n        supply: response.supply,\n        decimals: response.decimals,\n        isPaused: response.isPaused,\n        canUpgrade: response.canUpgrade,\n        canMint: response.canMint,\n        canBurn: response.canBurn,\n        canChangeOwner: response.canChangeOwner,\n        canPause: response.canPause,\n        canFreeze: response.canFreeze,\n        canWipe: response.canWipe\n      });\n    }\n  }, {\n    key: \"fromTokenProperties\",\n    value: function fromTokenProperties(tokenIdentifier, results) {\n      var _results = _toArray(results),\n          tokenName = _results[0],\n          tokenType = _results[1],\n          owner = _results[2],\n          supply = _results[3],\n          propertiesBuffers = _results.slice(4);\n\n      var properties = parseTokenProperties(propertiesBuffers);\n      return new Token({\n        identifier: tokenIdentifier,\n        type: TokenType[tokenType.toString()],\n        name: tokenName.toString(),\n        owner: owner,\n        supply: supply,\n        decimals: properties.NumDecimals.toNumber(),\n        isPaused: properties.IsPaused,\n        canUpgrade: properties.CanUpgrade,\n        canMint: properties.CanMint,\n        canBurn: properties.CanBurn,\n        canChangeOwner: properties.CanChangeOwner,\n        canPause: properties.CanPause,\n        canFreeze: properties.CanFreeze,\n        canWipe: properties.CanWipe,\n        canAddSpecialRoles: properties.CanAddSpecialRoles,\n        canTransferNftCreateRole: properties.CanTransferNFTCreateRole,\n        nftCreateStopped: properties.NFTCreateStopped,\n        wiped: properties.NumWiped\n      });\n    }\n  }]);\n\n  return Token;\n}();\n\nexports.Token = Token;\n\nfunction parseValue(value) {\n  switch (value) {\n    case \"true\":\n      return true;\n\n    case \"false\":\n      return false;\n\n    default:\n      return new bignumber_js_1.default(value);\n  }\n}\n\nfunction parseTokenProperties(propertiesBuffers) {\n  var properties = {};\n\n  var _iterator = _createForOfIteratorHelper(propertiesBuffers),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var buffer = _step.value;\n\n      var _buffer$toString$spli = buffer.toString().split(\"-\"),\n          _buffer$toString$spli2 = _slicedToArray(_buffer$toString$spli, 2),\n          name = _buffer$toString$spli2[0],\n          value = _buffer$toString$spli2[1];\n\n      properties[name] = parseValue(value);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return properties;\n}","map":{"version":3,"sources":["../src/token.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Token = exports.TokenType = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst address_1 = require(\"./address\");\nvar TokenType;\n(function (TokenType) {\n    TokenType[TokenType[\"Fungible\"] = 0] = \"Fungible\";\n    TokenType[TokenType[\"Semifungible\"] = 1] = \"Semifungible\";\n    TokenType[TokenType[\"Nonfungible\"] = 2] = \"Nonfungible\";\n})(TokenType = exports.TokenType || (exports.TokenType = {}));\nclass Token {\n    constructor(init) {\n        this.identifier = ''; // Token identifier (ticker + random string, eg. MYTOKEN-12345)\n        this.name = ''; // Token name (eg. MyTokenName123)\n        this.ticker = '';\n        this.type = TokenType.Fungible;\n        this.owner = new address_1.Address();\n        this.supply = '0'; // Circulating supply = initial minted supply + local mints - local burns\n        this.decimals = 18;\n        this.isPaused = false;\n        this.canUpgrade = false;\n        this.canMint = false;\n        this.canBurn = false;\n        this.canChangeOwner = false;\n        this.canPause = false;\n        this.canFreeze = false;\n        this.canWipe = false;\n        this.canAddSpecialRoles = false;\n        this.canTransferNftCreateRole = false;\n        this.nftCreateStopped = false;\n        this.wiped = false;\n        Object.assign(this, init);\n    }\n    static fromHttpResponse(response) {\n        return new Token({\n            identifier: response.identifier,\n            name: response.name,\n            ticker: response.ticker,\n            type: TokenType[response.type],\n            owner: new address_1.Address(response.owner),\n            supply: response.supply,\n            decimals: response.decimals,\n            isPaused: response.isPaused,\n            canUpgrade: response.canUpgrade,\n            canMint: response.canMint,\n            canBurn: response.canBurn,\n            canChangeOwner: response.canChangeOwner,\n            canPause: response.canPause,\n            canFreeze: response.canFreeze,\n            canWipe: response.canWipe,\n        });\n    }\n    static fromTokenProperties(tokenIdentifier, results) {\n        let [tokenName, tokenType, owner, supply, ...propertiesBuffers] = results;\n        let properties = parseTokenProperties(propertiesBuffers);\n        return new Token({\n            identifier: tokenIdentifier,\n            type: TokenType[tokenType.toString()],\n            name: tokenName.toString(),\n            owner,\n            supply: supply,\n            decimals: properties.NumDecimals.toNumber(),\n            isPaused: properties.IsPaused,\n            canUpgrade: properties.CanUpgrade,\n            canMint: properties.CanMint,\n            canBurn: properties.CanBurn,\n            canChangeOwner: properties.CanChangeOwner,\n            canPause: properties.CanPause,\n            canFreeze: properties.CanFreeze,\n            canWipe: properties.CanWipe,\n            canAddSpecialRoles: properties.CanAddSpecialRoles,\n            canTransferNftCreateRole: properties.CanTransferNFTCreateRole,\n            nftCreateStopped: properties.NFTCreateStopped,\n            wiped: properties.NumWiped\n        });\n    }\n    getTokenName() {\n        return this.name;\n    }\n    typeAsString() {\n        return TokenType[this.type];\n    }\n    getTokenIdentifier() {\n        return this.identifier;\n    }\n    isEgld() {\n        return this.getTokenIdentifier() == \"EGLD\";\n    }\n    isFungible() {\n        return !this.isNft();\n    }\n    isNft() {\n        switch (this.type) {\n            case TokenType.Fungible:\n                return false;\n            case TokenType.Semifungible:\n            case TokenType.Nonfungible:\n                return true;\n        }\n    }\n}\nexports.Token = Token;\nfunction parseValue(value) {\n    switch (value) {\n        case \"true\": return true;\n        case \"false\": return false;\n        default: return new bignumber_js_1.default(value);\n    }\n}\nfunction parseTokenProperties(propertiesBuffers) {\n    let properties = {};\n    for (let buffer of propertiesBuffers) {\n        let [name, value] = buffer.toString().split(\"-\");\n        properties[name] = parseValue(value);\n    }\n    return properties;\n}\n//# sourceMappingURL=token.js.map"]},"metadata":{},"sourceType":"script"}