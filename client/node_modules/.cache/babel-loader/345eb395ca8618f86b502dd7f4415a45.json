{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/pages/Account/Create/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { useNavigate } from 'react-router-dom';\nimport { backend } from 'config';\nimport { Form } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateAccount = () => {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [exist, setExist] = useState(false);\n  const {\n    address\n  } = useGetAccountInfo();\n  const [socket, setSocket] = useState(null);\n  const navigate = useNavigate();\n  const [message, setMessage] = useState(null);\n  const [username, setUsername] = useState(null);\n\n  const handleRedirect = () => Boolean(address) ? setLoading(false) : navigate('/unlock');\n\n  useEffect(handleRedirect, [address]);\n  useEffect(() => {\n    const s = io(backend);\n    setSocket(s);\n    return () => {\n      s.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('get-account', data => {\n      if (data.message === 'OK') {\n        setExist(true);\n      }\n    });\n  });\n\n  const createAccount = async () => {\n    if (username === null) {\n      setMessage('Please enter an username!');\n    } else {\n      await socket.emit('create-account', {\n        address,\n        username\n      });\n      navigate('/account');\n    }\n  };\n\n  if (!exist) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 mt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-center text-white\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner-border\",\n              role: \"status\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"sr-only\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      className: \"text-light mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formBasicEmail\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"Enter username\",\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this), message !== null ? message === 'Success!' ? /*#__PURE__*/_jsxDEV(Form.Text, {\n          className: \"text-success\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Form.Text, {\n          className: \"text-danger\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Form.Text, {\n          className: \"text-muted\",\n          children: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        className: \"d-block mx-auto\",\n        onClick: createAccount,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(CreateAccount, \"xB0VHgHhaaQtzyaLJ0PB0EMcQCo=\", false, function () {\n  return [useGetAccountInfo, useNavigate];\n});\n\n_c = CreateAccount;\nexport default CreateAccount;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/pages/Account/Create/index.js"],"names":["React","useState","useEffect","io","useGetAccountInfo","useNavigate","backend","Form","Button","CreateAccount","loading","setLoading","exist","setExist","address","socket","setSocket","navigate","message","setMessage","username","setUsername","handleRedirect","Boolean","s","disconnect","on","data","createAccount","emit","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { useNavigate } from 'react-router-dom';\nimport { backend } from 'config';\nimport { Form } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\n\n\nconst CreateAccount = () => {\n\n  const [loading, setLoading] = useState(true);\n  const [exist, setExist] = useState(false);\n\n  const { address } = useGetAccountInfo();\n  const [socket, setSocket] = useState(null);\n  const navigate = useNavigate();\n  const [message, setMessage] = useState(null);\n  const [username, setUsername] = useState(null);\n\n  const handleRedirect = () =>\n    Boolean(address) ? setLoading(false) : navigate('/unlock');\n\n  useEffect(handleRedirect, [address]);\n\n\n  useEffect(() => {\n    const s = io(backend);\n    setSocket(s);\n\n    return () => {\n      s.disconnect();\n    }\n  }, [])\n\n  useEffect(() => {\n    if(socket == null ) return;\n    socket.on('get-account', (data) => {\n      if(data.message === 'OK') {\n        setExist(true);\n      }\n    });\n  })\n\n  const createAccount = async () => {\n    if(username === null) {\n      setMessage('Please enter an username!')\n    } else {\n      await socket.emit('create-account', {address, username});\n      navigate('/account');\n    }\n  }\n\n  if(!exist) {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12 mt-4\">\n            <div className=\"d-flex justify-content-center text-white\">\n              <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <Form className=\"text-light mx-auto\">\n      <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n        <Form.Label>Username</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Enter username\"\n          onChange={(e) => setUsername(e.target.value)}\n        />\n        {message !== null ?\n          message === 'Success!' ? (\n            <Form.Text className=\"text-success\">\n              {message}\n            </Form.Text>\n          ) : (\n            <Form.Text className=\"text-danger\">\n              {message}\n            </Form.Text>\n          )\n          \n         : (\n          <Form.Text className=\"text-muted\">\n            text\n          </Form.Text>\n        )}\n      </Form.Group>\n     <Button\n       variant=\"primary\"\n       className=\"d-block mx-auto\"\n       onClick={createAccount}\n     >\n        Submit\n      </Button>\n    </Form>\n    )\n  }\n}\n\nexport default CreateAccount;\n"]},"metadata":{},"sourceType":"module"}