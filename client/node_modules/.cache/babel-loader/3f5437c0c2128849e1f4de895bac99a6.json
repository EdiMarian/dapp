{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Button/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { transactionServices, refreshAccount } from '@elrondnetwork/dapp-core';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport styles from './styles.module.scss';\nimport TxTracking from '../Layout/TxTracking';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = props => {\n  _s();\n\n  const {\n    successfulTransactionsArray\n  } = TxTracking();\n\n  for (let i = 0; i < successfulTransactionsArray.length; i++) {\n    console.log(successfulTransactionsArray[i]);\n\n    for (let j = 0; j < successfulTransactionsArray[i].length; j++) {\n      console.log(successfulTransactionsArray[i][j]);\n    }\n  }\n\n  const [, setTransactionSessionId] = useState('');\n  const {\n    address\n  } = useGetAccountInfo();\n  const {\n    sendTransactions\n  } = transactionServices;\n  const [estar, setEstar] = useState(0);\n  const [egld, setEgld] = useState(0);\n  useEffect(() => {\n    if (props.fee > 0) {\n      setEstar(props.fee * 10000);\n      setEgld(props.fee / 200);\n    }\n  }, []);\n\n  const encrypt = () => {\n    return estar.toString(16);\n  };\n\n  const sendEgldTransaction = async () => {\n    const egldTransaction = {\n      value: egld ? egld * 1000000000000000000 : 0,\n      gasLimit: '70000',\n      data: 'QG9r',\n      receiver: 'erd1q07w9xm8avd7kwj3cgn3xrnhzg5da7e3vg7dv6gs3npyql0jpq9ss35a20'\n    };\n    await refreshAccount();\n    const {\n      sessionId\n    } = await sendTransactions({\n      transactions: egldTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: true\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.btn,\n      style: {\n        backgroundColor: props.color\n      },\n      onClick: sendEgldTransaction,\n      children: props.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Button, \"d/4edkfNlnPMcrEZVlG3yjbK6NI=\", false, function () {\n  return [useGetAccountInfo];\n});\n\n_c = Button;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Button/index.tsx"],"names":["React","useState","useEffect","transactionServices","refreshAccount","useGetAccountInfo","styles","TxTracking","Button","props","successfulTransactionsArray","i","length","console","log","j","setTransactionSessionId","address","sendTransactions","estar","setEstar","egld","setEgld","fee","encrypt","toString","sendEgldTransaction","egldTransaction","value","gasLimit","data","receiver","sessionId","transactions","transactionsDisplayInfo","processingMessage","errorMessage","successMessage","redirectAfterSign","btn","backgroundColor","color","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { transactionServices, refreshAccount } from '@elrondnetwork/dapp-core';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport styles from './styles.module.scss';\nimport { Link } from 'react-router-dom';\nimport TxTracking from '../Layout/TxTracking';\n\nconst Button = (props: any) => {\n  const { successfulTransactionsArray } = TxTracking();\n  for (let i = 0; i < successfulTransactionsArray.length; i++) {\n    console.log(successfulTransactionsArray[i]);\n    for (let j = 0; j < successfulTransactionsArray[i].length; j++) {\n      console.log(successfulTransactionsArray[i][j]);\n    }\n  }\n  const [, setTransactionSessionId] = useState('');\n  const { address } = useGetAccountInfo();\n  const { sendTransactions } = transactionServices;\n  const [estar, setEstar] = useState(0);\n  const [egld, setEgld] = useState(0);\n  useEffect(() => {\n    if (props.fee > 0) {\n      setEstar(props.fee * 10000);\n      setEgld(props.fee / 200);\n    }\n  }, []);\n\n  const encrypt = () => {\n    return estar.toString(16);\n  };\n\n  const sendEgldTransaction = async () => {\n    const egldTransaction = {\n      value: egld ? egld * 1000000000000000000 : 0,\n      gasLimit: '70000',\n      data: 'QG9r',\n      receiver: 'erd1q07w9xm8avd7kwj3cgn3xrnhzg5da7e3vg7dv6gs3npyql0jpq9ss35a20'\n    };\n    await refreshAccount();\n\n    const { sessionId } = await sendTransactions({\n      transactions: egldTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: true\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  return (\n    <div>\n      <button\n        className={styles.btn}\n        style={{ backgroundColor: props.color }}\n        onClick={sendEgldTransaction}\n      >\n        {props.name}\n      </button>\n    </div>\n  );\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}