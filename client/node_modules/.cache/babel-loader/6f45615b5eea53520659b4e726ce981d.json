{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Balance = void 0;\n\nvar bignumber_js_1 = require(\"bignumber.js\");\n\nvar errors_1 = require(\"./errors\");\n\nvar balanceBuilder_1 = require(\"./balanceBuilder\");\n/**\n * The number of decimals handled when working with EGLD or ESDT values.\n */\n\n\nvar DEFAULT_BIGNUMBER_DECIMAL_PLACES = 18;\nbignumber_js_1.BigNumber.set({\n  DECIMAL_PLACES: DEFAULT_BIGNUMBER_DECIMAL_PLACES,\n  ROUNDING_MODE: 1\n});\n/**\n * Balance, as an immutable object.\n */\n\nvar Balance = /*#__PURE__*/function () {\n  /**\n   * Creates a Balance object.\n   */\n  function Balance(token, nonce, value) {\n    _classCallCheck(this, Balance);\n\n    this.nonce = new bignumber_js_1.BigNumber(0);\n    this.value = new bignumber_js_1.BigNumber(0);\n    this.token = token;\n    this.nonce = new bignumber_js_1.BigNumber(nonce);\n    this.value = new bignumber_js_1.BigNumber(value);\n  }\n  /**\n   * Creates a balance object from an EGLD value (denomination will be applied).\n   */\n\n\n  _createClass(Balance, [{\n    key: \"isZero\",\n    value: function isZero() {\n      return this.value.isZero();\n    }\n  }, {\n    key: \"isEgld\",\n    value: function isEgld() {\n      return this.token.isEgld();\n    }\n  }, {\n    key: \"isSet\",\n    value: function isSet() {\n      return !this.isZero();\n    }\n    /**\n     * Returns the string representation of the value (as EGLD currency).\n     */\n\n  }, {\n    key: \"toCurrencyString\",\n    value: function toCurrencyString() {\n      return \"\".concat(this.toDenominated(), \" \").concat(this.token.getTokenIdentifier());\n    }\n  }, {\n    key: \"toDenominated\",\n    value: function toDenominated() {\n      return this.value.shiftedBy(-this.token.decimals).toFixed(this.token.decimals);\n    }\n    /**\n     * Returns the string representation of the value (its big-integer form).\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.value.toFixed();\n    }\n    /**\n     * Converts the balance to a pretty, plain JavaScript object.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        asString: this.toString(),\n        asCurrencyString: this.toCurrencyString()\n      };\n    }\n  }, {\n    key: \"getNonce\",\n    value: function getNonce() {\n      return this.nonce;\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.value;\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(other) {\n      this.checkSameToken(other);\n      return new Balance(this.token, this.nonce, this.value.plus(other.value));\n    }\n  }, {\n    key: \"minus\",\n    value: function minus(other) {\n      this.checkSameToken(other);\n      return new Balance(this.token, this.nonce, this.value.minus(other.value));\n    }\n  }, {\n    key: \"times\",\n    value: function times(n) {\n      return new Balance(this.token, this.nonce, this.value.times(n));\n    }\n  }, {\n    key: \"div\",\n    value: function div(n) {\n      return new Balance(this.token, this.nonce, this.value.div(n));\n    }\n  }, {\n    key: \"isEqualTo\",\n    value: function isEqualTo(other) {\n      this.checkSameToken(other);\n      return this.value.isEqualTo(other.value);\n    }\n  }, {\n    key: \"checkSameToken\",\n    value: function checkSameToken(other) {\n      if (this.token != other.token) {\n        throw new errors_1.ErrInvalidArgument(\"Different token types\");\n      }\n\n      if (!this.nonce.isEqualTo(other.nonce)) {\n        throw new errors_1.ErrInvalidArgument(\"Different nonces\");\n      }\n    }\n  }], [{\n    key: \"egld\",\n    value: function egld(value) {\n      return balanceBuilder_1.Egld(value);\n    }\n    /**\n     * Creates a balance object from a string (with denomination included).\n     */\n\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      return balanceBuilder_1.Egld.raw(value || \"0\");\n    }\n    /**\n     * Creates a zero-valued EGLD balance object.\n     */\n\n  }, {\n    key: \"Zero\",\n    value: function Zero() {\n      return balanceBuilder_1.Egld(0);\n    }\n  }]);\n\n  return Balance;\n}();\n\nexports.Balance = Balance;","map":{"version":3,"sources":["../src/balance.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Balance = void 0;\nconst bignumber_js_1 = require(\"bignumber.js\");\nconst errors_1 = require(\"./errors\");\nconst balanceBuilder_1 = require(\"./balanceBuilder\");\n/**\n * The number of decimals handled when working with EGLD or ESDT values.\n */\nconst DEFAULT_BIGNUMBER_DECIMAL_PLACES = 18;\nbignumber_js_1.BigNumber.set({ DECIMAL_PLACES: DEFAULT_BIGNUMBER_DECIMAL_PLACES, ROUNDING_MODE: 1 });\n/**\n * Balance, as an immutable object.\n */\nclass Balance {\n    /**\n     * Creates a Balance object.\n     */\n    constructor(token, nonce, value) {\n        this.nonce = new bignumber_js_1.BigNumber(0);\n        this.value = new bignumber_js_1.BigNumber(0);\n        this.token = token;\n        this.nonce = new bignumber_js_1.BigNumber(nonce);\n        this.value = new bignumber_js_1.BigNumber(value);\n    }\n    /**\n     * Creates a balance object from an EGLD value (denomination will be applied).\n     */\n    static egld(value) {\n        return balanceBuilder_1.Egld(value);\n    }\n    /**\n     * Creates a balance object from a string (with denomination included).\n     */\n    static fromString(value) {\n        return balanceBuilder_1.Egld.raw(value || \"0\");\n    }\n    /**\n     * Creates a zero-valued EGLD balance object.\n     */\n    static Zero() {\n        return balanceBuilder_1.Egld(0);\n    }\n    isZero() {\n        return this.value.isZero();\n    }\n    isEgld() {\n        return this.token.isEgld();\n    }\n    isSet() {\n        return !this.isZero();\n    }\n    /**\n     * Returns the string representation of the value (as EGLD currency).\n     */\n    toCurrencyString() {\n        return `${this.toDenominated()} ${this.token.getTokenIdentifier()}`;\n    }\n    toDenominated() {\n        return this.value.shiftedBy(-this.token.decimals).toFixed(this.token.decimals);\n    }\n    /**\n     * Returns the string representation of the value (its big-integer form).\n     */\n    toString() {\n        return this.value.toFixed();\n    }\n    /**\n     * Converts the balance to a pretty, plain JavaScript object.\n     */\n    toJSON() {\n        return {\n            asString: this.toString(),\n            asCurrencyString: this.toCurrencyString()\n        };\n    }\n    getNonce() {\n        return this.nonce;\n    }\n    valueOf() {\n        return this.value;\n    }\n    plus(other) {\n        this.checkSameToken(other);\n        return new Balance(this.token, this.nonce, this.value.plus(other.value));\n    }\n    minus(other) {\n        this.checkSameToken(other);\n        return new Balance(this.token, this.nonce, this.value.minus(other.value));\n    }\n    times(n) {\n        return new Balance(this.token, this.nonce, this.value.times(n));\n    }\n    div(n) {\n        return new Balance(this.token, this.nonce, this.value.div(n));\n    }\n    isEqualTo(other) {\n        this.checkSameToken(other);\n        return this.value.isEqualTo(other.value);\n    }\n    checkSameToken(other) {\n        if (this.token != other.token) {\n            throw new errors_1.ErrInvalidArgument(\"Different token types\");\n        }\n        if (!this.nonce.isEqualTo(other.nonce)) {\n            throw new errors_1.ErrInvalidArgument(\"Different nonces\");\n        }\n    }\n}\nexports.Balance = Balance;\n//# sourceMappingURL=balance.js.map"]},"metadata":{},"sourceType":"script"}