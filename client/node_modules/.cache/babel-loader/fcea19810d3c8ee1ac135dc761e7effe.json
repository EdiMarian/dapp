{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Fields = exports.Field = exports.FieldDefinition = void 0;\n\nvar errors = __importStar(require(\"../../errors\"));\n\nvar typeExpressionParser_1 = require(\"./typeExpressionParser\");\n\nvar FieldDefinition = /*#__PURE__*/function () {\n  function FieldDefinition(name, description, type) {\n    _classCallCheck(this, FieldDefinition);\n\n    this.name = name;\n    this.description = description;\n    this.type = type;\n  }\n\n  _createClass(FieldDefinition, null, [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      var parsedType = new typeExpressionParser_1.TypeExpressionParser().parse(json.type);\n      return new FieldDefinition(json.name, json.description, parsedType);\n    }\n  }]);\n\n  return FieldDefinition;\n}();\n\nexports.FieldDefinition = FieldDefinition;\n\nvar Field = /*#__PURE__*/function () {\n  function Field(value) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n    _classCallCheck(this, Field);\n\n    this.value = value;\n    this.name = name;\n  }\n\n  _createClass(Field, [{\n    key: \"checkTyping\",\n    value: function checkTyping(expectedDefinition) {\n      var actualType = this.value.getType();\n\n      if (!actualType.equals(expectedDefinition.type)) {\n        throw new errors.ErrTypingSystem(\"check type of field \\\"\".concat(expectedDefinition.name, \"; expected: \").concat(expectedDefinition.type, \", actual: \").concat(actualType, \"\\\"\"));\n      }\n\n      if (this.name != expectedDefinition.name) {\n        throw new errors.ErrTypingSystem(\"check name of field \\\"\".concat(expectedDefinition.name, \"\\\"\"));\n      }\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.name == other.name && this.value.equals(other.value);\n    }\n  }]);\n\n  return Field;\n}();\n\nexports.Field = Field;\n\nvar Fields = /*#__PURE__*/function () {\n  function Fields() {\n    _classCallCheck(this, Fields);\n  }\n\n  _createClass(Fields, null, [{\n    key: \"checkTyping\",\n    value: function checkTyping(fields, definitions) {\n      if (fields.length != definitions.length) {\n        throw new errors.ErrTypingSystem(\"fields length vs. field definitions length\");\n      }\n\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        var definition = definitions[i];\n        field.checkTyping(definition);\n      }\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(actual, expected) {\n      if (actual.length != expected.length) {\n        return false;\n      }\n\n      for (var i = 0; i < actual.length; i++) {\n        var selfField = actual[i];\n        var otherField = expected[i];\n\n        if (!selfField.equals(otherField)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }]);\n\n  return Fields;\n}();\n\nexports.Fields = Fields;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/fields.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,sBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;IAGa,e;AAKT,2BAAY,IAAZ,EAA0B,WAA1B,EAA+C,IAA/C,EAAyD;AAAA;;AACrD,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,IAAL,GAAY,IAAZ;AACH;;;;WAED,kBAAgB,IAAhB,EAAyE;AACrE,UAAI,UAAU,GAAG,IAAI,sBAAA,CAAA,oBAAJ,GAA2B,KAA3B,CAAiC,IAAI,CAAC,IAAtC,CAAjB;AACA,aAAO,IAAI,eAAJ,CAAoB,IAAI,CAAC,IAAzB,EAA+B,IAAI,CAAC,WAApC,EAAiD,UAAjD,CAAP;AACH;;;;;;AAdL,OAAA,CAAA,eAAA,GAAA,eAAA;;IAiBa,K;AAIT,iBAAY,KAAZ,EAAgD;AAAA,QAAjB,IAAiB,uEAAF,EAAE;;AAAA;;AAC5C,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,IAAL,GAAY,IAAZ;AACH;;;;WAED,qBAAY,kBAAZ,EAA+C;AAC3C,UAAM,UAAU,GAAS,KAAK,KAAL,CAAW,OAAX,EAAzB;;AAEA,UAAI,CAAC,UAAU,CAAC,MAAX,CAAkB,kBAAkB,CAAC,IAArC,CAAL,EAAiD;AAC7C,cAAM,IAAI,MAAM,CAAC,eAAX,iCAAmD,kBAAkB,CAAC,IAAtE,yBAAyF,kBAAkB,CAAC,IAA5G,uBAA6H,UAA7H,QAAN;AACH;;AACD,UAAI,KAAK,IAAL,IAAa,kBAAkB,CAAC,IAApC,EAA0C;AACtC,cAAM,IAAI,MAAM,CAAC,eAAX,iCAAmD,kBAAkB,CAAC,IAAtE,QAAN;AACH;AACJ;;;WAED,gBAAO,KAAP,EAAmB;AACf,aAAO,KAAK,IAAL,IAAa,KAAK,CAAC,IAAnB,IAA2B,KAAK,KAAL,CAAW,MAAX,CAAkB,KAAK,CAAC,KAAxB,CAAlC;AACH;;;;;;AAtBL,OAAA,CAAA,KAAA,GAAA,KAAA;;IAyBa,M;;;;;;;WACT,qBAAmB,MAAnB,EAAoC,WAApC,EAAkE;AAC9D,UAAI,MAAM,CAAC,MAAP,IAAiB,WAAW,CAAC,MAAjC,EAAyC;AACrC,cAAM,IAAI,MAAM,CAAC,eAAX,CAA2B,4CAA3B,CAAN;AACH;;AAED,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACpC,YAAI,KAAK,GAAG,MAAM,CAAC,CAAD,CAAlB;AACA,YAAI,UAAU,GAAG,WAAW,CAAC,CAAD,CAA5B;AAEA,QAAA,KAAK,CAAC,WAAN,CAAkB,UAAlB;AACH;AACJ;;;WAED,gBAAc,MAAd,EAA4C,QAA5C,EAA0E;AACtE,UAAI,MAAM,CAAC,MAAP,IAAiB,QAAQ,CAAC,MAA9B,EAAsC;AAClC,eAAO,KAAP;AACH;;AAED,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACpC,YAAI,SAAS,GAAG,MAAM,CAAC,CAAD,CAAtB;AACA,YAAI,UAAU,GAAG,QAAQ,CAAC,CAAD,CAAzB;;AAEA,YAAI,CAAC,SAAS,CAAC,MAAV,CAAiB,UAAjB,CAAL,EAAmC;AAC/B,iBAAO,KAAP;AACH;AACJ;;AAED,aAAO,IAAP;AACH;;;;;;AA7BL,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Fields = exports.Field = exports.FieldDefinition = void 0;\nconst errors = __importStar(require(\"../../errors\"));\nconst typeExpressionParser_1 = require(\"./typeExpressionParser\");\nclass FieldDefinition {\n    constructor(name, description, type) {\n        this.name = name;\n        this.description = description;\n        this.type = type;\n    }\n    static fromJSON(json) {\n        let parsedType = new typeExpressionParser_1.TypeExpressionParser().parse(json.type);\n        return new FieldDefinition(json.name, json.description, parsedType);\n    }\n}\nexports.FieldDefinition = FieldDefinition;\nclass Field {\n    constructor(value, name = \"\") {\n        this.value = value;\n        this.name = name;\n    }\n    checkTyping(expectedDefinition) {\n        const actualType = this.value.getType();\n        if (!actualType.equals(expectedDefinition.type)) {\n            throw new errors.ErrTypingSystem(`check type of field \"${expectedDefinition.name}; expected: ${expectedDefinition.type}, actual: ${actualType}\"`);\n        }\n        if (this.name != expectedDefinition.name) {\n            throw new errors.ErrTypingSystem(`check name of field \"${expectedDefinition.name}\"`);\n        }\n    }\n    equals(other) {\n        return this.name == other.name && this.value.equals(other.value);\n    }\n}\nexports.Field = Field;\nclass Fields {\n    static checkTyping(fields, definitions) {\n        if (fields.length != definitions.length) {\n            throw new errors.ErrTypingSystem(\"fields length vs. field definitions length\");\n        }\n        for (let i = 0; i < fields.length; i++) {\n            let field = fields[i];\n            let definition = definitions[i];\n            field.checkTyping(definition);\n        }\n    }\n    static equals(actual, expected) {\n        if (actual.length != expected.length) {\n            return false;\n        }\n        for (let i = 0; i < actual.length; i++) {\n            let selfField = actual[i];\n            let otherField = expected[i];\n            if (!selfField.equals(otherField)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.Fields = Fields;\n//# sourceMappingURL=fields.js.map"]},"metadata":{},"sourceType":"script"}