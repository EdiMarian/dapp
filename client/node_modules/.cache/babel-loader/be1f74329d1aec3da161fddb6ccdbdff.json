{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Heading/components/Identity/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useEffect } from 'react';\nimport { transactionServices } from '@elrondnetwork/dapp-core';\nimport { ContractFunction, ProxyProvider, Address, Query, decodeString } from '@elrondnetwork/erdjs';\nimport { Formik } from 'formik';\nimport { object, string } from 'yup';\nimport { Submit } from 'components/Action';\nimport { network } from 'config';\nimport { useDispatch, useGlobalContext } from 'context';\nimport modifiable from 'helpers/modifiable';\nimport useTransaction from 'helpers/useTransaction';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Identity = () => {\n  _s();\n\n  const {\n    agencyMetaData\n  } = useGlobalContext();\n  const {\n    sendTransaction\n  } = useTransaction();\n  const {\n    success,\n    hasActiveTransactions\n  } = transactionServices.useGetActiveTransactionsStatus();\n  const dispatch = useDispatch();\n  const fields = [{\n    name: 'name',\n    label: 'Name'\n  }, {\n    name: 'website',\n    label: 'Website'\n  }, {\n    name: 'keybase',\n    label: 'Keybase'\n  }];\n  const validationSchema = object().shape({\n    name: string().required('Name required.'),\n    keybase: string().required('Keybase required.'),\n    website: string().required('Website required.').test('URL', 'URL is not valid!', value => {\n      try {\n        return value && !value.includes('#') && Boolean(new URL(value || ''));\n      } catch (error) {\n        return false;\n      }\n    })\n  });\n\n  const onSubmit = async payload => {\n    const {\n      website,\n      name,\n      keybase\n    } = Object.keys(payload).reduce((data, key) => ({ ...data,\n      [key]: Buffer.from(payload[key]).toString('hex')\n    }), {});\n\n    try {\n      await sendTransaction({\n        args: `${name}@${website}@${keybase}`,\n        type: 'setMetaData',\n        value: '0'\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getAgencyMetaData = async () => {\n    dispatch({\n      type: 'getAgencyMetaData',\n      agencyMetaData: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyProvider(network.gatewayAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getMetaData')\n      });\n      const data = await provider.queryContract(query);\n      const [name, website, keybase] = data.outputUntyped().map(decodeString);\n      dispatch({\n        type: 'getAgencyMetaData',\n        agencyMetaData: {\n          status: 'loaded',\n          error: null,\n          data: {\n            name,\n            website,\n            keybase\n          }\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getAgencyMetaData',\n        agencyMetaData: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const fetchAgencyMetaData = () => {\n    if (!agencyMetaData.data) {\n      getAgencyMetaData();\n    }\n  };\n\n  const refetchAgencyMetaData = () => {\n    if (hasActiveTransactions && success && agencyMetaData.data) {\n      getAgencyMetaData();\n    }\n  };\n\n  useEffect(fetchAgencyMetaData, [agencyMetaData.data]);\n  useEffect(refetchAgencyMetaData, [hasActiveTransactions, success]);\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    enableReinitialize: true,\n    initialValues: agencyMetaData.data || {\n      name: '',\n      website: '',\n      keybase: ''\n    },\n    children: ({\n      errors,\n      values,\n      touched,\n      handleChange,\n      handleBlur,\n      handleSubmit\n    }) => /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: styles.identity,\n      children: [fields.map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.field,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: field.name,\n          children: field.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: modifiable('input', [errors[field.name] && touched[field.name] && 'invalid'], styles),\n            name: field.name,\n            value: values[field.name],\n            autoComplete: \"off\",\n            onChange: handleChange,\n            onBlur: handleBlur\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }, this), errors[field.name] && touched[field.name] && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.error,\n            children: errors[field.name]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }, this)]\n      }, field.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(Submit, {\n        close: \"Cancel\",\n        submit: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Identity, \"XpobXst1rjO84sjGYi6YpJHDQZk=\", false, function () {\n  return [useGlobalContext, useTransaction, transactionServices.useGetActiveTransactionsStatus, useDispatch];\n});\n\n_c = Identity;\nexport default Identity;\n\nvar _c;\n\n$RefreshReg$(_c, \"Identity\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Heading/components/Identity/index.tsx"],"names":["React","useEffect","transactionServices","ContractFunction","ProxyProvider","Address","Query","decodeString","Formik","object","string","Submit","network","useDispatch","useGlobalContext","modifiable","useTransaction","styles","Identity","agencyMetaData","sendTransaction","success","hasActiveTransactions","useGetActiveTransactionsStatus","dispatch","fields","name","label","validationSchema","shape","required","keybase","website","test","value","includes","Boolean","URL","error","onSubmit","payload","Object","keys","reduce","data","key","Buffer","from","toString","args","type","console","getAgencyMetaData","status","provider","gatewayAddress","query","address","delegationContract","func","queryContract","outputUntyped","map","fetchAgencyMetaData","refetchAgencyMetaData","errors","values","touched","handleChange","handleBlur","handleSubmit","identity","field"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEffect } from 'react';\n\nimport { transactionServices } from '@elrondnetwork/dapp-core';\nimport {\n  ContractFunction,\n  ProxyProvider,\n  Address,\n  Query,\n  decodeString\n} from '@elrondnetwork/erdjs';\n\nimport { Formik, FormikProps } from 'formik';\nimport { object, string } from 'yup';\n\nimport { Submit } from 'components/Action';\nimport { network } from 'config';\n\nimport { useDispatch, useGlobalContext } from 'context';\nimport modifiable from 'helpers/modifiable';\nimport useTransaction from 'helpers/useTransaction';\n\nimport styles from './styles.module.scss';\n\ninterface FieldType {\n  [key: string]: any;\n  label: string;\n  name: string;\n}\n\ninterface PayloadType {\n  [key: string]: any;\n  website?: string;\n  keybase?: string;\n  name?: string;\n}\n\nconst Identity: React.FC = () => {\n  const { agencyMetaData } = useGlobalContext();\n  const { sendTransaction } = useTransaction();\n  const { success, hasActiveTransactions } =\n    transactionServices.useGetActiveTransactionsStatus();\n\n  const dispatch = useDispatch();\n  const fields: Array<FieldType> = [\n    {\n      name: 'name',\n      label: 'Name'\n    },\n    {\n      name: 'website',\n      label: 'Website'\n    },\n    {\n      name: 'keybase',\n      label: 'Keybase'\n    }\n  ];\n\n  const validationSchema = object().shape({\n    name: string().required('Name required.'),\n    keybase: string().required('Keybase required.'),\n    website: string()\n      .required('Website required.')\n      .test('URL', 'URL is not valid!', (value: any) => {\n        try {\n          return value && !value.includes('#') && Boolean(new URL(value || ''));\n        } catch (error) {\n          return false;\n        }\n      })\n  });\n\n  const onSubmit = async (payload: PayloadType): Promise<void> => {\n    const { website, name, keybase }: PayloadType = Object.keys(payload).reduce(\n      (data, key) => ({\n        ...data,\n        [key]: Buffer.from(payload[key]).toString('hex')\n      }),\n      {}\n    );\n\n    try {\n      await sendTransaction({\n        args: `${name}@${website}@${keybase}`,\n        type: 'setMetaData',\n        value: '0'\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getAgencyMetaData = async (): Promise<void> => {\n    dispatch({\n      type: 'getAgencyMetaData',\n      agencyMetaData: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyProvider(network.gatewayAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getMetaData')\n      });\n\n      const data = await provider.queryContract(query);\n      const [name, website, keybase] = data.outputUntyped().map(decodeString);\n\n      dispatch({\n        type: 'getAgencyMetaData',\n        agencyMetaData: {\n          status: 'loaded',\n          error: null,\n          data: {\n            name,\n            website,\n            keybase\n          }\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getAgencyMetaData',\n        agencyMetaData: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const fetchAgencyMetaData = () => {\n    if (!agencyMetaData.data) {\n      getAgencyMetaData();\n    }\n  };\n\n  const refetchAgencyMetaData = () => {\n    if (hasActiveTransactions && success && agencyMetaData.data) {\n      getAgencyMetaData();\n    }\n  };\n\n  useEffect(fetchAgencyMetaData, [agencyMetaData.data]);\n  useEffect(refetchAgencyMetaData, [hasActiveTransactions, success]);\n\n  return (\n    <Formik\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n      enableReinitialize={true}\n      initialValues={\n        agencyMetaData.data || { name: '', website: '', keybase: '' }\n      }\n    >\n      {({\n        errors,\n        values,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit\n      }: FormikProps<PayloadType>) => (\n        <form onSubmit={handleSubmit} className={styles.identity}>\n          {fields.map((field: FieldType) => (\n            <div key={field.name} className={styles.field}>\n              <label htmlFor={field.name}>{field.label}</label>\n              <div className='input-group'>\n                <input\n                  type='text'\n                  className={modifiable(\n                    'input',\n                    [errors[field.name] && touched[field.name] && 'invalid'],\n                    styles\n                  )}\n                  name={field.name}\n                  value={values[field.name]}\n                  autoComplete='off'\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                />\n\n                {errors[field.name] && touched[field.name] && (\n                  <span className={styles.error}>{errors[field.name]}</span>\n                )}\n              </div>\n            </div>\n          ))}\n\n          <Submit close='Cancel' submit='Save' />\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default Identity;\n"]},"metadata":{},"sourceType":"module"}