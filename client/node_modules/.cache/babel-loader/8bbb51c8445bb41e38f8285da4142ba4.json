{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useGetAccountInfo, transactionServices } from '@elrondnetwork/dapp-core';\nimport { ProxyProvider, Address, AddressValue, Query, ContractFunction, decodeBigNumber } from '@elrondnetwork/erdjs';\nimport BigNumber from 'bignumber.js';\nimport { network, minDust } from 'config';\nimport { useDispatch, useGlobalContext } from 'context';\nimport { denominated } from 'helpers/denominate';\nimport { nominateValToHex } from 'helpers/nominate';\nimport useTransaction from 'helpers/useTransaction';\n\nconst useStakeData = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account,\n    address\n  } = useGetAccountInfo();\n  const {\n    sendTransaction\n  } = useTransaction();\n  const {\n    contractDetails,\n    userClaimableRewards,\n    totalActiveStake\n  } = useGlobalContext();\n  const {\n    success,\n    hasActiveTransactions\n  } = transactionServices.useGetActiveTransactionsStatus();\n\n  const onDelegate = async data => {\n    try {\n      await sendTransaction({\n        value: data.amount,\n        type: 'delegate',\n        args: ''\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onUndelegate = async data => {\n    try {\n      await sendTransaction({\n        value: '0',\n        type: 'unDelegate',\n        args: nominateValToHex(data.amount.toString())\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onRedelegate = async () => {\n    try {\n      await sendTransaction({\n        value: '0',\n        type: 'reDelegateRewards',\n        args: ''\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onClaimRewards = async () => {\n    try {\n      await sendTransaction({\n        value: '0',\n        type: 'claimRewards',\n        args: ''\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getStakingLimits = () => {\n    if (contractDetails.data && totalActiveStake.data) {\n      const balance = new BigNumber(account.balance);\n      const gasPrice = new BigNumber('12000000');\n      const gasLimit = new BigNumber('12000000');\n      const adjusted = balance.minus(gasPrice.times(gasLimit));\n      const dust = new BigNumber(minDust);\n      const [available, dustful] = [adjusted, adjusted.minus(dust)].map(value => denominated(value.toString(10), {\n        showLastNonZeroDecimal: true,\n        addCommas: false\n      }));\n\n      if (contractDetails.data.withDelegationCap === 'true') {\n        const [stake, cap] = [denominated(totalActiveStake.data).replace(/,/g, ''), denominated(contractDetails.data.delegationCap).replace(/,/g, '')];\n        const remainder = new BigNumber(cap).minus(new BigNumber(stake));\n\n        if (remainder.isGreaterThan(available)) {\n          return {\n            balance: available,\n            limit: dustful\n          };\n        } else {\n          return {\n            balance: available,\n            limit: remainder\n          };\n        }\n      } else {\n        return {\n          balance: available,\n          limit: dustful\n        };\n      }\n    }\n\n    return {\n      balance: '',\n      limit: ''\n    };\n  };\n\n  const getUserClaimableRewards = async () => {\n    dispatch({\n      type: 'getUserClaimableRewards',\n      userClaimableRewards: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyProvider(network.gatewayAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getClaimableRewards'),\n        args: [new AddressValue(new Address(address))]\n      });\n      const data = await provider.queryContract(query);\n      const [claimableRewards] = data.outputUntyped();\n      dispatch({\n        type: 'getUserClaimableRewards',\n        userClaimableRewards: {\n          status: 'loaded',\n          error: null,\n          data: denominated(decodeBigNumber(claimableRewards).toFixed(), {\n            decimals: 4\n          })\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getUserClaimableRewards',\n        userClaimableRewards: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const fetchClaimableRewards = () => {\n    if (!userClaimableRewards.data) {\n      getUserClaimableRewards();\n    }\n  };\n\n  const reFetchClaimableRewards = () => {\n    if (success && hasActiveTransactions && userClaimableRewards.data) {\n      getUserClaimableRewards();\n    }\n  };\n\n  useEffect(fetchClaimableRewards, [userClaimableRewards.data]);\n  useEffect(reFetchClaimableRewards, [success, hasActiveTransactions]);\n  return {\n    onDelegate,\n    onUndelegate,\n    onRedelegate,\n    onClaimRewards,\n    getStakingLimits\n  };\n};\n\n_s(useStakeData, \"FxRPI1AxZGSp0uikmDlp960g5Pg=\", false, function () {\n  return [useDispatch, useGetAccountInfo, useTransaction, useGlobalContext, transactionServices.useGetActiveTransactionsStatus];\n});\n\nexport default useStakeData;","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Stake/hooks/index.ts"],"names":["useEffect","useGetAccountInfo","transactionServices","ProxyProvider","Address","AddressValue","Query","ContractFunction","decodeBigNumber","BigNumber","network","minDust","useDispatch","useGlobalContext","denominated","nominateValToHex","useTransaction","useStakeData","dispatch","account","address","sendTransaction","contractDetails","userClaimableRewards","totalActiveStake","success","hasActiveTransactions","useGetActiveTransactionsStatus","onDelegate","data","value","amount","type","args","error","console","onUndelegate","toString","onRedelegate","onClaimRewards","getStakingLimits","balance","gasPrice","gasLimit","adjusted","minus","times","dust","available","dustful","map","showLastNonZeroDecimal","addCommas","withDelegationCap","stake","cap","replace","delegationCap","remainder","isGreaterThan","limit","getUserClaimableRewards","status","provider","gatewayAddress","query","delegationContract","func","queryContract","claimableRewards","outputUntyped","toFixed","decimals","fetchClaimableRewards","reFetchClaimableRewards"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\n\nimport {\n  useGetAccountInfo,\n  transactionServices\n} from '@elrondnetwork/dapp-core';\nimport {\n  ProxyProvider,\n  Address,\n  AddressValue,\n  Query,\n  ContractFunction,\n  decodeBigNumber\n} from '@elrondnetwork/erdjs';\nimport BigNumber from 'bignumber.js';\n\nimport { network, minDust } from 'config';\nimport { useDispatch, useGlobalContext } from 'context';\nimport { denominated } from 'helpers/denominate';\nimport { nominateValToHex } from 'helpers/nominate';\nimport useTransaction from 'helpers/useTransaction';\n\ninterface DelegationPayloadType {\n  amount: string;\n}\n\nconst useStakeData = () => {\n  const dispatch = useDispatch();\n\n  const { account, address } = useGetAccountInfo();\n  const { sendTransaction } = useTransaction();\n  const { contractDetails, userClaimableRewards, totalActiveStake } =\n    useGlobalContext();\n  const { success, hasActiveTransactions } =\n    transactionServices.useGetActiveTransactionsStatus();\n\n  const onDelegate = async (data: DelegationPayloadType): Promise<void> => {\n    try {\n      await sendTransaction({\n        value: data.amount,\n        type: 'delegate',\n        args: ''\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onUndelegate = async (data: DelegationPayloadType): Promise<void> => {\n    try {\n      await sendTransaction({\n        value: '0',\n        type: 'unDelegate',\n        args: nominateValToHex(data.amount.toString())\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onRedelegate = async (): Promise<void> => {\n    try {\n      await sendTransaction({\n        value: '0',\n        type: 'reDelegateRewards',\n        args: ''\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onClaimRewards = async (): Promise<void> => {\n    try {\n      await sendTransaction({\n        value: '0',\n        type: 'claimRewards',\n        args: ''\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getStakingLimits = () => {\n    if (contractDetails.data && totalActiveStake.data) {\n      const balance = new BigNumber(account.balance);\n      const gasPrice = new BigNumber('12000000');\n      const gasLimit = new BigNumber('12000000');\n      const adjusted = balance.minus(gasPrice.times(gasLimit));\n      const dust = new BigNumber(minDust);\n\n      const [available, dustful] = [adjusted, adjusted.minus(dust)].map(\n        (value) =>\n          denominated(value.toString(10), {\n            showLastNonZeroDecimal: true,\n            addCommas: false\n          })\n      );\n\n      if (contractDetails.data.withDelegationCap === 'true') {\n        const [stake, cap] = [\n          denominated(totalActiveStake.data).replace(/,/g, ''),\n          denominated(contractDetails.data.delegationCap).replace(/,/g, '')\n        ];\n\n        const remainder = new BigNumber(cap).minus(new BigNumber(stake));\n\n        if (remainder.isGreaterThan(available)) {\n          return {\n            balance: available,\n            limit: dustful\n          };\n        } else {\n          return {\n            balance: available,\n            limit: remainder\n          };\n        }\n      } else {\n        return {\n          balance: available,\n          limit: dustful\n        };\n      }\n    }\n\n    return {\n      balance: '',\n      limit: ''\n    };\n  };\n\n  const getUserClaimableRewards = async (): Promise<void> => {\n    dispatch({\n      type: 'getUserClaimableRewards',\n      userClaimableRewards: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyProvider(network.gatewayAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getClaimableRewards'),\n        args: [new AddressValue(new Address(address))]\n      });\n\n      const data = await provider.queryContract(query);\n      const [claimableRewards] = data.outputUntyped();\n\n      dispatch({\n        type: 'getUserClaimableRewards',\n        userClaimableRewards: {\n          status: 'loaded',\n          error: null,\n          data: denominated(decodeBigNumber(claimableRewards).toFixed(), {\n            decimals: 4\n          })\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getUserClaimableRewards',\n        userClaimableRewards: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const fetchClaimableRewards = () => {\n    if (!userClaimableRewards.data) {\n      getUserClaimableRewards();\n    }\n  };\n\n  const reFetchClaimableRewards = () => {\n    if (success && hasActiveTransactions && userClaimableRewards.data) {\n      getUserClaimableRewards();\n    }\n  };\n\n  useEffect(fetchClaimableRewards, [userClaimableRewards.data]);\n  useEffect(reFetchClaimableRewards, [success, hasActiveTransactions]);\n\n  return {\n    onDelegate,\n    onUndelegate,\n    onRedelegate,\n    onClaimRewards,\n    getStakingLimits\n  };\n};\n\nexport default useStakeData;\n"]},"metadata":{},"sourceType":"module"}