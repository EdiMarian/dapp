{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProxyNetworkProvider = void 0;\n\nconst axios_1 = __importDefault(require(\"axios\"));\n\nconst account_1 = require(\"../account\");\n\nconst constants_1 = require(\"../constants\");\n\nconst errors_1 = require(\"../errors\");\n\nconst logger_1 = require(\"../logger\");\n\nconst networkConfig_1 = require(\"../networkConfig\");\n\nconst networkStatus_1 = require(\"../networkStatus\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst contractResults_1 = require(\"./contractResults\");\n\nconst tokens_1 = require(\"./tokens\");\n\nconst transactions_1 = require(\"./transactions\"); // TODO: Find & remove duplicate code between \"ProxyNetworkProvider\" and \"ApiNetworkProvider\".\n\n\nclass ProxyNetworkProvider {\n  constructor(url, config) {\n    this.url = url;\n    this.config = Object.assign(Object.assign({}, constants_1.defaultConfig), config);\n  }\n\n  getNetworkConfig() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(\"network/config\");\n      let networkConfig = networkConfig_1.NetworkConfig.fromHttpResponse(response.config);\n      return networkConfig;\n    });\n  }\n\n  getNetworkStatus() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(\"network/status/4294967295\");\n      let networkStatus = networkStatus_1.NetworkStatus.fromHttpResponse(response.status);\n      return networkStatus;\n    });\n  }\n\n  getNetworkStakeStatistics() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: Implement wrt.:\n      // https://github.com/ElrondNetwork/api.elrond.com/blob/main/src/endpoints/stake/stake.service.ts\n      throw new Error(\"Method not implemented.\");\n    });\n  }\n\n  getNetworkGeneralStatistics() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: Implement wrt. (full implementation may not be possible):\n      // https://github.com/ElrondNetwork/api.elrond.com/blob/main/src/endpoints/network/network.service.ts\n      throw new Error(\"Method not implemented.\");\n    });\n  }\n\n  getAccount(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`address/${address.bech32()}`);\n      let account = account_1.AccountOnNetwork.fromHttpResponse(response.account);\n      return account;\n    });\n  }\n\n  getFungibleTokensOfAccount(address, _pagination) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = `address/${address.bech32()}/esdt`;\n      let response = yield this.doGetGeneric(url);\n      let responseItems = Object.values(response.esdts); // Skip NFTs / SFTs.\n\n      let responseItemsFiltered = responseItems.filter(item => !item.nonce);\n      let tokens = responseItemsFiltered.map(item => tokens_1.FungibleTokenOfAccountOnNetwork.fromHttpResponse(item)); // TODO: Fix sorting\n\n      tokens.sort((a, b) => a.identifier.localeCompare(b.identifier));\n      return tokens;\n    });\n  }\n\n  getNonFungibleTokensOfAccount(address, _pagination) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = `address/${address.bech32()}/esdt`;\n      let response = yield this.doGetGeneric(url);\n      let responseItems = Object.values(response.esdts); // Skip fungible tokens.\n\n      let responseItemsFiltered = responseItems.filter(item => item.nonce >= 0);\n      let tokens = responseItemsFiltered.map(item => tokens_1.NonFungibleTokenOfAccountOnNetwork.fromProxyHttpResponse(item)); // TODO: Fix sorting\n\n      tokens.sort((a, b) => a.identifier.localeCompare(b.identifier));\n      return tokens;\n    });\n  }\n\n  getFungibleTokenOfAccount(address, tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`address/${address.bech32()}/esdt/${tokenIdentifier}`);\n      let tokenData = tokens_1.FungibleTokenOfAccountOnNetwork.fromHttpResponse(response.tokenData);\n      return tokenData;\n    });\n  }\n\n  getNonFungibleTokenOfAccount(address, collection, nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`address/${address.bech32()}/nft/${collection}/nonce/${nonce.valueOf()}`);\n      let tokenData = tokens_1.NonFungibleTokenOfAccountOnNetwork.fromProxyHttpResponseByNonce(response.tokenData);\n      return tokenData;\n    });\n  }\n\n  getTransaction(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = this.buildUrlWithQueryParameters(`transaction/${txHash.toString()}`, {\n        withResults: \"true\"\n      });\n      let response = yield this.doGetGeneric(url);\n      let transaction = transactions_1.TransactionOnNetwork.fromProxyHttpResponse(txHash, response.transaction);\n      return transaction;\n    });\n  }\n\n  getTransactionStatus(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`transaction/${txHash.toString()}/status`);\n      let status = new transaction_1.TransactionStatus(response.status);\n      return status;\n    });\n  }\n\n  sendTransaction(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doPostGeneric(\"transaction/send\", tx.toSendable());\n      let hash = new transaction_1.TransactionHash(response.txHash);\n      return hash;\n    });\n  }\n\n  simulateTransaction(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doPostGeneric(\"transaction/simulate\", tx.toSendable());\n      return response;\n    });\n  }\n\n  queryContract(query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let data = query.toHttpRequest();\n      let response = yield this.doPostGeneric(\"vm-values/query\", data);\n      let queryResponse = contractResults_1.ContractQueryResponse.fromHttpResponse(response.data);\n      return queryResponse;\n    });\n  }\n\n  getDefinitionOfFungibleToken(_tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: Implement wrt.:\n      // https://github.com/ElrondNetwork/api.elrond.com/blob/main/src/endpoints/esdt/esdt.service.ts#L221\n      throw new Error(\"Method not implemented.\");\n    });\n  }\n\n  getDefinitionOfTokenCollection(_collection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: Implement wrt.:\n      // https://github.com/ElrondNetwork/api.elrond.com/blob/main/src/endpoints/collections/collection.service.ts\n      // https://docs.elrond.com/developers/esdt-tokens/#get-esdt-token-properties\n      throw new Error(\"Method not implemented.\");\n    });\n  }\n\n  getNonFungibleToken(_collection, _nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new Error(\"Method not implemented.\");\n    });\n  }\n\n  doGetGeneric(resourceUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGet(resourceUrl);\n      return response;\n    });\n  }\n\n  doPostGeneric(resourceUrl, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doPost(resourceUrl, payload);\n      return response;\n    });\n  }\n\n  doGet(resourceUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let url = `${this.url}/${resourceUrl}`;\n        let response = yield axios_1.default.get(url, this.config);\n        let payload = response.data.data;\n        return payload;\n      } catch (error) {\n        this.handleApiError(error, resourceUrl);\n      }\n    });\n  }\n\n  doPost(resourceUrl, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let url = `${this.url}/${resourceUrl}`;\n        let response = yield axios_1.default.post(url, payload, Object.assign(Object.assign({}, this.config), {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }));\n        let responsePayload = response.data.data;\n        return responsePayload;\n      } catch (error) {\n        this.handleApiError(error, resourceUrl);\n      }\n    });\n  }\n\n  buildUrlWithQueryParameters(endpoint, params) {\n    let searchParams = new URLSearchParams();\n\n    for (let [key, value] of Object.entries(params)) {\n      if (value) {\n        searchParams.append(key, value);\n      }\n    }\n\n    return `${endpoint}?${searchParams.toString()}`;\n  }\n\n  handleApiError(error, resourceUrl) {\n    if (!error.response) {\n      logger_1.Logger.warn(error);\n      throw new errors_1.ErrNetworkProvider(resourceUrl, error.toString(), error);\n    }\n\n    let errorData = error.response.data;\n    let originalErrorMessage = errorData.error || errorData.message || JSON.stringify(errorData);\n    throw new errors_1.ErrNetworkProvider(resourceUrl, originalErrorMessage, error);\n  }\n\n}\n\nexports.ProxyNetworkProvider = ProxyNetworkProvider;","map":{"version":3,"sources":["../../src/networkProvider/proxyNetworkProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProxyNetworkProvider = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\nconst account_1 = require(\"../account\");\nconst constants_1 = require(\"../constants\");\nconst errors_1 = require(\"../errors\");\nconst logger_1 = require(\"../logger\");\nconst networkConfig_1 = require(\"../networkConfig\");\nconst networkStatus_1 = require(\"../networkStatus\");\nconst transaction_1 = require(\"../transaction\");\nconst contractResults_1 = require(\"./contractResults\");\nconst tokens_1 = require(\"./tokens\");\nconst transactions_1 = require(\"./transactions\");\n// TODO: Find & remove duplicate code between \"ProxyNetworkProvider\" and \"ApiNetworkProvider\".\nclass ProxyNetworkProvider {\n    constructor(url, config) {\n        this.url = url;\n        this.config = Object.assign(Object.assign({}, constants_1.defaultConfig), config);\n    }\n    getNetworkConfig() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(\"network/config\");\n            let networkConfig = networkConfig_1.NetworkConfig.fromHttpResponse(response.config);\n            return networkConfig;\n        });\n    }\n    getNetworkStatus() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(\"network/status/4294967295\");\n            let networkStatus = networkStatus_1.NetworkStatus.fromHttpResponse(response.status);\n            return networkStatus;\n        });\n    }\n    getNetworkStakeStatistics() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: Implement wrt.:\n            // https://github.com/ElrondNetwork/api.elrond.com/blob/main/src/endpoints/stake/stake.service.ts\n            throw new Error(\"Method not implemented.\");\n        });\n    }\n    getNetworkGeneralStatistics() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: Implement wrt. (full implementation may not be possible):\n            // https://github.com/ElrondNetwork/api.elrond.com/blob/main/src/endpoints/network/network.service.ts\n            throw new Error(\"Method not implemented.\");\n        });\n    }\n    getAccount(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(`address/${address.bech32()}`);\n            let account = account_1.AccountOnNetwork.fromHttpResponse(response.account);\n            return account;\n        });\n    }\n    getFungibleTokensOfAccount(address, _pagination) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = `address/${address.bech32()}/esdt`;\n            let response = yield this.doGetGeneric(url);\n            let responseItems = Object.values(response.esdts);\n            // Skip NFTs / SFTs.\n            let responseItemsFiltered = responseItems.filter(item => !item.nonce);\n            let tokens = responseItemsFiltered.map(item => tokens_1.FungibleTokenOfAccountOnNetwork.fromHttpResponse(item));\n            // TODO: Fix sorting\n            tokens.sort((a, b) => a.identifier.localeCompare(b.identifier));\n            return tokens;\n        });\n    }\n    getNonFungibleTokensOfAccount(address, _pagination) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = `address/${address.bech32()}/esdt`;\n            let response = yield this.doGetGeneric(url);\n            let responseItems = Object.values(response.esdts);\n            // Skip fungible tokens.\n            let responseItemsFiltered = responseItems.filter(item => item.nonce >= 0);\n            let tokens = responseItemsFiltered.map(item => tokens_1.NonFungibleTokenOfAccountOnNetwork.fromProxyHttpResponse(item));\n            // TODO: Fix sorting\n            tokens.sort((a, b) => a.identifier.localeCompare(b.identifier));\n            return tokens;\n        });\n    }\n    getFungibleTokenOfAccount(address, tokenIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(`address/${address.bech32()}/esdt/${tokenIdentifier}`);\n            let tokenData = tokens_1.FungibleTokenOfAccountOnNetwork.fromHttpResponse(response.tokenData);\n            return tokenData;\n        });\n    }\n    getNonFungibleTokenOfAccount(address, collection, nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(`address/${address.bech32()}/nft/${collection}/nonce/${nonce.valueOf()}`);\n            let tokenData = tokens_1.NonFungibleTokenOfAccountOnNetwork.fromProxyHttpResponseByNonce(response.tokenData);\n            return tokenData;\n        });\n    }\n    getTransaction(txHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = this.buildUrlWithQueryParameters(`transaction/${txHash.toString()}`, { withResults: \"true\" });\n            let response = yield this.doGetGeneric(url);\n            let transaction = transactions_1.TransactionOnNetwork.fromProxyHttpResponse(txHash, response.transaction);\n            return transaction;\n        });\n    }\n    getTransactionStatus(txHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(`transaction/${txHash.toString()}/status`);\n            let status = new transaction_1.TransactionStatus(response.status);\n            return status;\n        });\n    }\n    sendTransaction(tx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doPostGeneric(\"transaction/send\", tx.toSendable());\n            let hash = new transaction_1.TransactionHash(response.txHash);\n            return hash;\n        });\n    }\n    simulateTransaction(tx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doPostGeneric(\"transaction/simulate\", tx.toSendable());\n            return response;\n        });\n    }\n    queryContract(query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let data = query.toHttpRequest();\n            let response = yield this.doPostGeneric(\"vm-values/query\", data);\n            let queryResponse = contractResults_1.ContractQueryResponse.fromHttpResponse(response.data);\n            return queryResponse;\n        });\n    }\n    getDefinitionOfFungibleToken(_tokenIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: Implement wrt.:\n            // https://github.com/ElrondNetwork/api.elrond.com/blob/main/src/endpoints/esdt/esdt.service.ts#L221\n            throw new Error(\"Method not implemented.\");\n        });\n    }\n    getDefinitionOfTokenCollection(_collection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: Implement wrt.:\n            // https://github.com/ElrondNetwork/api.elrond.com/blob/main/src/endpoints/collections/collection.service.ts\n            // https://docs.elrond.com/developers/esdt-tokens/#get-esdt-token-properties\n            throw new Error(\"Method not implemented.\");\n        });\n    }\n    getNonFungibleToken(_collection, _nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error(\"Method not implemented.\");\n        });\n    }\n    doGetGeneric(resourceUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGet(resourceUrl);\n            return response;\n        });\n    }\n    doPostGeneric(resourceUrl, payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doPost(resourceUrl, payload);\n            return response;\n        });\n    }\n    doGet(resourceUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let url = `${this.url}/${resourceUrl}`;\n                let response = yield axios_1.default.get(url, this.config);\n                let payload = response.data.data;\n                return payload;\n            }\n            catch (error) {\n                this.handleApiError(error, resourceUrl);\n            }\n        });\n    }\n    doPost(resourceUrl, payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let url = `${this.url}/${resourceUrl}`;\n                let response = yield axios_1.default.post(url, payload, Object.assign(Object.assign({}, this.config), { headers: {\n                        \"Content-Type\": \"application/json\",\n                    } }));\n                let responsePayload = response.data.data;\n                return responsePayload;\n            }\n            catch (error) {\n                this.handleApiError(error, resourceUrl);\n            }\n        });\n    }\n    buildUrlWithQueryParameters(endpoint, params) {\n        let searchParams = new URLSearchParams();\n        for (let [key, value] of Object.entries(params)) {\n            if (value) {\n                searchParams.append(key, value);\n            }\n        }\n        return `${endpoint}?${searchParams.toString()}`;\n    }\n    handleApiError(error, resourceUrl) {\n        if (!error.response) {\n            logger_1.Logger.warn(error);\n            throw new errors_1.ErrNetworkProvider(resourceUrl, error.toString(), error);\n        }\n        let errorData = error.response.data;\n        let originalErrorMessage = errorData.error || errorData.message || JSON.stringify(errorData);\n        throw new errors_1.ErrNetworkProvider(resourceUrl, originalErrorMessage, error);\n    }\n}\nexports.ProxyNetworkProvider = ProxyNetworkProvider;\n//# sourceMappingURL=proxyNetworkProvider.js.map"]},"metadata":{},"sourceType":"script"}