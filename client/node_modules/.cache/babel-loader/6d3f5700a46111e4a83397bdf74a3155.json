{"ast":null,"code":"import _slicedToArray from\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import*as React from'react';import{useEffect}from'react';import{transactionServices}from'@elrondnetwork/dapp-core';import{ContractFunction,ProxyProvider,Address,Query,decodeString}from'@elrondnetwork/erdjs';import{Formik}from'formik';import{object,string}from'yup';import{Submit}from'components/Action';import{network}from'config';import{useDispatch,useGlobalContext}from'context';import modifiable from'helpers/modifiable';import useTransaction from'helpers/useTransaction';import styles from'./styles.module.scss';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Identity=function Identity(){var _useGlobalContext=useGlobalContext(),agencyMetaData=_useGlobalContext.agencyMetaData;var _useTransaction=useTransaction(),sendTransaction=_useTransaction.sendTransaction;var _transactionServices$=transactionServices.useGetActiveTransactionsStatus(),success=_transactionServices$.success,hasActiveTransactions=_transactionServices$.hasActiveTransactions;var dispatch=useDispatch();var fields=[{name:'name',label:'Name'},{name:'website',label:'Website'},{name:'keybase',label:'Keybase'}];var validationSchema=object().shape({name:string().required('Name required.'),keybase:string().required('Keybase required.'),website:string().required('Website required.').test('URL','URL is not valid!',function(value){try{return value&&!value.includes('#')&&Boolean(new URL(value||''));}catch(error){return false;}})});var onSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(payload){var _Object$keys$reduce,website,name,keybase;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_Object$keys$reduce=Object.keys(payload).reduce(function(data,key){return _objectSpread(_objectSpread({},data),{},_defineProperty({},key,Buffer.from(payload[key]).toString('hex')));},{}),website=_Object$keys$reduce.website,name=_Object$keys$reduce.name,keybase=_Object$keys$reduce.keybase;_context.prev=1;_context.next=4;return sendTransaction({args:\"\".concat(name,\"@\").concat(website,\"@\").concat(keybase),type:'setMetaData',value:'0'});case 4:_context.next=9;break;case 6:_context.prev=6;_context.t0=_context[\"catch\"](1);console.error(_context.t0);case 9:case\"end\":return _context.stop();}}},_callee,null,[[1,6]]);}));return function onSubmit(_x){return _ref.apply(this,arguments);};}();var getAgencyMetaData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var provider,query,data,_data$outputUntyped$m,_data$outputUntyped$m2,name,website,keybase;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch({type:'getAgencyMetaData',agencyMetaData:{status:'loading',data:null,error:null}});_context2.prev=1;provider=new ProxyProvider(network.gatewayAddress);query=new Query({address:new Address(network.delegationContract),func:new ContractFunction('getMetaData')});_context2.next=6;return provider.queryContract(query);case 6:data=_context2.sent;_data$outputUntyped$m=data.outputUntyped().map(decodeString),_data$outputUntyped$m2=_slicedToArray(_data$outputUntyped$m,3),name=_data$outputUntyped$m2[0],website=_data$outputUntyped$m2[1],keybase=_data$outputUntyped$m2[2];dispatch({type:'getAgencyMetaData',agencyMetaData:{status:'loaded',error:null,data:{name:name,website:website,keybase:keybase}}});_context2.next=14;break;case 11:_context2.prev=11;_context2.t0=_context2[\"catch\"](1);dispatch({type:'getAgencyMetaData',agencyMetaData:{status:'error',data:null,error:_context2.t0}});case 14:case\"end\":return _context2.stop();}}},_callee2,null,[[1,11]]);}));return function getAgencyMetaData(){return _ref2.apply(this,arguments);};}();var fetchAgencyMetaData=function fetchAgencyMetaData(){if(!agencyMetaData.data){getAgencyMetaData();}};var refetchAgencyMetaData=function refetchAgencyMetaData(){if(hasActiveTransactions&&success&&agencyMetaData.data){getAgencyMetaData();}};useEffect(fetchAgencyMetaData,[agencyMetaData.data]);useEffect(refetchAgencyMetaData,[hasActiveTransactions,success]);return/*#__PURE__*/_jsx(Formik,{validationSchema:validationSchema,onSubmit:onSubmit,enableReinitialize:true,initialValues:agencyMetaData.data||{name:'',website:'',keybase:''},children:function children(_ref3){var errors=_ref3.errors,values=_ref3.values,touched=_ref3.touched,handleChange=_ref3.handleChange,handleBlur=_ref3.handleBlur,handleSubmit=_ref3.handleSubmit;return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:styles.identity,children:[fields.map(function(field){return/*#__PURE__*/_jsxs(\"div\",{className:styles.field,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:field.name,children:field.label}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:modifiable('input',[errors[field.name]&&touched[field.name]&&'invalid'],styles),name:field.name,value:values[field.name],autoComplete:\"off\",onChange:handleChange,onBlur:handleBlur}),errors[field.name]&&touched[field.name]&&/*#__PURE__*/_jsx(\"span\",{className:styles.error,children:errors[field.name]})]})]},field.name);}),/*#__PURE__*/_jsx(Submit,{close:\"Cancel\",submit:\"Save\"})]});}});};export default Identity;","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Heading/components/Identity/index.tsx"],"names":["React","useEffect","transactionServices","ContractFunction","ProxyProvider","Address","Query","decodeString","Formik","object","string","Submit","network","useDispatch","useGlobalContext","modifiable","useTransaction","styles","Identity","agencyMetaData","sendTransaction","useGetActiveTransactionsStatus","success","hasActiveTransactions","dispatch","fields","name","label","validationSchema","shape","required","keybase","website","test","value","includes","Boolean","URL","error","onSubmit","payload","Object","keys","reduce","data","key","Buffer","from","toString","args","type","console","getAgencyMetaData","status","provider","gatewayAddress","query","address","delegationContract","func","queryContract","outputUntyped","map","fetchAgencyMetaData","refetchAgencyMetaData","errors","values","touched","handleChange","handleBlur","handleSubmit","identity","field"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEffect } from 'react';\n\nimport { transactionServices } from '@elrondnetwork/dapp-core';\nimport {\n  ContractFunction,\n  ProxyProvider,\n  Address,\n  Query,\n  decodeString\n} from '@elrondnetwork/erdjs';\n\nimport { Formik, FormikProps } from 'formik';\nimport { object, string } from 'yup';\n\nimport { Submit } from 'components/Action';\nimport { network } from 'config';\n\nimport { useDispatch, useGlobalContext } from 'context';\nimport modifiable from 'helpers/modifiable';\nimport useTransaction from 'helpers/useTransaction';\n\nimport styles from './styles.module.scss';\n\ninterface FieldType {\n  [key: string]: any;\n  label: string;\n  name: string;\n}\n\ninterface PayloadType {\n  [key: string]: any;\n  website?: string;\n  keybase?: string;\n  name?: string;\n}\n\nconst Identity: React.FC = () => {\n  const { agencyMetaData } = useGlobalContext();\n  const { sendTransaction } = useTransaction();\n  const { success, hasActiveTransactions } =\n    transactionServices.useGetActiveTransactionsStatus();\n\n  const dispatch = useDispatch();\n  const fields: Array<FieldType> = [\n    {\n      name: 'name',\n      label: 'Name'\n    },\n    {\n      name: 'website',\n      label: 'Website'\n    },\n    {\n      name: 'keybase',\n      label: 'Keybase'\n    }\n  ];\n\n  const validationSchema = object().shape({\n    name: string().required('Name required.'),\n    keybase: string().required('Keybase required.'),\n    website: string()\n      .required('Website required.')\n      .test('URL', 'URL is not valid!', (value: any) => {\n        try {\n          return value && !value.includes('#') && Boolean(new URL(value || ''));\n        } catch (error) {\n          return false;\n        }\n      })\n  });\n\n  const onSubmit = async (payload: PayloadType): Promise<void> => {\n    const { website, name, keybase }: PayloadType = Object.keys(payload).reduce(\n      (data, key) => ({\n        ...data,\n        [key]: Buffer.from(payload[key]).toString('hex')\n      }),\n      {}\n    );\n\n    try {\n      await sendTransaction({\n        args: `${name}@${website}@${keybase}`,\n        type: 'setMetaData',\n        value: '0'\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getAgencyMetaData = async (): Promise<void> => {\n    dispatch({\n      type: 'getAgencyMetaData',\n      agencyMetaData: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyProvider(network.gatewayAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getMetaData')\n      });\n\n      const data = await provider.queryContract(query);\n      const [name, website, keybase] = data.outputUntyped().map(decodeString);\n\n      dispatch({\n        type: 'getAgencyMetaData',\n        agencyMetaData: {\n          status: 'loaded',\n          error: null,\n          data: {\n            name,\n            website,\n            keybase\n          }\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getAgencyMetaData',\n        agencyMetaData: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const fetchAgencyMetaData = () => {\n    if (!agencyMetaData.data) {\n      getAgencyMetaData();\n    }\n  };\n\n  const refetchAgencyMetaData = () => {\n    if (hasActiveTransactions && success && agencyMetaData.data) {\n      getAgencyMetaData();\n    }\n  };\n\n  useEffect(fetchAgencyMetaData, [agencyMetaData.data]);\n  useEffect(refetchAgencyMetaData, [hasActiveTransactions, success]);\n\n  return (\n    <Formik\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n      enableReinitialize={true}\n      initialValues={\n        agencyMetaData.data || { name: '', website: '', keybase: '' }\n      }\n    >\n      {({\n        errors,\n        values,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit\n      }: FormikProps<PayloadType>) => (\n        <form onSubmit={handleSubmit} className={styles.identity}>\n          {fields.map((field: FieldType) => (\n            <div key={field.name} className={styles.field}>\n              <label htmlFor={field.name}>{field.label}</label>\n              <div className='input-group'>\n                <input\n                  type='text'\n                  className={modifiable(\n                    'input',\n                    [errors[field.name] && touched[field.name] && 'invalid'],\n                    styles\n                  )}\n                  name={field.name}\n                  value={values[field.name]}\n                  autoComplete='off'\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                />\n\n                {errors[field.name] && touched[field.name] && (\n                  <span className={styles.error}>{errors[field.name]}</span>\n                )}\n              </div>\n            </div>\n          ))}\n\n          <Submit close='Cancel' submit='Save' />\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default Identity;\n"]},"metadata":{},"sourceType":"module"}