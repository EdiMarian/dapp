{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/components/SelectHorse/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { getNfts } from '../../apiRequests';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport styles from './styles.module.scss';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectHorse = props => {\n  _s();\n\n  const {\n    address\n  } = useGetAccountInfo();\n  const [nft, setNft] = useState([]);\n  const [socket, setSocket] = useState();\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await getNfts(address).then(res => res.data);\n      setNft(data);\n    };\n\n    fetch();\n    const s = io('http://localhost:4000');\n    setSocket(s);\n    return () => {\n      s.disconnect();\n    };\n  }, []);\n\n  const enter = async horse => {\n    const data = await {\n      address: address,\n      horse: horse,\n      feePaid: true,\n      raceId: props.id\n    };\n    await socket.emit('enter-race', data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.nftGrid,\n    style: props.col ? {\n      gridTemplateColumns: `repeat(${props.col}, 1fr)`\n    } : {\n      gridTemplateColumns: 'repeat(4, 1fr)'\n    },\n    children: nft ? nft.map(({\n      identifier,\n      name,\n      url\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.nftContent,\n      onClick: () => enter(name),\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        className: styles.img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: props.color ? {\n          color: props.color\n        } : {\n          color: 'white'\n        },\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)]\n    }, identifier, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You don't have EquiStar Nfts.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectHorse, \"lQWb/fXDUSsR84zPSBZcqxUEbDo=\", false, function () {\n  return [useGetAccountInfo];\n});\n\n_c = SelectHorse;\nexport default SelectHorse;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectHorse\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/components/SelectHorse/index.js"],"names":["React","useState","useEffect","getNfts","useGetAccountInfo","styles","io","SelectHorse","props","address","nft","setNft","socket","setSocket","fetch","data","then","res","s","disconnect","enter","horse","feePaid","raceId","id","emit","nftGrid","col","gridTemplateColumns","map","identifier","name","url","nftContent","img","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,EAAT,QAAmB,kBAAnB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAcL,iBAAiB,EAArC;AACA,QAAM,CAACM,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,EAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,KAAK,GAAG,YAAY;AACxB,YAAMC,IAAI,GAAG,MAAMZ,OAAO,CAACM,OAAD,CAAP,CAAiBO,IAAjB,CAAuBC,GAAD,IAASA,GAAG,CAACF,IAAnC,CAAnB;AACAJ,MAAAA,MAAM,CAACI,IAAD,CAAN;AACD,KAHD;;AAIAD,IAAAA,KAAK;AAGL,UAAMI,CAAC,GAAGZ,EAAE,CAAC,uBAAD,CAAZ;AACAO,IAAAA,SAAS,CAACK,CAAD,CAAT;AAEA,WAAO,MAAM;AACXA,MAAAA,CAAC,CAACC,UAAF;AACD,KAFD;AAGD,GAdQ,EAcN,EAdM,CAAT;;AAgBA,QAAMC,KAAK,GAAG,MAAOC,KAAP,IAAiB;AAC7B,UAAMN,IAAI,GAAG,MAAM;AACfN,MAAAA,OAAO,EAAEA,OADM;AAEfY,MAAAA,KAAK,EAAEA,KAFQ;AAGfC,MAAAA,OAAO,EAAE,IAHM;AAIfC,MAAAA,MAAM,EAAEf,KAAK,CAACgB;AAJC,KAAnB;AAMA,UAAMZ,MAAM,CAACa,IAAP,CAAY,YAAZ,EAA0BV,IAA1B,CAAN;AACD,GARD;;AAUA,sBACE;AACE,IAAA,SAAS,EAAEV,MAAM,CAACqB,OADpB;AAEE,IAAA,KAAK,EACHlB,KAAK,CAACmB,GAAN,GACI;AACEC,MAAAA,mBAAmB,EAAG,UAASpB,KAAK,CAACmB,GAAI;AAD3C,KADJ,GAII;AACEC,MAAAA,mBAAmB,EAAE;AADvB,KAPR;AAAA,cAYGlB,GAAG,GACFA,GAAG,CAACmB,GAAJ,CAAQ,CAAC;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,IAAd;AAAoBC,MAAAA;AAApB,KAAD,kBACN;AAEE,MAAA,SAAS,EAAE3B,MAAM,CAAC4B,UAFpB;AAGE,MAAA,OAAO,EAAE,MAAMb,KAAK,CAACW,IAAD,CAHtB;AAAA,8BAKE;AAAK,QAAA,GAAG,EAAEC,GAAV;AAAe,QAAA,SAAS,EAAE3B,MAAM,CAAC6B;AAAjC;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AACE,QAAA,KAAK,EAAE1B,KAAK,CAAC2B,KAAN,GAAc;AAAEA,UAAAA,KAAK,EAAE3B,KAAK,CAAC2B;AAAf,SAAd,GAAuC;AAAEA,UAAAA,KAAK,EAAE;AAAT,SADhD;AAAA,kBAGGJ;AAHH;AAAA;AAAA;AAAA;AAAA,cANF;AAAA,OACOD,UADP;AAAA;AAAA;AAAA;AAAA,YADF,CADE,gBAgBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5BJ;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD,CA/DD;;GAAMvB,W;UACgBH,iB;;;KADhBG,W;AAiEN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getNfts } from '../../apiRequests';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport styles from './styles.module.scss';\nimport { io } from 'socket.io-client';\n\nconst SelectHorse = (props) => {\n  const { address } = useGetAccountInfo();\n  const [nft, setNft] = useState([]);\n  const [socket, setSocket] = useState();\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await getNfts(address).then((res) => res.data);\n      setNft(data);\n    };\n    fetch();\n\n\n    const s = io('http://localhost:4000');\n    setSocket(s);\n    \n    return () => {\n      s.disconnect();\n    }\n  }, []);\n\n  const enter = async (horse) => {\n    const data = await {\n        address: address,\n        horse: horse,\n        feePaid: true,\n        raceId: props.id,\n      };\n    await socket.emit('enter-race', data)\n  };\n\n  return (\n    <div\n      className={styles.nftGrid}\n      style={\n        props.col\n          ? {\n              gridTemplateColumns: `repeat(${props.col}, 1fr)`\n            }\n          : {\n              gridTemplateColumns: 'repeat(4, 1fr)'\n            }\n      }\n    >\n      {nft ? (\n        nft.map(({ identifier, name, url }) => (\n          <div\n            key={identifier}\n            className={styles.nftContent}\n            onClick={() => enter(name)}\n          >\n            <img src={url} className={styles.img} />\n            <p\n              style={props.color ? { color: props.color } : { color: 'white' }}\n            >\n              {name}\n            </p>\n          </div>\n        ))\n      ) : (\n        <p>You don&apos;t have EquiStar Nfts.</p>\n      )}\n    </div>\n  );\n};\n\nexport default SelectHorse;\n"]},"metadata":{},"sourceType":"module"}