{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkStatus = void 0;\n/**\n * An object holding network status configuration parameters.\n */\n\nvar NetworkStatus = /*#__PURE__*/function () {\n  function NetworkStatus() {\n    _classCallCheck(this, NetworkStatus);\n\n    this.CurrentRound = 0;\n    this.EpochNumber = 0;\n    this.HighestFinalNonce = 0;\n    this.Nonce = 0;\n    this.NonceAtEpochStart = 0;\n    this.NoncesPassedInCurrentEpoch = 0;\n    this.RoundAtEpochStart = 0;\n    this.RoundsPassedInCurrentEpoch = 0;\n    this.RoundsPerEpoch = 0;\n  }\n  /**\n   * Gets the default network status object (think of the Singleton pattern).\n   */\n\n\n  _createClass(NetworkStatus, [{\n    key: \"sync\",\n    value:\n    /**\n     * Synchronizes a configuration object by querying the node, through a {@link IProvider}.\n     * @param provider The provider to use\n     */\n    function sync(provider) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var fresh;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return provider.getNetworkStatus();\n\n              case 2:\n                fresh = _context.sent;\n                Object.assign(this, fresh);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Constructs a configuration object from a HTTP response (as returned by the provider).\n     */\n\n  }], [{\n    key: \"getDefault\",\n    value: function getDefault() {\n      if (!NetworkStatus.default) {\n        NetworkStatus.default = new NetworkStatus();\n      }\n\n      return NetworkStatus.default;\n    }\n  }, {\n    key: \"fromHttpResponse\",\n    value: function fromHttpResponse(payload) {\n      var networkStatus = new NetworkStatus();\n      networkStatus.CurrentRound = Number(payload[\"erd_current_round\"]);\n      networkStatus.EpochNumber = Number(payload[\"erd_epoch_number\"]);\n      networkStatus.HighestFinalNonce = Number(payload[\"erd_highest_final_nonce\"]);\n      networkStatus.Nonce = Number(payload[\"erd_nonce\"]);\n      networkStatus.NonceAtEpochStart = Number(payload[\"erd_nonce_at_epoch_start\"]);\n      networkStatus.NoncesPassedInCurrentEpoch = Number(payload[\"erd_nonces_passed_in_current_epoch\"]);\n      networkStatus.RoundAtEpochStart = Number(payload[\"erd_round_at_epoch_start\"]);\n      networkStatus.RoundsPassedInCurrentEpoch = Number(payload[\"erd_rounds_passed_in_current_epoch\"]);\n      networkStatus.RoundsPerEpoch = Number(payload[\"erd_rounds_per_epoch\"]);\n      return networkStatus;\n    }\n  }]);\n\n  return NetworkStatus;\n}();\n\nexports.NetworkStatus = NetworkStatus;","map":{"version":3,"sources":["../src/networkStatus.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAEG;;IACU,a;AAgDT,2BAAA;AAAA;;AACI,SAAK,YAAL,GAAoB,CAApB;AACA,SAAK,WAAL,GAAmB,CAAnB;AACA,SAAK,iBAAL,GAAyB,CAAzB;AACA,SAAK,KAAL,GAAa,CAAb;AACA,SAAK,iBAAL,GAAyB,CAAzB;AACA,SAAK,0BAAL,GAAkC,CAAlC;AACA,SAAK,iBAAL,GAAyB,CAAzB;AACA,SAAK,0BAAL,GAAkC,CAAlC;AACA,SAAK,cAAL,GAAsB,CAAtB;AACH;AAED;;AAEG;;;;;;AASH;;;AAGG;AACG,kBAAK,QAAL,EAAwB;;;;;;;;AACC,uBAAM,QAAQ,CAAC,gBAAT,EAAN;;;AAAvB,gBAAA,K;AACJ,gBAAA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,KAApB;;;;;;;;;AACH;AAED;;AAEG;;;;WAnBH,sBAAiB;AACb,UAAI,CAAC,aAAa,CAAC,OAAnB,EAA4B;AACxB,QAAA,aAAa,CAAC,OAAd,GAAwB,IAAI,aAAJ,EAAxB;AACH;;AAED,aAAO,aAAa,CAAC,OAArB;AACH;;;WAcD,0BAAwB,OAAxB,EAAoC;AAChC,UAAI,aAAa,GAAG,IAAI,aAAJ,EAApB;AAEA,MAAA,aAAa,CAAC,YAAd,GAA6B,MAAM,CAAC,OAAO,CAAC,mBAAD,CAAR,CAAnC;AACA,MAAA,aAAa,CAAC,WAAd,GAA4B,MAAM,CAAC,OAAO,CAAC,kBAAD,CAAR,CAAlC;AACA,MAAA,aAAa,CAAC,iBAAd,GAAkC,MAAM,CAAC,OAAO,CAAC,yBAAD,CAAR,CAAxC;AACA,MAAA,aAAa,CAAC,KAAd,GAAsB,MAAM,CAAC,OAAO,CAAC,WAAD,CAAR,CAA5B;AACA,MAAA,aAAa,CAAC,iBAAd,GAAkC,MAAM,CAAC,OAAO,CAAC,0BAAD,CAAR,CAAxC;AACA,MAAA,aAAa,CAAC,0BAAd,GAA2C,MAAM,CAAC,OAAO,CAAC,oCAAD,CAAR,CAAjD;AACA,MAAA,aAAa,CAAC,iBAAd,GAAkC,MAAM,CAAC,OAAO,CAAC,0BAAD,CAAR,CAAxC;AACA,MAAA,aAAa,CAAC,0BAAd,GAA2C,MAAM,CAAC,OAAO,CAAC,oCAAD,CAAR,CAAjD;AACA,MAAA,aAAa,CAAC,cAAd,GAA+B,MAAM,CAAC,OAAO,CAAC,sBAAD,CAAR,CAArC;AAEA,aAAO,aAAP;AACH;;;;;;AAjGL,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NetworkStatus = void 0;\n/**\n * An object holding network status configuration parameters.\n */\nclass NetworkStatus {\n    constructor() {\n        this.CurrentRound = 0;\n        this.EpochNumber = 0;\n        this.HighestFinalNonce = 0;\n        this.Nonce = 0;\n        this.NonceAtEpochStart = 0;\n        this.NoncesPassedInCurrentEpoch = 0;\n        this.RoundAtEpochStart = 0;\n        this.RoundsPassedInCurrentEpoch = 0;\n        this.RoundsPerEpoch = 0;\n    }\n    /**\n     * Gets the default network status object (think of the Singleton pattern).\n     */\n    static getDefault() {\n        if (!NetworkStatus.default) {\n            NetworkStatus.default = new NetworkStatus();\n        }\n        return NetworkStatus.default;\n    }\n    /**\n     * Synchronizes a configuration object by querying the node, through a {@link IProvider}.\n     * @param provider The provider to use\n     */\n    sync(provider) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let fresh = yield provider.getNetworkStatus();\n            Object.assign(this, fresh);\n        });\n    }\n    /**\n     * Constructs a configuration object from a HTTP response (as returned by the provider).\n     */\n    static fromHttpResponse(payload) {\n        let networkStatus = new NetworkStatus();\n        networkStatus.CurrentRound = Number(payload[\"erd_current_round\"]);\n        networkStatus.EpochNumber = Number(payload[\"erd_epoch_number\"]);\n        networkStatus.HighestFinalNonce = Number(payload[\"erd_highest_final_nonce\"]);\n        networkStatus.Nonce = Number(payload[\"erd_nonce\"]);\n        networkStatus.NonceAtEpochStart = Number(payload[\"erd_nonce_at_epoch_start\"]);\n        networkStatus.NoncesPassedInCurrentEpoch = Number(payload[\"erd_nonces_passed_in_current_epoch\"]);\n        networkStatus.RoundAtEpochStart = Number(payload[\"erd_round_at_epoch_start\"]);\n        networkStatus.RoundsPassedInCurrentEpoch = Number(payload[\"erd_rounds_passed_in_current_epoch\"]);\n        networkStatus.RoundsPerEpoch = Number(payload[\"erd_rounds_per_epoch\"]);\n        return networkStatus;\n    }\n}\nexports.NetworkStatus = NetworkStatus;\n//# sourceMappingURL=networkStatus.js.map"]},"metadata":{},"sourceType":"script"}