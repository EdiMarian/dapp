{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Cards/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport Action from '../Action';\nimport { faCog, faAnchor, faBox, faFile } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport modifiable from 'helpers/modifiable';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cards = () => {\n  _s();\n\n  const location = useLocation();\n  const {\n    address\n  } = useGetAccountInfo();\n  const mintedUrl = 'https://api.elrond.com/nfts/count?collection=EQUISTAR-3f393f';\n  const estarWalletUrl = `https://api.elrond.com/accounts/${address}/tokens/ESTAR-afaaf0`;\n  const [estarWallet, setEstarWallet] = useState(0);\n\n  const fetchEstarWallet = () => {\n    axios.get(estarWalletUrl).then(res => {\n      setEstarWallet(res.data.balance);\n    });\n  };\n\n  const walletNftsUrl = `https://api.elrond.com/accounts/${address}/nfts?collection=EQUISTAR-3f393f`;\n  const [minted, setMinted] = useState();\n  const [nftWallet, setNftWallet] = useState();\n\n  const getNftsMinted = () => {\n    axios.get(mintedUrl).then(res => {\n      setMinted(res.data);\n    });\n  };\n\n  const getNftsWallet = () => {\n    axios.get(walletNftsUrl).then(res => {\n      setNftWallet(res.data.length);\n    });\n  };\n\n  const cards = [{\n    label: 'Nfts minted',\n    data: {\n      value: minted\n    },\n    colors: ['#2044F5', '#1B37C0'],\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faAnchor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, {\n    label: 'Total Supply',\n    colors: ['#33cc33', '#2eb82e'],\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faBox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this),\n    data: {\n      value: `${estarWallet}`\n    }\n  }, {\n    label: 'Your NFTs',\n    colors: ['#6CADEF', '#5B96D2'],\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this),\n    data: {\n      value: nftWallet\n    }\n  }];\n  useEffect(getNftsMinted, []);\n  useEffect(getNftsWallet, []);\n  useEffect(fetchEstarWallet, []);\n  const test = estarWallet / 100;\n  console.log(estarWallet);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.cards,\n    children: cards.map(card => {\n      const [alpha, beta] = card.colors;\n      const background = `linear-gradient(180deg, ${alpha} 0%, ${beta} 100%)`;\n      const interactive = card.modal && location.pathname === '/admin';\n      const data = card.data;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.card,\n        style: {\n          background\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.heading,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: card.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fill: interactive ? beta : 'white'\n            },\n            className: modifiable('icon', [interactive && 'fill'], styles),\n            children: interactive ? /*#__PURE__*/_jsxDEV(Action, {\n              render: card.modal,\n              title: card.title,\n              description: card.description,\n              trigger: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.trigger,\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faCog,\n                  size: \"lg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this) : card.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.value,\n          children: card.data.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, card.label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cards, \"RbFo84I5xOQGqY+hrB8hyBAOuHs=\", false, function () {\n  return [useLocation, useGetAccountInfo];\n});\n\n_c = Cards;\nexport default Cards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Cards/index.tsx"],"names":["React","useEffect","useState","useGetAccountInfo","Action","faCog","faAnchor","faBox","faFile","FontAwesomeIcon","axios","useLocation","modifiable","styles","Cards","location","address","mintedUrl","estarWalletUrl","estarWallet","setEstarWallet","fetchEstarWallet","get","then","res","data","balance","walletNftsUrl","minted","setMinted","nftWallet","setNftWallet","getNftsMinted","getNftsWallet","length","cards","label","value","colors","icon","test","console","log","map","card","alpha","beta","background","interactive","modal","pathname","heading","fill","title","description","trigger"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAGA,SACEC,KADF,EAEEC,QAFF,EAGEC,KAHF,EAIEC,MAJF,QAKO,mCALP;AAMA,SAASC,eAAT,QAAgC,gCAAhC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAcA,MAAMC,KAAe,GAAG,MAAM;AAAA;;AAC5B,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAcb,iBAAiB,EAArC;AAEA,QAAMc,SAAS,GACb,8DADF;AAEA,QAAMC,cAAc,GAAI,mCAAkCF,OAAQ,sBAAlE;AACA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,CAAD,CAA9C;;AACA,QAAMmB,gBAAgB,GAAG,MAAM;AAC7BX,IAAAA,KAAK,CAACY,GAAN,CAAUJ,cAAV,EAA0BK,IAA1B,CAAgCC,GAAD,IAAS;AACtCJ,MAAAA,cAAc,CAACI,GAAG,CAACC,IAAJ,CAASC,OAAV,CAAd;AACD,KAFD;AAGD,GAJD;;AAKA,QAAMC,aAAa,GAAI,mCAAkCX,OAAQ,kCAAjE;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsB3B,QAAQ,EAApC;AACA,QAAM,CAAC4B,SAAD,EAAYC,YAAZ,IAA4B7B,QAAQ,EAA1C;;AAEA,QAAM8B,aAAa,GAAG,MAAM;AAC1BtB,IAAAA,KAAK,CAACY,GAAN,CAAUL,SAAV,EAAqBM,IAArB,CAA2BC,GAAD,IAAS;AACjCK,MAAAA,SAAS,CAACL,GAAG,CAACC,IAAL,CAAT;AACD,KAFD;AAGD,GAJD;;AAMA,QAAMQ,aAAa,GAAG,MAAM;AAC1BvB,IAAAA,KAAK,CAACY,GAAN,CAAUK,aAAV,EAAyBJ,IAAzB,CAA+BC,GAAD,IAAS;AACrCO,MAAAA,YAAY,CAACP,GAAG,CAACC,IAAJ,CAASS,MAAV,CAAZ;AACD,KAFD;AAGD,GAJD;;AAMA,QAAMC,KAAsB,GAAG,CAC7B;AACEC,IAAAA,KAAK,EAAE,aADT;AAEEX,IAAAA,IAAI,EAAE;AACJY,MAAAA,KAAK,EAAET;AADH,KAFR;AAKEU,IAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,CALV;AAMEC,IAAAA,IAAI,eAAE,QAAC,eAAD;AAAiB,MAAA,IAAI,EAAEjC;AAAvB;AAAA;AAAA;AAAA;AAAA;AANR,GAD6B,EAS7B;AACE8B,IAAAA,KAAK,EAAE,cADT;AAEEE,IAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,CAFV;AAGEC,IAAAA,IAAI,eAAE,QAAC,eAAD;AAAiB,MAAA,IAAI,EAAEhC;AAAvB;AAAA;AAAA;AAAA;AAAA,YAHR;AAIEkB,IAAAA,IAAI,EAAE;AACJY,MAAAA,KAAK,EAAG,GAAElB,WAAY;AADlB;AAJR,GAT6B,EAiB7B;AACEiB,IAAAA,KAAK,EAAE,WADT;AAEEE,IAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,CAFV;AAGEC,IAAAA,IAAI,eAAE,QAAC,eAAD;AAAiB,MAAA,IAAI,EAAE/B;AAAvB;AAAA;AAAA;AAAA;AAAA,YAHR;AAIEiB,IAAAA,IAAI,EAAE;AACJY,MAAAA,KAAK,EAAEP;AADH;AAJR,GAjB6B,CAA/B;AA0BA7B,EAAAA,SAAS,CAAC+B,aAAD,EAAgB,EAAhB,CAAT;AACA/B,EAAAA,SAAS,CAACgC,aAAD,EAAgB,EAAhB,CAAT;AACAhC,EAAAA,SAAS,CAACoB,gBAAD,EAAmB,EAAnB,CAAT;AACA,QAAMmB,IAAI,GAAGrB,WAAW,GAAG,GAA3B;AACAsB,EAAAA,OAAO,CAACC,GAAR,CAAYvB,WAAZ;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACsB,KAAvB;AAAA,cACGA,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAU;AACnB,YAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBF,IAAI,CAACN,MAA3B;AACA,YAAMS,UAAU,GAAI,2BAA0BF,KAAM,QAAOC,IAAK,QAAhE;AACA,YAAME,WAAW,GAAGJ,IAAI,CAACK,KAAL,IAAclC,QAAQ,CAACmC,QAAT,KAAsB,QAAxD;AACA,YAAMzB,IAAI,GAAGmB,IAAI,CAACnB,IAAlB;AAEA,0BACE;AAAsB,QAAA,SAAS,EAAEZ,MAAM,CAAC+B,IAAxC;AAA8C,QAAA,KAAK,EAAE;AAAEG,UAAAA;AAAF,SAArD;AAAA,gCACE;AAAK,UAAA,SAAS,EAAElC,MAAM,CAACsC,OAAvB;AAAA,kCACE;AAAA,sBAAOP,IAAI,CAACR;AAAZ;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACE,YAAA,KAAK,EAAE;AAAEgB,cAAAA,IAAI,EAAEJ,WAAW,GAAGF,IAAH,GAAU;AAA7B,aADT;AAEE,YAAA,SAAS,EAAElC,UAAU,CAAC,MAAD,EAAS,CAACoC,WAAW,IAAI,MAAhB,CAAT,EAAkCnC,MAAlC,CAFvB;AAAA,sBAIGmC,WAAW,gBACV,QAAC,MAAD;AACE,cAAA,MAAM,EAAEJ,IAAI,CAACK,KADf;AAEE,cAAA,KAAK,EAAEL,IAAI,CAACS,KAFd;AAGE,cAAA,WAAW,EAAET,IAAI,CAACU,WAHpB;AAIE,cAAA,OAAO,eACL;AAAM,gBAAA,SAAS,EAAEzC,MAAM,CAAC0C,OAAxB;AAAA,uCACE,QAAC,eAAD;AAAiB,kBAAA,IAAI,EAAElD,KAAvB;AAA8B,kBAAA,IAAI,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,oBADU,GAYVuC,IAAI,CAACL;AAhBT;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAuBE;AAAK,UAAA,SAAS,EAAE1B,MAAM,CAACwB,KAAvB;AAAA,oBAA+BO,IAAI,CAACnB,IAAL,CAAUY;AAAzC;AAAA;AAAA;AAAA;AAAA,gBAvBF;AAAA,SAAUO,IAAI,CAACR,KAAf;AAAA;AAAA;AAAA;AAAA,cADF;AA2BD,KAjCA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD,CAnGD;;GAAMtB,K;UACaH,W,EACGR,iB;;;KAFhBW,K;AAqGN,eAAeA,KAAf","sourcesContent":["import * as React from 'react';\nimport { useEffect, ReactNode, useState } from 'react';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport Action from '../Action';\nimport denominate from '../../helpers/denominate';\n\nimport {\n  faCog,\n  faAnchor,\n  faBox,\n  faFile\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\n\nimport modifiable from 'helpers/modifiable';\nimport styles from './styles.module.scss';\n\ninterface CardType {\n  label: string;\n  colors: Array<string>;\n  data: {\n    value?: string | null;\n  };\n  title?: string;\n  description?: string;\n  modal?: ReactNode;\n  icon: ReactNode;\n}\n\nconst Cards: React.FC = () => {\n  const location = useLocation();\n  const { address } = useGetAccountInfo();\n\n  const mintedUrl =\n    'https://api.elrond.com/nfts/count?collection=EQUISTAR-3f393f';\n  const estarWalletUrl = `https://api.elrond.com/accounts/${address}/tokens/ESTAR-afaaf0`;\n  const [estarWallet, setEstarWallet] = useState(0);\n  const fetchEstarWallet = () => {\n    axios.get(estarWalletUrl).then((res) => {\n      setEstarWallet(res.data.balance);\n    });\n  };\n  const walletNftsUrl = `https://api.elrond.com/accounts/${address}/nfts?collection=EQUISTAR-3f393f`;\n  const [minted, setMinted] = useState();\n  const [nftWallet, setNftWallet] = useState();\n\n  const getNftsMinted = () => {\n    axios.get(mintedUrl).then((res) => {\n      setMinted(res.data);\n    });\n  };\n\n  const getNftsWallet = () => {\n    axios.get(walletNftsUrl).then((res) => {\n      setNftWallet(res.data.length);\n    });\n  };\n\n  const cards: Array<CardType> = [\n    {\n      label: 'Nfts minted',\n      data: {\n        value: minted\n      },\n      colors: ['#2044F5', '#1B37C0'],\n      icon: <FontAwesomeIcon icon={faAnchor} />\n    },\n    {\n      label: 'Total Supply',\n      colors: ['#33cc33', '#2eb82e'],\n      icon: <FontAwesomeIcon icon={faBox} />,\n      data: {\n        value: `${estarWallet}`\n      }\n    },\n    {\n      label: 'Your NFTs',\n      colors: ['#6CADEF', '#5B96D2'],\n      icon: <FontAwesomeIcon icon={faFile} />,\n      data: {\n        value: nftWallet\n      }\n    }\n  ];\n  useEffect(getNftsMinted, []);\n  useEffect(getNftsWallet, []);\n  useEffect(fetchEstarWallet, []);\n  const test = estarWallet / 100;\n  console.log(estarWallet);\n\n  return (\n    <div className={styles.cards}>\n      {cards.map((card) => {\n        const [alpha, beta] = card.colors;\n        const background = `linear-gradient(180deg, ${alpha} 0%, ${beta} 100%)`;\n        const interactive = card.modal && location.pathname === '/admin';\n        const data = card.data;\n\n        return (\n          <div key={card.label} className={styles.card} style={{ background }}>\n            <div className={styles.heading}>\n              <span>{card.label}</span>\n              <div\n                style={{ fill: interactive ? beta : 'white' }}\n                className={modifiable('icon', [interactive && 'fill'], styles)}\n              >\n                {interactive ? (\n                  <Action\n                    render={card.modal}\n                    title={card.title}\n                    description={card.description}\n                    trigger={\n                      <span className={styles.trigger}>\n                        <FontAwesomeIcon icon={faCog} size='lg' />\n                      </span>\n                    }\n                  />\n                ) : (\n                  card.icon\n                )}\n              </div>\n            </div>\n            <div className={styles.value}>{card.data.value}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Cards;\n"]},"metadata":{},"sourceType":"module"}