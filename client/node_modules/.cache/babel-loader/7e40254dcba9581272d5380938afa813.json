{"ast":null,"code":"import{decodeString}from'@elrondnetwork/erdjs';import{denomination,decimals,feesInEpoch,stakePerNode,protocolSustainabilityRewards,yearSettings,genesisTokenSupply}from'config';import denominate from'helpers/denominate';var denominateValue=function denominateValue(value){var denominatedValueString=denominate({input:value,denomination:denomination,decimals:decimals});var valueWithoutComma=denominatedValueString.replace(/,/g,'');return valueWithoutComma;};var calculateAnnualPercentage=function calculateAnnualPercentage(_ref){var _yearSettings$find;var activeStake=_ref.activeStake,blsKeys=_ref.blsKeys,networkStatus=_ref.networkStatus,networkStake=_ref.networkStake,networkConfig=_ref.networkConfig,serviceFee=_ref.serviceFee;var allNodes=blsKeys.filter(function(key){return decodeString(key)==='staked'||decodeString(key)==='jailed'||decodeString(key)==='queued';}).length;var allActiveNodes=blsKeys.filter(function(key){return decodeString(key)==='staked';}).length;if(allActiveNodes<=0){return'0.00';}var epochDurationInSeconds=networkConfig.RoundDuration/1000*networkConfig.RoundsPerEpoch;var secondsInYear=365*24*3600;var epochsInYear=secondsInYear/epochDurationInSeconds;var inflationRate=((_yearSettings$find=yearSettings.find(function(x){return x.year===Math.floor(networkStatus.EpochNumber/epochsInYear)+1;}))===null||_yearSettings$find===void 0?void 0:_yearSettings$find.maximumInflation)||0;var rewardsPerEpoch=Math.max(inflationRate*genesisTokenSupply/epochsInYear,feesInEpoch);var rewardsPerEpochWithoutProtocolSustainability=(1-protocolSustainabilityRewards)*rewardsPerEpoch;var topUpRewardsLimit=networkConfig.TopUpFactor*rewardsPerEpochWithoutProtocolSustainability;var networkBaseStake=networkStake.ActiveValidators*stakePerNode;var networkTotalStake=parseInt(denominateValue(networkStatus.Balance));var networkTopUpStake=networkTotalStake-networkStake.TotalValidators*stakePerNode-networkStake.QueueSize*stakePerNode;var topUpReward=2*topUpRewardsLimit/Math.PI*Math.atan(networkTopUpStake/(2*parseInt(denominateValue(networkConfig.TopUpRewardsGradientPoint.toFixed()))));var baseReward=rewardsPerEpochWithoutProtocolSustainability-topUpReward;var validatorTotalStake=parseInt(denominateValue(activeStake));var actualNumberOfNodes=Math.min(Math.floor(validatorTotalStake/stakePerNode),allActiveNodes);var validatorBaseStake=actualNumberOfNodes*stakePerNode;var validatorTopUpStake=(validatorTotalStake-allNodes*stakePerNode)/allNodes*allActiveNodes;var validatorTopUpReward=networkTopUpStake>0?validatorTopUpStake/networkTopUpStake*topUpReward:0;var validatorBaseReward=validatorBaseStake/networkBaseStake*baseReward;var anualPercentageRate=epochsInYear*(validatorTopUpReward+validatorBaseReward)/validatorTotalStake;var annuallPercentageRateTotal=anualPercentageRate*100-anualPercentageRate*100*(serviceFee/100);return annuallPercentageRateTotal.toFixed(2).toString();};export default calculateAnnualPercentage;","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Cards/helpers/calculateAnnualPercentage.ts"],"names":["decodeString","denomination","decimals","feesInEpoch","stakePerNode","protocolSustainabilityRewards","yearSettings","genesisTokenSupply","denominate","denominateValue","value","denominatedValueString","input","valueWithoutComma","replace","calculateAnnualPercentage","activeStake","blsKeys","networkStatus","networkStake","networkConfig","serviceFee","allNodes","filter","key","length","allActiveNodes","epochDurationInSeconds","RoundDuration","RoundsPerEpoch","secondsInYear","epochsInYear","inflationRate","find","x","year","Math","floor","EpochNumber","maximumInflation","rewardsPerEpoch","max","rewardsPerEpochWithoutProtocolSustainability","topUpRewardsLimit","TopUpFactor","networkBaseStake","ActiveValidators","networkTotalStake","parseInt","Balance","networkTopUpStake","TotalValidators","QueueSize","topUpReward","PI","atan","TopUpRewardsGradientPoint","toFixed","baseReward","validatorTotalStake","actualNumberOfNodes","min","validatorBaseStake","validatorTopUpStake","validatorTopUpReward","validatorBaseReward","anualPercentageRate","annuallPercentageRateTotal","toString"],"mappings":"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","sourcesContent":["import { decodeString } from '@elrondnetwork/erdjs';\nimport {\n  denomination,\n  decimals,\n  feesInEpoch,\n  stakePerNode,\n  protocolSustainabilityRewards,\n  yearSettings,\n  genesisTokenSupply\n} from 'config';\nimport denominate from 'helpers/denominate';\n\nconst denominateValue = (value: string) => {\n  const denominatedValueString = denominate({\n    input: value,\n    denomination,\n    decimals\n  });\n  const valueWithoutComma = denominatedValueString.replace(/,/g, '');\n  return valueWithoutComma;\n};\n\nconst calculateAnnualPercentage = ({\n  activeStake,\n  blsKeys,\n  networkStatus,\n  networkStake,\n  networkConfig,\n  serviceFee\n}: any) => {\n  const allNodes = blsKeys.filter(\n    (key: any) =>\n      decodeString(key) === 'staked' ||\n      decodeString(key) === 'jailed' ||\n      decodeString(key) === 'queued'\n  ).length;\n  const allActiveNodes = blsKeys.filter(\n    (key: any) => decodeString(key) === 'staked'\n  ).length;\n  if (allActiveNodes <= 0) {\n    return '0.00';\n  }\n\n  const epochDurationInSeconds =\n    (networkConfig.RoundDuration / 1000) * networkConfig.RoundsPerEpoch;\n  const secondsInYear = 365 * 24 * 3600;\n  const epochsInYear = secondsInYear / epochDurationInSeconds;\n  const inflationRate =\n    yearSettings.find(\n      (x) => x.year === Math.floor(networkStatus.EpochNumber / epochsInYear) + 1\n    )?.maximumInflation || 0;\n  const rewardsPerEpoch = Math.max(\n    (inflationRate * genesisTokenSupply) / epochsInYear,\n    feesInEpoch\n  );\n  const rewardsPerEpochWithoutProtocolSustainability =\n    (1 - protocolSustainabilityRewards) * rewardsPerEpoch;\n  const topUpRewardsLimit =\n    networkConfig.TopUpFactor * rewardsPerEpochWithoutProtocolSustainability;\n\n  const networkBaseStake = networkStake.ActiveValidators * stakePerNode;\n  const networkTotalStake = parseInt(denominateValue(networkStatus.Balance));\n  const networkTopUpStake =\n    networkTotalStake -\n    networkStake.TotalValidators * stakePerNode -\n    networkStake.QueueSize * stakePerNode;\n  const topUpReward =\n    ((2 * topUpRewardsLimit) / Math.PI) *\n    Math.atan(\n      networkTopUpStake /\n        (2 *\n          parseInt(\n            denominateValue(networkConfig.TopUpRewardsGradientPoint.toFixed())\n          ))\n    );\n\n  const baseReward = rewardsPerEpochWithoutProtocolSustainability - topUpReward;\n  const validatorTotalStake = parseInt(denominateValue(activeStake));\n  const actualNumberOfNodes = Math.min(\n    Math.floor(validatorTotalStake / stakePerNode),\n    allActiveNodes\n  );\n  const validatorBaseStake = actualNumberOfNodes * stakePerNode;\n\n  const validatorTopUpStake =\n    ((validatorTotalStake - allNodes * stakePerNode) / allNodes) *\n    allActiveNodes;\n  const validatorTopUpReward =\n    networkTopUpStake > 0\n      ? (validatorTopUpStake / networkTopUpStake) * topUpReward\n      : 0;\n  const validatorBaseReward =\n    (validatorBaseStake / networkBaseStake) * baseReward;\n  const anualPercentageRate =\n    (epochsInYear * (validatorTopUpReward + validatorBaseReward)) /\n    validatorTotalStake;\n  const annuallPercentageRateTotal =\n    anualPercentageRate * 100 - anualPercentageRate * 100 * (serviceFee / 100);\n\n  return annuallPercentageRateTotal.toFixed(2).toString();\n};\n\nexport default calculateAnnualPercentage;\n"]},"metadata":{},"sourceType":"module"}