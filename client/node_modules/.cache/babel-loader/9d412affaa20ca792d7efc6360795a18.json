{"ast":null,"code":"import { dAppName } from 'config';\nimport withPageTitle from './components/PageTitle';\nimport Home from './pages/Home';\nimport Race from './pages/Race';\nimport RaceView from './pages/Race/View';\nimport Stable from 'pages/Stable';\nimport Tournament from 'pages/Tournament';\nexport const routeNames = {\n  home: '/',\n  transaction: '/transaction',\n  unlock: '/unlock',\n  ledger: '/ledger',\n  walletconnect: '/walletconnect',\n  race: '/race',\n  raceView: '/race/:id',\n  stable: '/stable',\n  tournament: '/tournament',\n  leaderboard: '/leaderboard'\n};\nconst routes = [{\n  path: routeNames.home,\n  title: 'Home',\n  component: Home\n}, {\n  path: routeNames.race,\n  title: 'Race',\n  component: Race\n}, {\n  path: routeNames.raceView,\n  title: 'Race View',\n  component: RaceView\n}, {\n  path: routeNames.stable,\n  title: 'Stable',\n  component: Stable\n}, {\n  path: routeNames.tournament,\n  title: 'Tournament',\n  component: Tournament\n}, {\n  path: routeNames.leaderboard,\n  title: 'Tournament',\n  component: Tournament\n}];\nconst mappedRoutes = routes.map(route => {\n  const title = route.title ? `${dAppName} • ${route.title}` : `Elrond ${dAppName}`;\n  const requiresAuth = Boolean(route.authenticatedRoute);\n  const wrappedComponent = withPageTitle(title, route.component);\n  return {\n    path: route.path,\n    component: wrappedComponent,\n    authenticatedRoute: requiresAuth\n  };\n});\nexport default mappedRoutes;","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/routes.ts"],"names":["dAppName","withPageTitle","Home","Race","RaceView","Stable","Tournament","routeNames","home","transaction","unlock","ledger","walletconnect","race","raceView","stable","tournament","leaderboard","routes","path","title","component","mappedRoutes","map","route","requiresAuth","Boolean","authenticatedRoute","wrappedComponent"],"mappings":"AACA,SAASA,QAAT,QAAyB,QAAzB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAUA,OAAO,MAAMC,UAAU,GAAG;AACxBC,EAAAA,IAAI,EAAE,GADkB;AAExBC,EAAAA,WAAW,EAAE,cAFW;AAGxBC,EAAAA,MAAM,EAAE,SAHgB;AAIxBC,EAAAA,MAAM,EAAE,SAJgB;AAKxBC,EAAAA,aAAa,EAAE,gBALS;AAMxBC,EAAAA,IAAI,EAAE,OANkB;AAOxBC,EAAAA,QAAQ,EAAE,WAPc;AAQxBC,EAAAA,MAAM,EAAE,SARgB;AASxBC,EAAAA,UAAU,EAAE,aATY;AAUxBC,EAAAA,WAAW,EAAE;AAVW,CAAnB;AAaP,MAAMC,MAAwB,GAAG,CAC/B;AACEC,EAAAA,IAAI,EAAEZ,UAAU,CAACC,IADnB;AAEEY,EAAAA,KAAK,EAAE,MAFT;AAGEC,EAAAA,SAAS,EAAEnB;AAHb,CAD+B,EAM/B;AACEiB,EAAAA,IAAI,EAAEZ,UAAU,CAACM,IADnB;AAEEO,EAAAA,KAAK,EAAE,MAFT;AAGEC,EAAAA,SAAS,EAAElB;AAHb,CAN+B,EAW/B;AACEgB,EAAAA,IAAI,EAAEZ,UAAU,CAACO,QADnB;AAEEM,EAAAA,KAAK,EAAE,WAFT;AAGEC,EAAAA,SAAS,EAAEjB;AAHb,CAX+B,EAgB/B;AACEe,EAAAA,IAAI,EAAEZ,UAAU,CAACQ,MADnB;AAEEK,EAAAA,KAAK,EAAE,QAFT;AAGEC,EAAAA,SAAS,EAAEhB;AAHb,CAhB+B,EAqB/B;AACEc,EAAAA,IAAI,EAAEZ,UAAU,CAACS,UADnB;AAEEI,EAAAA,KAAK,EAAE,YAFT;AAGEC,EAAAA,SAAS,EAAEf;AAHb,CArB+B,EA0B/B;AACEa,EAAAA,IAAI,EAAEZ,UAAU,CAACU,WADnB;AAEEG,EAAAA,KAAK,EAAE,YAFT;AAGEC,EAAAA,SAAS,EAAEf;AAHb,CA1B+B,CAAjC;AAiCA,MAAMgB,YAAY,GAAGJ,MAAM,CAACK,GAAP,CAAYC,KAAD,IAAW;AACzC,QAAMJ,KAAK,GAAGI,KAAK,CAACJ,KAAN,GACT,GAAEpB,QAAS,MAAKwB,KAAK,CAACJ,KAAM,EADnB,GAET,UAASpB,QAAS,EAFvB;AAIA,QAAMyB,YAAY,GAAGC,OAAO,CAACF,KAAK,CAACG,kBAAP,CAA5B;AACA,QAAMC,gBAAgB,GAAG3B,aAAa,CAACmB,KAAD,EAAQI,KAAK,CAACH,SAAd,CAAtC;AAEA,SAAO;AACLF,IAAAA,IAAI,EAAEK,KAAK,CAACL,IADP;AAELE,IAAAA,SAAS,EAAEO,gBAFN;AAGLD,IAAAA,kBAAkB,EAAEF;AAHf,GAAP;AAKD,CAboB,CAArB;AAeA,eAAeH,YAAf","sourcesContent":["import { ComponentType } from 'react';\nimport { dAppName } from 'config';\nimport withPageTitle from './components/PageTitle';\n\nimport Home from './pages/Home';\nimport Race from './pages/Race';\nimport RaceView from './pages/Race/View';\nimport Stable from 'pages/Stable';\nimport Tournament from 'pages/Tournament';\nimport Leaderboard from 'pages/Leaderboard';\n\nexport interface RouteType {\n  path: string;\n  title: string;\n  authenticatedRoute?: boolean;\n  component: ComponentType;\n}\n\nexport const routeNames = {\n  home: '/',\n  transaction: '/transaction',\n  unlock: '/unlock',\n  ledger: '/ledger',\n  walletconnect: '/walletconnect',\n  race: '/race',\n  raceView: '/race/:id',\n  stable: '/stable',\n  tournament: '/tournament',\n  leaderboard: '/leaderboard'\n};\n\nconst routes: Array<RouteType> = [\n  {\n    path: routeNames.home,\n    title: 'Home',\n    component: Home\n  },\n  {\n    path: routeNames.race,\n    title: 'Race',\n    component: Race\n  },\n  {\n    path: routeNames.raceView,\n    title: 'Race View',\n    component: RaceView\n  },\n  {\n    path: routeNames.stable,\n    title: 'Stable',\n    component: Stable\n  },\n  {\n    path: routeNames.tournament,\n    title: 'Tournament',\n    component: Tournament\n  },\n  {\n    path: routeNames.leaderboard,\n    title: 'Tournament',\n    component: Tournament\n  }\n];\n\nconst mappedRoutes = routes.map((route) => {\n  const title = route.title\n    ? `${dAppName} • ${route.title}`\n    : `Elrond ${dAppName}`;\n\n  const requiresAuth = Boolean(route.authenticatedRoute);\n  const wrappedComponent = withPageTitle(title, route.component);\n\n  return {\n    path: route.path,\n    component: wrappedComponent,\n    authenticatedRoute: requiresAuth\n  };\n});\n\nexport default mappedRoutes;\n"]},"metadata":{},"sourceType":"module"}