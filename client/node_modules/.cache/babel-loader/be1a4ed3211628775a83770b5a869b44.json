{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Stake/components/Delegate/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { Formik } from 'formik';\nimport { object } from 'yup';\nimport Action, { Submit } from 'components/Action';\nimport { delegateValidator } from 'components/Stake//helpers/delegationValidators';\nimport useStakeData from 'components/Stake/hooks';\nimport { network } from 'config';\nimport { denominated } from 'helpers/denominate';\nimport modifiable from 'helpers/modifiable';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Delegate = () => {\n  _s();\n\n  const {\n    account\n  } = useGetAccountInfo();\n  const {\n    onDelegate,\n    getStakingLimits\n  } = useStakeData();\n  const {\n    limit,\n    balance\n  } = getStakingLimits();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.wrapper,\n    children: /*#__PURE__*/_jsxDEV(Action, {\n      title: \"Delegate Now\",\n      description: `Select the amount of ${network.egldLabel} you want to delegate.`,\n      trigger: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.trigger,\n        children: \"Delegate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 18\n      }, this),\n      render: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.delegate,\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          validationSchema: object().shape({\n            amount: delegateValidator(balance, String(limit))\n          }),\n          onSubmit: onDelegate,\n          initialValues: {\n            amount: '0'\n          },\n          children: ({\n            errors,\n            values,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            setFieldValue\n          }) => {\n            const onMax = event => {\n              event.preventDefault();\n              setFieldValue('amount', limit);\n            };\n\n            return /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.field,\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"amount\",\n                  children: [network.egldLabel, \" Amount\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.group,\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    name: \"amount\",\n                    step: \"any\",\n                    required: true,\n                    autoComplete: \"off\",\n                    min: 0,\n                    className: modifiable('input', [errors.amount && touched.amount && 'invalid'], styles),\n                    value: values.amount,\n                    onBlur: handleBlur,\n                    onChange: handleChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 58,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                    href: \"/#\",\n                    onClick: onMax,\n                    className: styles.max,\n                    children: \"Max\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: styles.description,\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Balance:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 81,\n                    columnNumber: 25\n                  }, this), \" \", denominated(account.balance), ' ', network.egldLabel]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 23\n                }, this), errors.amount && touched.amount && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: styles.error,\n                  children: errors.amount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Submit, {\n                save: \"Continue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 19\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Delegate, \"SCz4TjVE0Quce7iZWiEZESHpGdM=\", false, function () {\n  return [useGetAccountInfo, useStakeData];\n});\n\n_c = Delegate;\nexport default Delegate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Delegate\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Stake/components/Delegate/index.tsx"],"names":["React","useGetAccountInfo","Formik","object","Action","Submit","delegateValidator","useStakeData","network","denominated","modifiable","styles","Delegate","account","onDelegate","getStakingLimits","limit","balance","wrapper","egldLabel","trigger","delegate","shape","amount","String","errors","values","touched","handleChange","handleBlur","handleSubmit","setFieldValue","onMax","event","preventDefault","field","group","max","description","error"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { Formik } from 'formik';\nimport { object } from 'yup';\n\nimport Action, { Submit } from 'components/Action';\nimport { delegateValidator } from 'components/Stake//helpers/delegationValidators';\nimport useStakeData from 'components/Stake/hooks';\nimport { network } from 'config';\n\nimport { denominated } from 'helpers/denominate';\nimport modifiable from 'helpers/modifiable';\n\nimport styles from './styles.module.scss';\n\nconst Delegate: React.FC = () => {\n  const { account } = useGetAccountInfo();\n  const { onDelegate, getStakingLimits } = useStakeData();\n  const { limit, balance } = getStakingLimits();\n\n  return (\n    <div className={styles.wrapper}>\n      <Action\n        title='Delegate Now'\n        description={`Select the amount of ${network.egldLabel} you want to delegate.`}\n        trigger={<div className={styles.trigger}>Delegate</div>}\n        render={\n          <div className={styles.delegate}>\n            <Formik\n              validationSchema={object().shape({\n                amount: delegateValidator(balance, String(limit))\n              })}\n              onSubmit={onDelegate}\n              initialValues={{\n                amount: '0'\n              }}\n            >\n              {({\n                errors,\n                values,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                setFieldValue\n              }) => {\n                const onMax = (event: any): void => {\n                  event.preventDefault();\n                  setFieldValue('amount', limit);\n                };\n\n                return (\n                  <form onSubmit={handleSubmit}>\n                    <div className={styles.field}>\n                      <label htmlFor='amount'>{network.egldLabel} Amount</label>\n                      <div className={styles.group}>\n                        <input\n                          type='number'\n                          name='amount'\n                          step='any'\n                          required={true}\n                          autoComplete='off'\n                          min={0}\n                          className={modifiable(\n                            'input',\n                            [errors.amount && touched.amount && 'invalid'],\n                            styles\n                          )}\n                          value={values.amount}\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                        />\n\n                        <a href='/#' onClick={onMax} className={styles.max}>\n                          Max\n                        </a>\n                      </div>\n\n                      <span className={styles.description}>\n                        <span>Balance:</span> {denominated(account.balance)}{' '}\n                        {network.egldLabel}\n                      </span>\n\n                      {errors.amount && touched.amount && (\n                        <span className={styles.error}>{errors.amount}</span>\n                      )}\n                    </div>\n\n                    <Submit save='Continue' />\n                  </form>\n                );\n              }}\n            </Formik>\n          </div>\n        }\n      />\n    </div>\n  );\n};\n\nexport default Delegate;\n"]},"metadata":{},"sourceType":"module"}