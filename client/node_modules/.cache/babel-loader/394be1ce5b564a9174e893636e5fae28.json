{"ast":null,"code":"var _inherits = require(\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _toConsumableArray = require(\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\n(function (generator) {\n  if (typeof window === 'object') {\n    var _exports = {};\n\n    if (typeof module !== 'undefined' && module.exports) {\n      module.exports = generator(_exports, false);\n    } else {\n      window.bls = generator(_exports, false);\n    }\n  } else {\n    generator(exports, true);\n  }\n})(function (exports, isNodeJs) {\n  /* eslint-disable */\n  exports.BN254 = 0;\n  exports.BN381_1 = 1;\n  exports.BLS12_381 = 5;\n  exports.ethMode = false;\n  exports.ETH_MODE_DRAFT_05 = 1;\n  exports.ETH_MODE_DRAFT_06 = 2;\n  exports.ETH_MODE_DRAFT_07 = 3;\n\n  var setup = function setup(exports, curveType) {\n    var mod = exports.mod;\n    var MCLBN_FP_UNIT_SIZE = 6;\n    var MCLBN_FR_UNIT_SIZE = exports.ethMode ? 4 : 6;\n    var BLS_COMPILER_TIME_VAR_ADJ = exports.ethMode ? 200 : 0;\n    var MCLBN_COMPILED_TIME_VAR = MCLBN_FR_UNIT_SIZE * 10 + MCLBN_FP_UNIT_SIZE + BLS_COMPILER_TIME_VAR_ADJ;\n    var BLS_ID_SIZE = MCLBN_FR_UNIT_SIZE * 8;\n    var BLS_SECRETKEY_SIZE = MCLBN_FP_UNIT_SIZE * 8;\n    var BLS_PUBLICKEY_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 1 : 2);\n    var BLS_SIGNATURE_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 2 : 1);\n\n    var _malloc = function _malloc(size) {\n      return mod._blsMalloc(size);\n    };\n\n    var _free = function _free(pos) {\n      mod._blsFree(pos);\n    };\n\n    var ptrToAsciiStr = function ptrToAsciiStr(pos, n) {\n      var s = '';\n\n      for (var i = 0; i < n; i++) {\n        s += String.fromCharCode(mod.HEAP8[pos + i]);\n      }\n\n      return s;\n    };\n\n    var asciiStrToPtr = function asciiStrToPtr(pos, s) {\n      for (var i = 0; i < s.length; i++) {\n        mod.HEAP8[pos + i] = s.charCodeAt(i);\n      }\n    };\n\n    exports.toHex = function (a, start, n) {\n      var s = '';\n\n      for (var i = 0; i < n; i++) {\n        s += ('0' + a[start + i].toString(16)).slice(-2);\n      }\n\n      return s;\n    }; // Uint8Array to hex string\n\n\n    exports.toHexStr = function (a) {\n      return exports.toHex(a, 0, a.length);\n    }; // hex string to Uint8Array\n\n\n    exports.fromHexStr = function (s) {\n      if (s.length & 1) throw new Error('fromHexStr:length must be even ' + s.length);\n      var n = s.length / 2;\n      var a = new Uint8Array(n);\n\n      for (var i = 0; i < n; i++) {\n        a[i] = parseInt(s.slice(i * 2, i * 2 + 2), 16);\n      }\n\n      return a;\n    }; ///////////////////////////\n\n\n    var copyToUint32Array = function copyToUint32Array(a, pos) {\n      a.set(mod.HEAP32.subarray(pos / 4, pos / 4 + a.length)); //    for (let i = 0; i < a.length; i++) {\n      //      a[i] = mod.HEAP32[pos / 4 + i]\n      //    }\n    };\n\n    var copyFromUint32Array = function copyFromUint32Array(pos, a) {\n      mod.HEAP32.set(a, pos / 4); //    for (let i = 0; i < a.length; i++) {\n      //      mod.HEAP32[pos / 4 + i] = a[i]\n      //    }\n    }; //////////////////////////////////\n\n\n    var _wrapGetStr = function _wrapGetStr(func) {\n      var returnAsStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return function (x) {\n        var ioMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var maxBufSize = 3096;\n\n        var pos = _malloc(maxBufSize);\n\n        var n = func(pos, maxBufSize, x, ioMode);\n\n        if (n <= 0) {\n          throw new Error('err gen_str:' + x);\n        }\n\n        var s = null;\n\n        if (returnAsStr) {\n          s = ptrToAsciiStr(pos, n);\n        } else {\n          s = new Uint8Array(mod.HEAP8.subarray(pos, pos + n));\n        }\n\n        _free(pos);\n\n        return s;\n      };\n    };\n\n    var _wrapSerialize = function _wrapSerialize(func) {\n      return _wrapGetStr(func, false);\n    };\n\n    var _wrapDeserialize = function _wrapDeserialize(func) {\n      return function (x, buf) {\n        var pos = _malloc(buf.length);\n\n        mod.HEAP8.set(buf, pos);\n        var r = func(x, pos, buf.length);\n\n        _free(pos);\n\n        if (r === 0) throw new Error('err _wrapDeserialize', buf);\n      };\n    };\n    /*\n      argNum : n\n      func(x0, ..., x_(n-1), buf, ioMode)\n      => func(x0, ..., x_(n-1), pos, buf.length, ioMode)\n    */\n\n\n    var _wrapInput = function _wrapInput(func, argNum) {\n      var returnValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return function () {\n        var args = Array.prototype.slice.call(arguments);\n        var buf = args[argNum];\n        var typeStr = Object.prototype.toString.apply(buf);\n\n        if (['[object String]', '[object Uint8Array]', '[object Array]'].indexOf(typeStr) < 0) {\n          throw new Error(\"err bad type:\\\"\".concat(typeStr, \"\\\". Use String or Uint8Array.\"));\n        }\n\n        var ioMode = args[argNum + 1]; // may undefined\n\n        var pos = _malloc(buf.length);\n\n        if (typeStr === '[object String]') {\n          asciiStrToPtr(pos, buf);\n        } else {\n          mod.HEAP8.set(buf, pos);\n        }\n\n        var r = func.apply(void 0, _toConsumableArray(args.slice(0, argNum)).concat([pos, buf.length, ioMode]));\n\n        _free(pos);\n\n        if (returnValue) return r;\n        if (r) throw new Error('err _wrapInput ' + buf);\n      };\n    };\n\n    var callSetter = function callSetter(func, a, p1, p2) {\n      var pos = _malloc(a.length * 4);\n\n      func(pos, p1, p2); // p1, p2 may be undefined\n\n      copyToUint32Array(a, pos);\n\n      _free(pos);\n    };\n\n    var callGetter = function callGetter(func, a, p1, p2) {\n      var pos = _malloc(a.length * 4);\n\n      mod.HEAP32.set(a, pos / 4);\n      var s = func(pos, p1, p2);\n\n      _free(pos);\n\n      return s;\n    };\n\n    var callShare = function callShare(func, a, size, vec, id) {\n      var pos = a._allocAndCopy();\n\n      var idPos = id._allocAndCopy();\n\n      var vecPos = _malloc(size * vec.length);\n\n      for (var i = 0; i < vec.length; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_);\n      }\n\n      func(pos, vecPos, vec.length, idPos);\n\n      _free(vecPos);\n\n      _free(idPos);\n\n      a._saveAndFree(pos);\n    };\n\n    var callRecover = function callRecover(func, a, size, vec, idVec) {\n      var n = vec.length;\n      if (n != idVec.length) throw 'recover:bad length';\n\n      var secPos = a._alloc();\n\n      var vecPos = _malloc(size * n);\n\n      var idVecPos = _malloc(BLS_ID_SIZE * n);\n\n      for (var i = 0; i < n; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_);\n        copyFromUint32Array(idVecPos + BLS_ID_SIZE * i, idVec[i].a_);\n      }\n\n      var r = func(secPos, vecPos, idVecPos, n);\n\n      _free(idVecPos);\n\n      _free(vecPos);\n\n      a._saveAndFree(secPos);\n\n      if (r) throw 'callRecover';\n    }; // change curveType\n\n\n    exports.blsInit = function () {\n      var curveType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exports.ethMode ? exports.BLS12_381 : exports.BN254;\n\n      var r = mod._blsInit(curveType, MCLBN_COMPILED_TIME_VAR);\n\n      if (r) throw 'blsInit err ' + r;\n    };\n\n    exports.getCurveOrder = _wrapGetStr(mod._blsGetCurveOrder);\n    exports.getFieldOrder = _wrapGetStr(mod._blsGetFieldOrder);\n    exports.blsIdSetDecStr = _wrapInput(mod._blsIdSetDecStr, 1);\n    exports.blsIdSetHexStr = _wrapInput(mod._blsIdSetHexStr, 1);\n    exports.blsIdGetDecStr = _wrapGetStr(mod._blsIdGetDecStr);\n    exports.blsIdGetHexStr = _wrapGetStr(mod._blsIdGetHexStr);\n    exports.blsIdSerialize = _wrapSerialize(mod._blsIdSerialize);\n    exports.blsSecretKeySerialize = _wrapSerialize(mod._blsSecretKeySerialize);\n    exports.blsPublicKeySerialize = _wrapSerialize(mod._blsPublicKeySerialize);\n    exports.blsSignatureSerialize = _wrapSerialize(mod._blsSignatureSerialize);\n    exports.blsIdDeserialize = _wrapDeserialize(mod._blsIdDeserialize);\n    exports.blsSecretKeyDeserialize = _wrapDeserialize(mod._blsSecretKeyDeserialize);\n    exports.blsPublicKeyDeserialize = _wrapDeserialize(mod._blsPublicKeyDeserialize);\n    exports.blsSignatureDeserialize = _wrapDeserialize(mod._blsSignatureDeserialize);\n    exports.blsPublicKeySerializeUncompressed = _wrapSerialize(mod._blsPublicKeySerializeUncompressed);\n    exports.blsSignatureSerializeUncompressed = _wrapSerialize(mod._blsSignatureSerializeUncompressed);\n    exports.blsPublicKeyDeserializeUncompressed = _wrapDeserialize(mod._blsPublicKeyDeserializeUncompressed);\n    exports.blsSignatureDeserializeUncompressed = _wrapDeserialize(mod._blsSignatureDeserializeUncompressed);\n    exports.blsSecretKeySetLittleEndian = _wrapInput(mod._blsSecretKeySetLittleEndian, 1);\n    exports.blsSecretKeySetLittleEndianMod = _wrapInput(mod._blsSecretKeySetLittleEndianMod, 1);\n    exports.blsHashToSecretKey = _wrapInput(mod._blsHashToSecretKey, 1);\n    exports.blsSign = _wrapInput(mod._blsSign, 2);\n    exports.blsVerify = _wrapInput(mod._blsVerify, 2, true);\n\n    var Common = /*#__PURE__*/function () {\n      \"use strict\";\n\n      function Common(size) {\n        _classCallCheck(this, Common);\n\n        this.a_ = new Uint32Array(size / 4);\n      }\n\n      _createClass(Common, [{\n        key: \"deserializeHexStr\",\n        value: function deserializeHexStr(s) {\n          this.deserialize(exports.fromHexStr(s));\n        }\n      }, {\n        key: \"serializeToHexStr\",\n        value: function serializeToHexStr() {\n          return exports.toHexStr(this.serialize());\n        }\n      }, {\n        key: \"dump\",\n        value: function dump() {\n          var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          console.log(msg + this.serializeToHexStr());\n        }\n      }, {\n        key: \"clear\",\n        value: function clear() {\n          this.a_.fill(0);\n        } // alloc new array\n\n      }, {\n        key: \"_alloc\",\n        value: function _alloc() {\n          return _malloc(this.a_.length * 4);\n        } // alloc and copy a_ to mod.HEAP32[pos / 4]\n\n      }, {\n        key: \"_allocAndCopy\",\n        value: function _allocAndCopy() {\n          var pos = this._alloc();\n\n          mod.HEAP32.set(this.a_, pos / 4);\n          return pos;\n        } // save pos to a_\n\n      }, {\n        key: \"_save\",\n        value: function _save(pos) {\n          this.a_.set(mod.HEAP32.subarray(pos / 4, pos / 4 + this.a_.length));\n        } // save and free\n\n      }, {\n        key: \"_saveAndFree\",\n        value: function _saveAndFree(pos) {\n          this._save(pos);\n\n          _free(pos);\n        } // set parameter (p1, p2 may be undefined)\n\n      }, {\n        key: \"_setter\",\n        value: function _setter(func, p1, p2) {\n          var pos = this._alloc();\n\n          var r = func(pos, p1, p2);\n\n          this._saveAndFree(pos);\n\n          if (r) throw new Error('_setter err');\n        } // getter (p1, p2 may be undefined)\n\n      }, {\n        key: \"_getter\",\n        value: function _getter(func, p1, p2) {\n          var pos = this._allocAndCopy();\n\n          var s = func(pos, p1, p2);\n\n          _free(pos);\n\n          return s;\n        }\n      }, {\n        key: \"_isEqual\",\n        value: function _isEqual(func, rhs) {\n          var xPos = this._allocAndCopy();\n\n          var yPos = rhs._allocAndCopy();\n\n          var r = func(xPos, yPos);\n\n          _free(yPos);\n\n          _free(xPos);\n\n          return r === 1;\n        } // func(y, this) and return y\n\n      }, {\n        key: \"_op1\",\n        value: function _op1(func) {\n          var y = new this.constructor();\n\n          var xPos = this._allocAndCopy();\n\n          var yPos = y._alloc();\n\n          func(yPos, xPos);\n\n          y._saveAndFree(yPos);\n\n          _free(xPos);\n\n          return y;\n        } // func(z, this, y) and return z\n\n      }, {\n        key: \"_op2\",\n        value: function _op2(func, y) {\n          var Cstr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          var z = Cstr ? new Cstr() : new this.constructor();\n\n          var xPos = this._allocAndCopy();\n\n          var yPos = y._allocAndCopy();\n\n          var zPos = z._alloc();\n\n          func(zPos, xPos, yPos);\n\n          z._saveAndFree(zPos);\n\n          _free(yPos);\n\n          _free(xPos);\n\n          return z;\n        } // func(self, y)\n\n      }, {\n        key: \"_update\",\n        value: function _update(func, y) {\n          var xPos = this._allocAndCopy();\n\n          var yPos = y._allocAndCopy();\n\n          func(xPos, yPos);\n\n          _free(yPos);\n\n          this._saveAndFree(xPos);\n        }\n      }]);\n\n      return Common;\n    }();\n\n    exports.Id = /*#__PURE__*/function (_Common) {\n      \"use strict\";\n\n      _inherits(_class, _Common);\n\n      var _super = _createSuper(_class);\n\n      function _class() {\n        _classCallCheck(this, _class);\n\n        return _super.call(this, BLS_ID_SIZE);\n      }\n\n      _createClass(_class, [{\n        key: \"setInt\",\n        value: function setInt(x) {\n          this._setter(mod._blsIdSetInt, x);\n        }\n      }, {\n        key: \"isEqual\",\n        value: function isEqual(rhs) {\n          return this._isEqual(mod._blsIdIsEqual, rhs);\n        }\n      }, {\n        key: \"deserialize\",\n        value: function deserialize(s) {\n          this._setter(exports.blsIdDeserialize, s);\n        }\n      }, {\n        key: \"serialize\",\n        value: function serialize() {\n          return this._getter(exports.blsIdSerialize);\n        }\n      }, {\n        key: \"setStr\",\n        value: function setStr(s) {\n          var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n\n          switch (base) {\n            case 10:\n              this._setter(exports.blsIdSetDecStr, s);\n\n              return;\n\n            case 16:\n              this._setter(exports.blsIdSetHexStr, s);\n\n              return;\n\n            default:\n              throw 'BlsId.setStr:bad base:' + base;\n          }\n        }\n      }, {\n        key: \"getStr\",\n        value: function getStr() {\n          var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n          switch (base) {\n            case 10:\n              return this._getter(exports.blsIdGetDecStr);\n\n            case 16:\n              return this._getter(exports.blsIdGetHexStr);\n\n            default:\n              throw 'BlsId.getStr:bad base:' + base;\n          }\n        }\n      }, {\n        key: \"setLittleEndian\",\n        value: function setLittleEndian(s) {\n          this._setter(exports.blsSecretKeySetLittleEndian, s);\n        }\n      }, {\n        key: \"setLittleEndianMod\",\n        value: function setLittleEndianMod(s) {\n          this._setter(exports.blsSecretKeySetLittleEndianMod, s);\n        }\n      }, {\n        key: \"setByCSPRNG\",\n        value: function setByCSPRNG() {\n          var a = new Uint8Array(BLS_ID_SIZE);\n          exports.getRandomValues(a);\n          this.setLittleEndian(a);\n        }\n      }]);\n\n      return _class;\n    }(Common);\n\n    exports.deserializeHexStrToId = function (s) {\n      var r = new exports.Id();\n      r.deserializeHexStr(s);\n      return r;\n    };\n\n    exports.SecretKey = /*#__PURE__*/function (_Common2) {\n      \"use strict\";\n\n      _inherits(_class2, _Common2);\n\n      var _super2 = _createSuper(_class2);\n\n      function _class2() {\n        _classCallCheck(this, _class2);\n\n        return _super2.call(this, BLS_SECRETKEY_SIZE);\n      }\n\n      _createClass(_class2, [{\n        key: \"setInt\",\n        value: function setInt(x) {\n          this._setter(mod._blsIdSetInt, x); // same as Id\n\n        }\n      }, {\n        key: \"isZero\",\n        value: function isZero() {\n          return this._getter(mod._blsSecretKeyIsZero) === 1;\n        }\n      }, {\n        key: \"isEqual\",\n        value: function isEqual(rhs) {\n          return this._isEqual(mod._blsSecretKeyIsEqual, rhs);\n        }\n      }, {\n        key: \"deserialize\",\n        value: function deserialize(s) {\n          this._setter(exports.blsSecretKeyDeserialize, s);\n        }\n      }, {\n        key: \"serialize\",\n        value: function serialize() {\n          return this._getter(exports.blsSecretKeySerialize);\n        }\n      }, {\n        key: \"add\",\n        value: function add(rhs) {\n          this._update(mod._blsSecretKeyAdd, rhs);\n        }\n      }, {\n        key: \"share\",\n        value: function share(msk, id) {\n          callShare(mod._blsSecretKeyShare, this, BLS_SECRETKEY_SIZE, msk, id);\n        }\n      }, {\n        key: \"recover\",\n        value: function recover(secVec, idVec) {\n          callRecover(mod._blsSecretKeyRecover, this, BLS_SECRETKEY_SIZE, secVec, idVec);\n        }\n      }, {\n        key: \"setHashOf\",\n        value: function setHashOf(s) {\n          this._setter(exports.blsHashToSecretKey, s);\n        }\n      }, {\n        key: \"setLittleEndian\",\n        value: function setLittleEndian(s) {\n          this._setter(exports.blsSecretKeySetLittleEndian, s);\n        }\n      }, {\n        key: \"setLittleEndianMod\",\n        value: function setLittleEndianMod(s) {\n          this._setter(exports.blsSecretKeySetLittleEndianMod, s);\n        }\n      }, {\n        key: \"setByCSPRNG\",\n        value: function setByCSPRNG() {\n          var a = new Uint8Array(BLS_SECRETKEY_SIZE);\n          exports.getRandomValues(a);\n          this.setLittleEndian(a);\n        }\n      }, {\n        key: \"getPublicKey\",\n        value: function getPublicKey() {\n          var pub = new exports.PublicKey();\n\n          var secPos = this._allocAndCopy();\n\n          var pubPos = pub._alloc();\n\n          mod._blsGetPublicKey(pubPos, secPos);\n\n          pub._saveAndFree(pubPos);\n\n          _free(secPos);\n\n          return pub;\n        }\n        /*\n          input\n          m : message (string or Uint8Array)\n          return\n          BlsSignature\n        */\n\n      }, {\n        key: \"sign\",\n        value: function sign(m) {\n          var sig = new exports.Signature();\n\n          var secPos = this._allocAndCopy();\n\n          var sigPos = sig._alloc();\n\n          exports.blsSign(sigPos, secPos, m);\n\n          sig._saveAndFree(sigPos);\n\n          _free(secPos);\n\n          return sig;\n        }\n      }]);\n\n      return _class2;\n    }(Common);\n\n    exports.deserializeHexStrToSecretKey = function (s) {\n      var r = new exports.SecretKey();\n      r.deserializeHexStr(s);\n      return r;\n    };\n\n    exports.PublicKey = /*#__PURE__*/function (_Common3) {\n      \"use strict\";\n\n      _inherits(_class3, _Common3);\n\n      var _super3 = _createSuper(_class3);\n\n      function _class3() {\n        _classCallCheck(this, _class3);\n\n        return _super3.call(this, BLS_PUBLICKEY_SIZE);\n      }\n\n      _createClass(_class3, [{\n        key: \"isZero\",\n        value: function isZero() {\n          return this._getter(mod._blsPublicKeyIsZero) === 1;\n        }\n      }, {\n        key: \"isEqual\",\n        value: function isEqual(rhs) {\n          return this._isEqual(mod._blsPublicKeyIsEqual, rhs);\n        }\n      }, {\n        key: \"deserialize\",\n        value: function deserialize(s) {\n          this._setter(exports.blsPublicKeyDeserialize, s);\n        }\n      }, {\n        key: \"serialize\",\n        value: function serialize() {\n          return this._getter(exports.blsPublicKeySerialize);\n        }\n      }, {\n        key: \"deserializeUncompressed\",\n        value: function deserializeUncompressed(s) {\n          this._setter(exports.blsPublicKeyDeserializeUncompressed, s);\n        }\n      }, {\n        key: \"serializeUncompressed\",\n        value: function serializeUncompressed() {\n          return this._getter(exports.blsPublicKeySerializeUncompressed);\n        }\n      }, {\n        key: \"add\",\n        value: function add(rhs) {\n          this._update(mod._blsPublicKeyAdd, rhs);\n        }\n      }, {\n        key: \"share\",\n        value: function share(msk, id) {\n          callShare(mod._blsPublicKeyShare, this, BLS_PUBLICKEY_SIZE, msk, id);\n        }\n      }, {\n        key: \"recover\",\n        value: function recover(secVec, idVec) {\n          callRecover(mod._blsPublicKeyRecover, this, BLS_PUBLICKEY_SIZE, secVec, idVec);\n        }\n      }, {\n        key: \"isValidOrder\",\n        value: function isValidOrder() {\n          return this._getter(mod._blsPublicKeyIsValidOrder);\n        }\n      }, {\n        key: \"verify\",\n        value: function verify(sig, m) {\n          var pubPos = this._allocAndCopy();\n\n          var sigPos = sig._allocAndCopy();\n\n          var r = exports.blsVerify(sigPos, pubPos, m);\n\n          _free(sigPos);\n\n          _free(pubPos);\n\n          return r != 0;\n        }\n      }]);\n\n      return _class3;\n    }(Common);\n\n    exports.deserializeHexStrToPublicKey = function (s) {\n      var r = new exports.PublicKey();\n      r.deserializeHexStr(s);\n      return r;\n    };\n\n    exports.Signature = /*#__PURE__*/function (_Common4) {\n      \"use strict\";\n\n      _inherits(_class4, _Common4);\n\n      var _super4 = _createSuper(_class4);\n\n      function _class4() {\n        _classCallCheck(this, _class4);\n\n        return _super4.call(this, BLS_SIGNATURE_SIZE);\n      }\n\n      _createClass(_class4, [{\n        key: \"isZero\",\n        value: function isZero() {\n          return this._getter(mod._blsSignatureIsZero) === 1;\n        }\n      }, {\n        key: \"isEqual\",\n        value: function isEqual(rhs) {\n          return this._isEqual(mod._blsSignatureIsEqual, rhs);\n        }\n      }, {\n        key: \"deserialize\",\n        value: function deserialize(s) {\n          this._setter(exports.blsSignatureDeserialize, s);\n        }\n      }, {\n        key: \"serialize\",\n        value: function serialize() {\n          return this._getter(exports.blsSignatureSerialize);\n        }\n      }, {\n        key: \"deserializeUncompressed\",\n        value: function deserializeUncompressed(s) {\n          this._setter(exports.blsSignatureDeserializeUncompressed, s);\n        }\n      }, {\n        key: \"serializeUncompressed\",\n        value: function serializeUncompressed() {\n          return this._getter(exports.blsSignatureSerializeUncompressed);\n        }\n      }, {\n        key: \"add\",\n        value: function add(rhs) {\n          this._update(mod._blsSignatureAdd, rhs);\n        }\n      }, {\n        key: \"recover\",\n        value: function recover(secVec, idVec) {\n          callRecover(mod._blsSignatureRecover, this, BLS_SIGNATURE_SIZE, secVec, idVec);\n        }\n      }, {\n        key: \"isValidOrder\",\n        value: function isValidOrder() {\n          return this._getter(mod._blsSignatureIsValidOrder);\n        } // this = aggSig\n\n      }, {\n        key: \"aggregate\",\n        value: function aggregate(sigVec) {\n          var n = sigVec.length;\n\n          var aggSigPos = this._allocAndCopy();\n\n          var sigVecPos = _malloc(BLS_SIGNATURE_SIZE * n);\n\n          for (var i = 0; i < n; i++) {\n            mod.HEAP32.set(sigVec[i].a_, (sigVecPos + BLS_SIGNATURE_SIZE * i) / 4);\n          }\n\n          var r = mod._blsAggregateSignature(aggSigPos, sigVecPos, n);\n\n          _free(sigVecPos);\n\n          this._saveAndFree(aggSigPos);\n\n          return r == 1;\n        } // this = aggSig\n\n      }, {\n        key: \"fastAggregateVerify\",\n        value: function fastAggregateVerify(pubVec, msg) {\n          var n = pubVec.length;\n          var msgSize = msg.length;\n\n          var aggSigPos = this._allocAndCopy();\n\n          var pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n\n          var msgPos = _malloc(msgSize);\n\n          for (var i = 0; i < n; i++) {\n            mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4);\n          }\n\n          mod.HEAP8.set(msg, msgPos);\n\n          var r = mod._blsFastAggregateVerify(aggSigPos, pubVecPos, n, msgPos, msgSize);\n\n          _free(msgPos);\n\n          _free(pubVecPos);\n\n          _free(aggSigPos);\n\n          return r == 1;\n        } // this = aggSig\n        // msgVec = (32 * pubVec.length)-size Uint8Array\n\n      }, {\n        key: \"aggregateVerifyNoCheck\",\n        value: function aggregateVerifyNoCheck(pubVec, msgVec) {\n          var n = pubVec.length;\n          var msgSize = 32;\n\n          if (n == 0 || msgVec.length != msgSize * n) {\n            return false;\n          }\n\n          var aggSigPos = this._allocAndCopy();\n\n          var pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n\n          var msgPos = _malloc(msgVec.length);\n\n          for (var i = 0; i < n; i++) {\n            mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4);\n          }\n\n          mod.HEAP8.set(msgVec, msgPos);\n\n          var r = mod._blsAggregateVerifyNoCheck(aggSigPos, pubVecPos, msgPos, msgSize, n);\n\n          _free(msgPos);\n\n          _free(pubVecPos);\n\n          _free(aggSigPos);\n\n          return r == 1;\n        }\n      }]);\n\n      return _class4;\n    }(Common);\n\n    exports.deserializeHexStrToSignature = function (s) {\n      var r = new exports.Signature();\n      r.deserializeHexStr(s);\n      return r;\n    }; // 1 (draft-05) 2 (draft-06) 3 (draft-07)\n\n\n    exports.setETHmode = function (mode) {\n      if (mod._blsSetETHmode(mode) != 0) throw new Error(\"bad setETHmode \".concat(mode));\n    }; // make setter check the correctness of the order if doVerify\n\n\n    exports.verifySignatureOrder = function (doVerify) {\n      mod._blsSignatureVerifyOrder(doVerify);\n    }; // make setter check the correctness of the order if doVerify\n\n\n    exports.verifyPublicKeyOrder = function (doVerify) {\n      mod._blsPublicKeyVerifyOrder(doVerify);\n    };\n\n    exports.areAllMsgDifferent = function (msgs, msgSize) {\n      var n = msgs.length / msgSize;\n      if (msgs.length != n * msgSize) return false;\n      h = {};\n\n      for (var i = 0; i < n; i++) {\n        var m = msgs.subarray(i * msgSize, (i + 1) * msgSize);\n        if (m in h) return false;\n        h[m] = true;\n      }\n\n      return true;\n    };\n    /*\n      return true if all pub[i].verify(sigs[i], msgs[i])\n      msgs is array of 32-byte Uint8Array\n    */\n\n\n    exports.multiVerify = function (pubs, sigs, msgs) {\n      var MSG_SIZE = 32;\n      var RAND_SIZE = 8; // 64-bit rand\n\n      var threadNum = 0; // not used\n\n      var n = sigs.length;\n      if (pubs.length != n || msgs.length != n) return false;\n\n      for (var i = 0; i < n; i++) {\n        if (msgs[i].length != MSG_SIZE) return false;\n      }\n\n      var sigPos = _malloc(BLS_SIGNATURE_SIZE * n);\n\n      var pubPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n\n      var msgPos = _malloc(MSG_SIZE * n);\n\n      var randPos = _malloc(RAND_SIZE * n);\n\n      exports.getRandomValues(mod.HEAP8.subarray(randPos, randPos + RAND_SIZE * n));\n\n      for (var _i = 0; _i < n; _i++) {\n        mod.HEAP32.set(sigs[_i].a_, (sigPos + BLS_SIGNATURE_SIZE * _i) / 4);\n        mod.HEAP32.set(pubs[_i].a_, (pubPos + BLS_PUBLICKEY_SIZE * _i) / 4);\n        mod.HEAP8.set(msgs[_i], msgPos + MSG_SIZE * _i);\n      }\n\n      var r = mod._blsMultiVerify(sigPos, pubPos, msgPos, MSG_SIZE, randPos, RAND_SIZE, n, threadNum);\n\n      _free(randPos);\n\n      _free(msgPos);\n\n      _free(pubPos);\n\n      _free(sigPos);\n\n      return r == 1;\n    };\n\n    exports.blsInit(curveType);\n\n    if (exports.ethMode) {\n      exports.setETHmode(exports.ETH_MODE_DRAFT_07);\n    }\n  }; // setup()\n\n\n  var _cryptoGetRandomValues = function _cryptoGetRandomValues(p, n) {\n    var a = new Uint8Array(n);\n    exports.getRandomValues(a);\n\n    for (var i = 0; i < n; i++) {\n      exports.mod.HEAP8[p + i] = a[i];\n    }\n  }; // f(a:array) fills a with random value\n\n\n  exports.setRandFunc = function (f) {\n    exports.getRandomValues = f;\n  };\n\n  exports.init = function () {\n    var curveType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exports.BN254;\n    exports.curveType = curveType;\n    var name = 'bls_c';\n    return new Promise(function (resolve) {\n      if (isNodeJs) {\n        var crypto = require('crypto');\n\n        exports.getRandomValues = crypto.randomFillSync;\n\n        var path = require('path');\n\n        var js = require(\"./\".concat(name, \".js\"));\n\n        var _Module = {\n          cryptoGetRandomValues: _cryptoGetRandomValues,\n          locateFile: function locateFile(baseName) {\n            return path.join(__dirname, baseName);\n          }\n        };\n        js(_Module).then(function (_mod) {\n          exports.mod = _mod;\n          setup(exports, curveType);\n          resolve();\n        });\n      } else {\n        var _crypto = window.crypto || window.msCrypto;\n\n        exports.getRandomValues = function (x) {\n          return _crypto.getRandomValues(x);\n        };\n\n        fetch(\"./\".concat(name, \".wasm\")) // eslint-disable-line\n        .then(function (response) {\n          return response.arrayBuffer();\n        }).then(function (buffer) {\n          return new Uint8Array(buffer);\n        }).then(function () {\n          if (typeof module !== 'undefined' && module.exports) {\n            exports.mod = require('./bls_c')();\n          } else {\n            exports.mod = Module(); // eslint-disable-line\n          }\n\n          exports.mod.cryptoGetRandomValues = _cryptoGetRandomValues;\n\n          exports.mod.onRuntimeInitialized = function () {\n            setup(exports, curveType);\n            resolve();\n          };\n        });\n      }\n    });\n  };\n\n  return exports;\n});","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/@elrondnetwork/bls-wasm/bls.js"],"names":["generator","window","exports","module","bls","isNodeJs","BN254","BN381_1","BLS12_381","ethMode","ETH_MODE_DRAFT_05","ETH_MODE_DRAFT_06","ETH_MODE_DRAFT_07","setup","curveType","mod","MCLBN_FP_UNIT_SIZE","MCLBN_FR_UNIT_SIZE","BLS_COMPILER_TIME_VAR_ADJ","MCLBN_COMPILED_TIME_VAR","BLS_ID_SIZE","BLS_SECRETKEY_SIZE","BLS_PUBLICKEY_SIZE","BLS_SIGNATURE_SIZE","_malloc","size","_blsMalloc","_free","pos","_blsFree","ptrToAsciiStr","n","s","i","String","fromCharCode","HEAP8","asciiStrToPtr","length","charCodeAt","toHex","a","start","toString","slice","toHexStr","fromHexStr","Error","Uint8Array","parseInt","copyToUint32Array","set","HEAP32","subarray","copyFromUint32Array","_wrapGetStr","func","returnAsStr","x","ioMode","maxBufSize","_wrapSerialize","_wrapDeserialize","buf","r","_wrapInput","argNum","returnValue","args","arguments","typeStr","Object","prototype","apply","indexOf","callSetter","p1","p2","callGetter","callShare","vec","id","_allocAndCopy","idPos","vecPos","a_","_saveAndFree","callRecover","idVec","secPos","_alloc","idVecPos","blsInit","_blsInit","getCurveOrder","_blsGetCurveOrder","getFieldOrder","_blsGetFieldOrder","blsIdSetDecStr","_blsIdSetDecStr","blsIdSetHexStr","_blsIdSetHexStr","blsIdGetDecStr","_blsIdGetDecStr","blsIdGetHexStr","_blsIdGetHexStr","blsIdSerialize","_blsIdSerialize","blsSecretKeySerialize","_blsSecretKeySerialize","blsPublicKeySerialize","_blsPublicKeySerialize","blsSignatureSerialize","_blsSignatureSerialize","blsIdDeserialize","_blsIdDeserialize","blsSecretKeyDeserialize","_blsSecretKeyDeserialize","blsPublicKeyDeserialize","_blsPublicKeyDeserialize","blsSignatureDeserialize","_blsSignatureDeserialize","blsPublicKeySerializeUncompressed","_blsPublicKeySerializeUncompressed","blsSignatureSerializeUncompressed","_blsSignatureSerializeUncompressed","blsPublicKeyDeserializeUncompressed","_blsPublicKeyDeserializeUncompressed","blsSignatureDeserializeUncompressed","_blsSignatureDeserializeUncompressed","blsSecretKeySetLittleEndian","_blsSecretKeySetLittleEndian","blsSecretKeySetLittleEndianMod","_blsSecretKeySetLittleEndianMod","blsHashToSecretKey","_blsHashToSecretKey","blsSign","_blsSign","blsVerify","_blsVerify","Common","Uint32Array","deserialize","serialize","msg","console","log","serializeToHexStr","fill","_save","rhs","xPos","yPos","y","constructor","Cstr","z","zPos","Id","_setter","_blsIdSetInt","_isEqual","_blsIdIsEqual","_getter","base","getRandomValues","setLittleEndian","deserializeHexStrToId","deserializeHexStr","SecretKey","_blsSecretKeyIsZero","_blsSecretKeyIsEqual","_update","_blsSecretKeyAdd","msk","_blsSecretKeyShare","secVec","_blsSecretKeyRecover","pub","PublicKey","pubPos","_blsGetPublicKey","m","sig","Signature","sigPos","deserializeHexStrToSecretKey","_blsPublicKeyIsZero","_blsPublicKeyIsEqual","_blsPublicKeyAdd","_blsPublicKeyShare","_blsPublicKeyRecover","_blsPublicKeyIsValidOrder","deserializeHexStrToPublicKey","_blsSignatureIsZero","_blsSignatureIsEqual","_blsSignatureAdd","_blsSignatureRecover","_blsSignatureIsValidOrder","sigVec","aggSigPos","sigVecPos","_blsAggregateSignature","pubVec","msgSize","pubVecPos","msgPos","_blsFastAggregateVerify","msgVec","_blsAggregateVerifyNoCheck","deserializeHexStrToSignature","setETHmode","mode","_blsSetETHmode","verifySignatureOrder","doVerify","_blsSignatureVerifyOrder","verifyPublicKeyOrder","_blsPublicKeyVerifyOrder","areAllMsgDifferent","msgs","h","multiVerify","pubs","sigs","MSG_SIZE","RAND_SIZE","threadNum","randPos","_blsMultiVerify","_cryptoGetRandomValues","p","setRandFunc","f","init","name","Promise","resolve","crypto","require","randomFillSync","path","js","Module","cryptoGetRandomValues","locateFile","baseName","join","__dirname","then","_mod","msCrypto","fetch","response","arrayBuffer","buffer","onRuntimeInitialized"],"mappings":"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","sourcesContent":["(generator => {\n  if (typeof window === 'object') {\n    const exports = {}\n\n    if (typeof module !== 'undefined' && module.exports) {\n      module.exports = generator(exports, false)\n    } else {\n      window.bls = generator(exports, false)\n    }\n  } else {\n    generator(exports, true)\n  }\n})((exports, isNodeJs) => {\n  /* eslint-disable */\n  exports.BN254 = 0\n  exports.BN381_1 = 1\n  exports.BLS12_381 = 5\n  exports.ethMode = false\n  exports.ETH_MODE_DRAFT_05 = 1\n  exports.ETH_MODE_DRAFT_06 = 2\n  exports.ETH_MODE_DRAFT_07 = 3\n\n  const setup = (exports, curveType) => {\n    const mod = exports.mod\n    const MCLBN_FP_UNIT_SIZE = 6\n    const MCLBN_FR_UNIT_SIZE = exports.ethMode ? 4 : 6\n    const BLS_COMPILER_TIME_VAR_ADJ = exports.ethMode ? 200 : 0\n    const MCLBN_COMPILED_TIME_VAR = (MCLBN_FR_UNIT_SIZE * 10 + MCLBN_FP_UNIT_SIZE) + BLS_COMPILER_TIME_VAR_ADJ\n    const BLS_ID_SIZE = MCLBN_FR_UNIT_SIZE * 8\n    const BLS_SECRETKEY_SIZE = MCLBN_FP_UNIT_SIZE * 8\n    const BLS_PUBLICKEY_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 1 : 2)\n    const BLS_SIGNATURE_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 2 : 1)\n\n    const _malloc = size => {\n      return mod._blsMalloc(size)\n    }\n    const _free = pos => {\n      mod._blsFree(pos)\n    }\n    const ptrToAsciiStr = (pos, n) => {\n      let s = ''\n      for (let i = 0; i < n; i++) {\n        s += String.fromCharCode(mod.HEAP8[pos + i])\n      }\n      return s\n    }\n    const asciiStrToPtr = (pos, s) => {\n      for (let i = 0; i < s.length; i++) {\n        mod.HEAP8[pos + i] = s.charCodeAt(i)\n      }\n    }\n    exports.toHex = (a, start, n) => {\n      let s = ''\n      for (let i = 0; i < n; i++) {\n        s += ('0' + a[start + i].toString(16)).slice(-2)\n      }\n      return s\n    }\n    // Uint8Array to hex string\n    exports.toHexStr = a => {\n      return exports.toHex(a, 0, a.length)\n    }\n    // hex string to Uint8Array\n    exports.fromHexStr = s => {\n      if (s.length & 1) throw new Error('fromHexStr:length must be even ' + s.length)\n      const n = s.length / 2\n      const a = new Uint8Array(n)\n      for (let i = 0; i < n; i++) {\n        a[i] = parseInt(s.slice(i * 2, i * 2 + 2), 16)\n      }\n      return a\n    }\n///////////////////////////\n    const copyToUint32Array = (a, pos) => {\n      a.set(mod.HEAP32.subarray(pos / 4, pos / 4 + a.length))\n//    for (let i = 0; i < a.length; i++) {\n//      a[i] = mod.HEAP32[pos / 4 + i]\n//    }\n    }\n    const copyFromUint32Array = (pos, a) => {\n      mod.HEAP32.set(a, pos / 4)\n//    for (let i = 0; i < a.length; i++) {\n//      mod.HEAP32[pos / 4 + i] = a[i]\n//    }\n    }\n//////////////////////////////////\n    const _wrapGetStr = (func, returnAsStr = true) => {\n      return (x, ioMode = 0) => {\n        const maxBufSize = 3096\n        const pos = _malloc(maxBufSize)\n        const n = func(pos, maxBufSize, x, ioMode)\n        if (n <= 0) {\n          throw new Error('err gen_str:' + x)\n        }\n        let s = null\n        if (returnAsStr) {\n          s = ptrToAsciiStr(pos, n)\n        } else {\n          s = new Uint8Array(mod.HEAP8.subarray(pos, pos + n))\n        }\n        _free(pos)\n        return s\n      }\n    }\n    const _wrapSerialize = func => {\n      return _wrapGetStr(func, false)\n    }\n    const _wrapDeserialize = func => {\n      return (x, buf) => {\n        const pos = _malloc(buf.length)\n        mod.HEAP8.set(buf, pos)\n        const r = func(x, pos, buf.length)\n        _free(pos)\n        if (r === 0) throw new Error('err _wrapDeserialize', buf)\n      }\n    }\n    /*\n      argNum : n\n      func(x0, ..., x_(n-1), buf, ioMode)\n      => func(x0, ..., x_(n-1), pos, buf.length, ioMode)\n    */\n    const _wrapInput = (func, argNum, returnValue = false) => {\n      return function () {\n        const args = [...arguments]\n        const buf = args[argNum]\n        const typeStr = Object.prototype.toString.apply(buf)\n        if (['[object String]', '[object Uint8Array]', '[object Array]'].indexOf(typeStr) < 0) {\n          throw new Error(`err bad type:\"${typeStr}\". Use String or Uint8Array.`)\n        }\n        const ioMode = args[argNum + 1] // may undefined\n        const pos = _malloc(buf.length)\n        if (typeStr === '[object String]') {\n          asciiStrToPtr(pos, buf)\n        } else {\n          mod.HEAP8.set(buf, pos)\n        }\n        const r = func(...args.slice(0, argNum), pos, buf.length, ioMode)\n        _free(pos)\n        if (returnValue) return r\n        if (r) throw new Error('err _wrapInput ' + buf)\n      }\n    }\n    const callSetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4)\n      func(pos, p1, p2) // p1, p2 may be undefined\n      copyToUint32Array(a, pos)\n      _free(pos)\n    }\n    const callGetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4)\n      mod.HEAP32.set(a, pos / 4)\n      const s = func(pos, p1, p2)\n      _free(pos)\n      return s\n    }\n    const callShare = (func, a, size, vec, id) => {\n      const pos = a._allocAndCopy()\n      const idPos = id._allocAndCopy()\n      const vecPos = _malloc(size * vec.length)\n      for (let i = 0; i < vec.length; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_)\n      }\n      func(pos, vecPos, vec.length, idPos)\n      _free(vecPos)\n      _free(idPos)\n      a._saveAndFree(pos)\n    }\n    const callRecover = (func, a, size, vec, idVec) => {\n      const n = vec.length\n      if (n != idVec.length) throw ('recover:bad length')\n      const secPos = a._alloc()\n      const vecPos = _malloc(size * n)\n      const idVecPos = _malloc(BLS_ID_SIZE * n)\n      for (let i = 0; i < n; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_)\n        copyFromUint32Array(idVecPos + BLS_ID_SIZE * i, idVec[i].a_)\n      }\n      const r = func(secPos, vecPos, idVecPos, n)\n      _free(idVecPos)\n      _free(vecPos)\n      a._saveAndFree(secPos)\n      if (r) throw ('callRecover')\n    }\n\n    // change curveType\n    exports.blsInit = (curveType = (exports.ethMode ? exports.BLS12_381 : exports.BN254)) => {\n      const r = mod._blsInit(curveType, MCLBN_COMPILED_TIME_VAR)\n      if (r) throw ('blsInit err ' + r)\n    }\n    exports.getCurveOrder = _wrapGetStr(mod._blsGetCurveOrder)\n    exports.getFieldOrder = _wrapGetStr(mod._blsGetFieldOrder)\n\n    exports.blsIdSetDecStr = _wrapInput(mod._blsIdSetDecStr, 1)\n    exports.blsIdSetHexStr = _wrapInput(mod._blsIdSetHexStr, 1)\n    exports.blsIdGetDecStr = _wrapGetStr(mod._blsIdGetDecStr)\n    exports.blsIdGetHexStr = _wrapGetStr(mod._blsIdGetHexStr)\n\n    exports.blsIdSerialize = _wrapSerialize(mod._blsIdSerialize)\n    exports.blsSecretKeySerialize = _wrapSerialize(mod._blsSecretKeySerialize)\n    exports.blsPublicKeySerialize = _wrapSerialize(mod._blsPublicKeySerialize)\n    exports.blsSignatureSerialize = _wrapSerialize(mod._blsSignatureSerialize)\n\n    exports.blsIdDeserialize = _wrapDeserialize(mod._blsIdDeserialize)\n    exports.blsSecretKeyDeserialize = _wrapDeserialize(mod._blsSecretKeyDeserialize)\n    exports.blsPublicKeyDeserialize = _wrapDeserialize(mod._blsPublicKeyDeserialize)\n    exports.blsSignatureDeserialize = _wrapDeserialize(mod._blsSignatureDeserialize)\n\n    exports.blsPublicKeySerializeUncompressed = _wrapSerialize(mod._blsPublicKeySerializeUncompressed)\n    exports.blsSignatureSerializeUncompressed = _wrapSerialize(mod._blsSignatureSerializeUncompressed)\n    exports.blsPublicKeyDeserializeUncompressed = _wrapDeserialize(mod._blsPublicKeyDeserializeUncompressed)\n    exports.blsSignatureDeserializeUncompressed = _wrapDeserialize(mod._blsSignatureDeserializeUncompressed)\n\n    exports.blsSecretKeySetLittleEndian = _wrapInput(mod._blsSecretKeySetLittleEndian, 1)\n    exports.blsSecretKeySetLittleEndianMod = _wrapInput(mod._blsSecretKeySetLittleEndianMod, 1)\n    exports.blsHashToSecretKey = _wrapInput(mod._blsHashToSecretKey, 1)\n    exports.blsSign = _wrapInput(mod._blsSign, 2)\n    exports.blsVerify = _wrapInput(mod._blsVerify, 2, true)\n\n    class Common {\n      constructor (size) {\n        this.a_ = new Uint32Array(size / 4)\n      }\n      deserializeHexStr (s) {\n        this.deserialize(exports.fromHexStr(s))\n      }\n      serializeToHexStr () {\n        return exports.toHexStr(this.serialize())\n      }\n      dump (msg = '') {\n        console.log(msg + this.serializeToHexStr())\n      }\n      clear () {\n        this.a_.fill(0)\n      }\n      // alloc new array\n      _alloc () {\n        return _malloc(this.a_.length * 4)\n      }\n      // alloc and copy a_ to mod.HEAP32[pos / 4]\n      _allocAndCopy () {\n        const pos = this._alloc()\n        mod.HEAP32.set(this.a_, pos / 4)\n        return pos\n      }\n      // save pos to a_\n      _save (pos) {\n        this.a_.set(mod.HEAP32.subarray(pos / 4, pos / 4 + this.a_.length))\n      }\n      // save and free\n      _saveAndFree(pos) {\n        this._save(pos)\n        _free(pos)\n      }\n      // set parameter (p1, p2 may be undefined)\n      _setter (func, p1, p2) {\n        const pos = this._alloc()\n        const r = func(pos, p1, p2)\n        this._saveAndFree(pos)\n        if (r) throw new Error('_setter err')\n      }\n      // getter (p1, p2 may be undefined)\n      _getter (func, p1, p2) {\n        const pos = this._allocAndCopy()\n        const s = func(pos, p1, p2)\n        _free(pos)\n        return s\n      }\n      _isEqual (func, rhs) {\n        const xPos = this._allocAndCopy()\n        const yPos = rhs._allocAndCopy()\n        const r = func(xPos, yPos)\n        _free(yPos)\n        _free(xPos)\n        return r === 1\n      }\n      // func(y, this) and return y\n      _op1 (func) {\n        const y = new this.constructor()\n        const xPos = this._allocAndCopy()\n        const yPos = y._alloc()\n        func(yPos, xPos)\n        y._saveAndFree(yPos)\n        _free(xPos)\n        return y\n      }\n      // func(z, this, y) and return z\n      _op2 (func, y, Cstr = null) {\n        const z = Cstr ? new Cstr() : new this.constructor()\n        const xPos = this._allocAndCopy()\n        const yPos = y._allocAndCopy()\n        const zPos = z._alloc()\n        func(zPos, xPos, yPos)\n        z._saveAndFree(zPos)\n        _free(yPos)\n        _free(xPos)\n        return z\n      }\n      // func(self, y)\n      _update (func, y) {\n        const xPos = this._allocAndCopy()\n        const yPos = y._allocAndCopy()\n        func(xPos, yPos)\n        _free(yPos)\n        this._saveAndFree(xPos)\n      }\n    }\n\n    exports.Id = class extends Common {\n      constructor () {\n        super(BLS_ID_SIZE)\n      }\n      setInt (x) {\n        this._setter(mod._blsIdSetInt, x)\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsIdIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsIdDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsIdSerialize)\n      }\n      setStr (s, base = 10) {\n        switch (base) {\n          case 10:\n            this._setter(exports.blsIdSetDecStr, s)\n            return\n          case 16:\n            this._setter(exports.blsIdSetHexStr, s)\n            return\n          default:\n            throw ('BlsId.setStr:bad base:' + base)\n        }\n      }\n      getStr (base = 10) {\n        switch (base) {\n          case 10:\n            return this._getter(exports.blsIdGetDecStr)\n          case 16:\n            return this._getter(exports.blsIdGetHexStr)\n          default:\n            throw ('BlsId.getStr:bad base:' + base)\n        }\n      }\n      setLittleEndian (s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s)\n      }\n      setLittleEndianMod (s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s)\n      }\n      setByCSPRNG () {\n        const a = new Uint8Array(BLS_ID_SIZE)\n        exports.getRandomValues(a)\n        this.setLittleEndian(a)\n      }\n    }\n    exports.deserializeHexStrToId = s => {\n      const r = new exports.Id()\n      r.deserializeHexStr(s)\n      return r\n    }\n\n    exports.SecretKey = class extends Common {\n      constructor () {\n        super(BLS_SECRETKEY_SIZE)\n      }\n      setInt (x) {\n        this._setter(mod._blsIdSetInt, x) // same as Id\n      }\n      isZero () {\n        return this._getter(mod._blsSecretKeyIsZero) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsSecretKeyIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsSecretKeyDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsSecretKeySerialize)\n      }\n      add (rhs) {\n        this._update(mod._blsSecretKeyAdd, rhs)\n      }\n      share (msk, id) {\n        callShare(mod._blsSecretKeyShare, this, BLS_SECRETKEY_SIZE, msk, id)\n      }\n      recover (secVec, idVec) {\n        callRecover(mod._blsSecretKeyRecover, this, BLS_SECRETKEY_SIZE, secVec, idVec)\n      }\n      setHashOf (s) {\n        this._setter(exports.blsHashToSecretKey, s)\n      }\n      setLittleEndian (s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s)\n      }\n      setLittleEndianMod (s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s)\n      }\n      setByCSPRNG () {\n        const a = new Uint8Array(BLS_SECRETKEY_SIZE)\n        exports.getRandomValues(a)\n        this.setLittleEndian(a)\n      }\n      getPublicKey () {\n        const pub = new exports.PublicKey()\n        const secPos = this._allocAndCopy()\n        const pubPos = pub._alloc()\n        mod._blsGetPublicKey(pubPos, secPos)\n        pub._saveAndFree(pubPos)\n        _free(secPos)\n        return pub\n      }\n      /*\n        input\n        m : message (string or Uint8Array)\n        return\n        BlsSignature\n      */\n      sign (m) {\n        const sig = new exports.Signature()\n        const secPos = this._allocAndCopy()\n        const sigPos = sig._alloc()\n        exports.blsSign(sigPos, secPos, m)\n        sig._saveAndFree(sigPos)\n        _free(secPos)\n        return sig\n      }\n    }\n    exports.deserializeHexStrToSecretKey = s => {\n      const r = new exports.SecretKey()\n      r.deserializeHexStr(s)\n      return r\n    }\n\n    exports.PublicKey = class extends Common {\n      constructor () {\n        super(BLS_PUBLICKEY_SIZE)\n      }\n      isZero () {\n        return this._getter(mod._blsPublicKeyIsZero) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsPublicKeyIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsPublicKeyDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsPublicKeySerialize)\n      }\n      deserializeUncompressed (s) {\n        this._setter(exports.blsPublicKeyDeserializeUncompressed, s)\n      }\n      serializeUncompressed () {\n        return this._getter(exports.blsPublicKeySerializeUncompressed)\n      }\n      add (rhs) {\n        this._update(mod._blsPublicKeyAdd, rhs)\n      }\n      share (msk, id) {\n        callShare(mod._blsPublicKeyShare, this, BLS_PUBLICKEY_SIZE, msk, id)\n      }\n      recover (secVec, idVec) {\n        callRecover(mod._blsPublicKeyRecover, this, BLS_PUBLICKEY_SIZE, secVec, idVec)\n      }\n      isValidOrder () {\n        return this._getter(mod._blsPublicKeyIsValidOrder)\n      }\n      verify (sig, m) {\n        const pubPos = this._allocAndCopy()\n        const sigPos = sig._allocAndCopy()\n        const r = exports.blsVerify(sigPos, pubPos, m)\n        _free(sigPos)\n        _free(pubPos)\n        return r != 0\n      }\n    }\n    exports.deserializeHexStrToPublicKey = s => {\n      const r = new exports.PublicKey()\n      r.deserializeHexStr(s)\n      return r\n    }\n\n    exports.Signature = class extends Common {\n      constructor () {\n        super(BLS_SIGNATURE_SIZE)\n      }\n      isZero () {\n        return this._getter(mod._blsSignatureIsZero) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsSignatureIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsSignatureDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsSignatureSerialize)\n      }\n      deserializeUncompressed (s) {\n        this._setter(exports.blsSignatureDeserializeUncompressed, s)\n      }\n      serializeUncompressed () {\n        return this._getter(exports.blsSignatureSerializeUncompressed)\n      }\n      add (rhs) {\n        this._update(mod._blsSignatureAdd, rhs)\n      }\n      recover (secVec, idVec) {\n        callRecover(mod._blsSignatureRecover, this, BLS_SIGNATURE_SIZE, secVec, idVec)\n      }\n      isValidOrder () {\n        return this._getter(mod._blsSignatureIsValidOrder)\n      }\n      // this = aggSig\n      aggregate (sigVec) {\n        const n = sigVec.length\n        const aggSigPos = this._allocAndCopy()\n        const sigVecPos = _malloc(BLS_SIGNATURE_SIZE * n)\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(sigVec[i].a_, (sigVecPos + BLS_SIGNATURE_SIZE * i) / 4)\n        }\n        const r = mod._blsAggregateSignature(aggSigPos, sigVecPos, n)\n        _free(sigVecPos)\n        this._saveAndFree(aggSigPos)\n        return r == 1\n      }\n      // this = aggSig\n      fastAggregateVerify (pubVec, msg) {\n        const n = pubVec.length\n        const msgSize = msg.length\n        const aggSigPos = this._allocAndCopy()\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n)\n        const msgPos = _malloc(msgSize)\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4)\n        }\n        mod.HEAP8.set(msg, msgPos)\n        const r = mod._blsFastAggregateVerify(aggSigPos, pubVecPos, n, msgPos, msgSize)\n        _free(msgPos)\n        _free(pubVecPos)\n        _free(aggSigPos)\n        return r == 1\n      }\n      // this = aggSig\n      // msgVec = (32 * pubVec.length)-size Uint8Array\n      aggregateVerifyNoCheck (pubVec, msgVec) {\n        const n = pubVec.length\n        const msgSize = 32\n        if (n == 0 || msgVec.length != msgSize * n) {\n          return false\n        }\n        const aggSigPos = this._allocAndCopy()\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n)\n        const msgPos = _malloc(msgVec.length)\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4)\n        }\n        mod.HEAP8.set(msgVec, msgPos)\n        const r = mod._blsAggregateVerifyNoCheck(aggSigPos, pubVecPos, msgPos, msgSize, n)\n        _free(msgPos)\n        _free(pubVecPos)\n        _free(aggSigPos)\n        return r == 1\n      }\n    }\n    exports.deserializeHexStrToSignature = s => {\n      const r = new exports.Signature()\n      r.deserializeHexStr(s)\n      return r\n    }\n    // 1 (draft-05) 2 (draft-06) 3 (draft-07)\n    exports.setETHmode = (mode) => {\n      if (mod._blsSetETHmode(mode) != 0) throw new Error(`bad setETHmode ${mode}`)\n    }\n    // make setter check the correctness of the order if doVerify\n    exports.verifySignatureOrder = (doVerify) => {\n      mod._blsSignatureVerifyOrder(doVerify)\n    }\n    // make setter check the correctness of the order if doVerify\n    exports.verifyPublicKeyOrder = (doVerify) => {\n      mod._blsPublicKeyVerifyOrder(doVerify)\n    }\n    exports.areAllMsgDifferent = (msgs, msgSize) => {\n      const n = msgs.length / msgSize\n      if (msgs.length != n * msgSize) return false\n      h = {}\n      for (let i = 0; i < n; i++) {\n        const m = msgs.subarray(i * msgSize, (i + 1) * msgSize)\n        if (m in h) return false\n        h[m] = true\n      }\n      return true\n    }\n    /*\n      return true if all pub[i].verify(sigs[i], msgs[i])\n      msgs is array of 32-byte Uint8Array\n    */\n    exports.multiVerify = (pubs, sigs, msgs) => {\n      const MSG_SIZE = 32\n      const RAND_SIZE = 8 // 64-bit rand\n      const threadNum = 0 // not used\n      const n = sigs.length\n      if (pubs.length != n || msgs.length != n) return false\n      for (let i = 0; i < n; i++) {\n        if (msgs[i].length != MSG_SIZE) return false\n      }\n      const sigPos = _malloc(BLS_SIGNATURE_SIZE * n)\n      const pubPos = _malloc(BLS_PUBLICKEY_SIZE * n)\n      const msgPos = _malloc(MSG_SIZE * n)\n      const randPos = _malloc(RAND_SIZE * n)\n\n      exports.getRandomValues(mod.HEAP8.subarray(randPos, randPos + RAND_SIZE * n))\n      for (let i = 0; i < n; i++) {\n        mod.HEAP32.set(sigs[i].a_, (sigPos + BLS_SIGNATURE_SIZE * i) / 4)\n        mod.HEAP32.set(pubs[i].a_, (pubPos + BLS_PUBLICKEY_SIZE * i) / 4)\n        mod.HEAP8.set(msgs[i], msgPos + MSG_SIZE * i)\n      }\n      const r = mod._blsMultiVerify(sigPos, pubPos, msgPos, MSG_SIZE, randPos, RAND_SIZE, n, threadNum)\n\n      _free(randPos)\n      _free(msgPos)\n      _free(pubPos)\n      _free(sigPos)\n      return r == 1\n    }\n    exports.blsInit(curveType)\n    if (exports.ethMode) {\n      exports.setETHmode(exports.ETH_MODE_DRAFT_07)\n    }\n  } // setup()\n  const _cryptoGetRandomValues = function(p, n) {\n    const a = new Uint8Array(n)\n    exports.getRandomValues(a)\n    for (let i = 0; i < n; i++) {\n      exports.mod.HEAP8[p + i] = a[i]\n    }\n  }\n  // f(a:array) fills a with random value\n  exports.setRandFunc = f => {\n    exports.getRandomValues = f\n  }\n  exports.init = (curveType = exports.BN254) => {\n    exports.curveType = curveType\n    const name = 'bls_c'\n    return new Promise(resolve => {\n      if (isNodeJs) {\n        const crypto = require('crypto')\n        exports.getRandomValues = crypto.randomFillSync\n        const path = require('path')\n        const js = require(`./${name}.js`)\n        const Module = {\n          cryptoGetRandomValues : _cryptoGetRandomValues,\n          locateFile: baseName => { return path.join(__dirname, baseName) }\n        }\n        js(Module)\n          .then(_mod => {\n            exports.mod = _mod\n            setup(exports, curveType)\n            resolve()\n          })\n      } else {\n        const crypto = window.crypto || window.msCrypto\n        exports.getRandomValues = x => crypto.getRandomValues(x)\n        fetch(`./${name}.wasm`) // eslint-disable-line\n          .then(response => response.arrayBuffer())\n          .then(buffer => new Uint8Array(buffer))\n          .then(() => {\n            if (typeof module !== 'undefined' && module.exports) {\n              exports.mod = require('./bls_c')()\n            } else {\n              exports.mod = Module() // eslint-disable-line\n            }\n\n            exports.mod.cryptoGetRandomValues = _cryptoGetRandomValues\n            exports.mod.onRuntimeInitialized = () => {\n              setup(exports, curveType)\n              resolve()\n            }\n          })\n      }\n    })\n  }\n  return exports\n})\n"]},"metadata":{},"sourceType":"script"}