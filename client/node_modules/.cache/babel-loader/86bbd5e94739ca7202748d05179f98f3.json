{"ast":null,"code":"import{Address,ValidatorSecretKey}from'@elrondnetwork/erdjs';function hexStringToByte(str){if(!str){return new Uint8Array();}var a=[];for(var i=0,len=str.length;i<len;i+=2){a.push(parseInt(str.substr(i,2),16));}return new Uint8Array(a);}function getPubKey(file,indices){var headerParts=file.toString().substring(indices[0],indices[1]).split(' ');return headerParts[4]?headerParts[4]:'';}export default function decodeFile(file,delegationContract){var myKey=ValidatorSecretKey.fromPem(file);var dsc=new Address(delegationContract);var signature=myKey.sign(Buffer.from(dsc.pubkey())).toString('hex');var regex=/-----/gi;var result;var indices=[];while(result=regex.exec(file.toString())){indices.push(result.index);}var key=file.toString().substring(indices[1]+6,indices[2]-1);var decoded=window.atob(key);var value=hexStringToByte(decoded);var pubKey=getPubKey(file,indices);return{value:value,pubKey:pubKey,signature:signature};}","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Nodes/components/Dropzone/helpers.ts"],"names":["Address","ValidatorSecretKey","hexStringToByte","str","Uint8Array","a","i","len","length","push","parseInt","substr","getPubKey","file","indices","headerParts","toString","substring","split","decodeFile","delegationContract","myKey","fromPem","dsc","signature","sign","Buffer","from","pubkey","regex","result","exec","index","key","decoded","window","atob","value","pubKey"],"mappings":"AAAA,OAASA,OAAT,CAAkBC,kBAAlB,KAA4C,sBAA5C,CAEA,QAASC,CAAAA,eAAT,CAAyBC,GAAzB,CAAsC,CACpC,GAAI,CAACA,GAAL,CAAU,CACR,MAAO,IAAIC,CAAAA,UAAJ,EAAP,CACD,CACD,GAAMC,CAAAA,CAAC,CAAG,EAAV,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAR,CAAWC,GAAG,CAAGJ,GAAG,CAACK,MAA1B,CAAkCF,CAAC,CAAGC,GAAtC,CAA2CD,CAAC,EAAI,CAAhD,CAAmD,CACjDD,CAAC,CAACI,IAAF,CAAOC,QAAQ,CAACP,GAAG,CAACQ,MAAJ,CAAWL,CAAX,CAAc,CAAd,CAAD,CAAmB,EAAnB,CAAf,EACD,CACD,MAAO,IAAIF,CAAAA,UAAJ,CAAeC,CAAf,CAAP,CACD,CAED,QAASO,CAAAA,SAAT,CAAmBC,IAAnB,CAAiCC,OAAjC,CAAiD,CAC/C,GAAMC,CAAAA,WAAW,CAAGF,IAAI,CACrBG,QADiB,GAEjBC,SAFiB,CAEPH,OAAO,CAAC,CAAD,CAFA,CAEKA,OAAO,CAAC,CAAD,CAFZ,EAGjBI,KAHiB,CAGX,GAHW,CAApB,CAIA,MAAOH,CAAAA,WAAW,CAAC,CAAD,CAAX,CAAiBA,WAAW,CAAC,CAAD,CAA5B,CAAkC,EAAzC,CACD,CAED,cAAe,SAASI,CAAAA,UAAT,CAAoBN,IAApB,CAAkCO,kBAAlC,CAA+D,CAC5E,GAAMC,CAAAA,KAAK,CAAGpB,kBAAkB,CAACqB,OAAnB,CAA2BT,IAA3B,CAAd,CACA,GAAMU,CAAAA,GAAG,CAAG,GAAIvB,CAAAA,OAAJ,CAAYoB,kBAAZ,CAAZ,CACA,GAAMI,CAAAA,SAAS,CAAGH,KAAK,CAACI,IAAN,CAAWC,MAAM,CAACC,IAAP,CAAYJ,GAAG,CAACK,MAAJ,EAAZ,CAAX,EAAsCZ,QAAtC,CAA+C,KAA/C,CAAlB,CAEA,GAAMa,CAAAA,KAAK,CAAG,SAAd,CACA,GAAIC,CAAAA,MAAJ,CACA,GAAMhB,CAAAA,OAAO,CAAG,EAAhB,CACA,MAAQgB,MAAM,CAAGD,KAAK,CAACE,IAAN,CAAWlB,IAAI,CAACG,QAAL,EAAX,CAAjB,CAA+C,CAC7CF,OAAO,CAACL,IAAR,CAAaqB,MAAM,CAACE,KAApB,EACD,CAED,GAAMC,CAAAA,GAAG,CAAGpB,IAAI,CAACG,QAAL,GAAgBC,SAAhB,CAA0BH,OAAO,CAAC,CAAD,CAAP,CAAa,CAAvC,CAA0CA,OAAO,CAAC,CAAD,CAAP,CAAa,CAAvD,CAAZ,CACA,GAAMoB,CAAAA,OAAO,CAAGC,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAhB,CAEA,GAAMI,CAAAA,KAAK,CAAGnC,eAAe,CAACgC,OAAD,CAA7B,CACA,GAAMI,CAAAA,MAAM,CAAG1B,SAAS,CAACC,IAAD,CAAOC,OAAP,CAAxB,CAEA,MAAO,CAAEuB,KAAK,CAALA,KAAF,CAASC,MAAM,CAANA,MAAT,CAAiBd,SAAS,CAATA,SAAjB,CAAP,CACD","sourcesContent":["import { Address, ValidatorSecretKey } from '@elrondnetwork/erdjs';\n\nfunction hexStringToByte(str: string) {\n  if (!str) {\n    return new Uint8Array();\n  }\n  const a = [];\n  for (let i = 0, len = str.length; i < len; i += 2) {\n    a.push(parseInt(str.substr(i, 2), 16));\n  }\n  return new Uint8Array(a);\n}\n\nfunction getPubKey(file: string, indices: any[]) {\n  const headerParts = file\n    .toString()\n    .substring(indices[0], indices[1])\n    .split(' ');\n  return headerParts[4] ? headerParts[4] : '';\n}\n\nexport default function decodeFile(file: string, delegationContract?: string) {\n  const myKey = ValidatorSecretKey.fromPem(file);\n  const dsc = new Address(delegationContract);\n  const signature = myKey.sign(Buffer.from(dsc.pubkey())).toString('hex');\n\n  const regex = /-----/gi;\n  let result;\n  const indices = [];\n  while ((result = regex.exec(file.toString()))) {\n    indices.push(result.index);\n  }\n\n  const key = file.toString().substring(indices[1] + 6, indices[2] - 1);\n  const decoded = window.atob(key);\n\n  const value = hexStringToByte(decoded);\n  const pubKey = getPubKey(file, indices);\n\n  return { value, pubKey, signature };\n}\n"]},"metadata":{},"sourceType":"module"}