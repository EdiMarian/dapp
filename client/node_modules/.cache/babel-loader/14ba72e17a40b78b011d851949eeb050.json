{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Withdrawals/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useEffect } from 'react';\nimport { useGetAccountInfo, transactionServices } from '@elrondnetwork/dapp-core';\nimport { decodeUnsignedNumber, ContractFunction, ProxyProvider, AddressValue, Address, Query, decodeString, decodeBigNumber } from '@elrondnetwork/erdjs';\nimport moment from 'moment';\nimport { network, decimals, denomination } from 'config';\nimport { useGlobalContext, useDispatch } from 'context';\nimport denominate from 'helpers/denominate';\nimport Withdrawal from './components/Withdrawal';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Withdrawals = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useGetAccountInfo();\n  const {\n    undelegatedStakeList\n  } = useGlobalContext();\n  const {\n    success,\n    hasActiveTransactions\n  } = transactionServices.useGetActiveTransactionsStatus();\n\n  const getUndelegatedStakeList = async () => {\n    dispatch({\n      type: 'getUndelegatedStakeList',\n      undelegatedStakeList: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyProvider(network.gatewayAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getUserUnDelegatedList'),\n        args: [new AddressValue(new Address(account.address))]\n      });\n      const [data, config, status] = await Promise.all([provider.queryContract(query), provider.getNetworkConfig(), provider.getNetworkStatus()]);\n      const payload = data.outputUntyped().reduce((total, item, index, array) => {\n        if (index % 2 !== 0) {\n          return total;\n        } else {\n          const next = array[index + 1];\n\n          const getTime = () => {\n            const epochsChangesRemaining = decodeUnsignedNumber(next);\n            const roundsRemainingInEpoch = config.RoundsPerEpoch - status.RoundsPassedInCurrentEpoch;\n            const roundEpochComplete = epochsChangesRemaining > 1 ? (epochsChangesRemaining - 1) * config.RoundsPerEpoch : 0;\n            return moment().unix() + (roundsRemainingInEpoch + roundEpochComplete) * config.RoundDuration / 1000;\n          };\n\n          const current = {\n            timeLeft: decodeString(next) === '' ? 0 : getTime(),\n            value: denominate({\n              input: decodeBigNumber(item).toFixed(),\n              decimals,\n              denomination\n            })\n          };\n          const exists = total.find(withdrawal => withdrawal.timeLeft === withdrawal.timeLeft);\n          const value = exists ? (parseInt(exists.value) + parseInt(current.value)).toFixed() : 0;\n\n          if (exists && current.timeLeft === exists.timeLeft) {\n            return [...(total.length > 1 ? total : []), { ...exists,\n              value\n            }];\n          } else {\n            return [...total, current];\n          }\n        }\n      }, []);\n      dispatch({\n        type: 'getUndelegatedStakeList',\n        undelegatedStakeList: {\n          status: 'loaded',\n          error: null,\n          data: payload.sort((alpha, beta) => alpha.timeLeft - beta.timeLeft)\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getUndelegatedStakeList',\n        undelegatedStakeList: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const fetchUndelegatedStakeList = () => {\n    if (!undelegatedStakeList.data) {\n      getUndelegatedStakeList();\n    }\n  };\n\n  const refetchUndelegatedStakeList = () => {\n    if (hasActiveTransactions && success && undelegatedStakeList.data) {\n      getUndelegatedStakeList();\n    }\n  };\n\n  useEffect(fetchUndelegatedStakeList, [undelegatedStakeList.data]);\n  useEffect(refetchUndelegatedStakeList, [hasActiveTransactions, success]);\n\n  if (!undelegatedStakeList.data || undelegatedStakeList.data.length === 0) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.withdrawals,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.heading,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.title,\n        children: \"Pending Withdrawals\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.body,\n      children: undelegatedStakeList.data.map(withdrawal => /*#__PURE__*/_jsxDEV(Withdrawal, { ...withdrawal\n      }, withdrawal.timeLeft, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Withdrawals, \"Gxeo2Nkqow60we95vZF90QtvPZo=\", false, function () {\n  return [useDispatch, useGetAccountInfo, useGlobalContext, transactionServices.useGetActiveTransactionsStatus];\n});\n\n_c = Withdrawals;\nexport default Withdrawals;\n\nvar _c;\n\n$RefreshReg$(_c, \"Withdrawals\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Withdrawals/index.tsx"],"names":["React","useEffect","useGetAccountInfo","transactionServices","decodeUnsignedNumber","ContractFunction","ProxyProvider","AddressValue","Address","Query","decodeString","decodeBigNumber","moment","network","decimals","denomination","useGlobalContext","useDispatch","denominate","Withdrawal","styles","Withdrawals","dispatch","account","undelegatedStakeList","success","hasActiveTransactions","useGetActiveTransactionsStatus","getUndelegatedStakeList","type","status","data","error","provider","gatewayAddress","query","address","delegationContract","func","args","config","Promise","all","queryContract","getNetworkConfig","getNetworkStatus","payload","outputUntyped","reduce","total","item","index","array","next","getTime","epochsChangesRemaining","roundsRemainingInEpoch","RoundsPerEpoch","RoundsPassedInCurrentEpoch","roundEpochComplete","unix","RoundDuration","current","timeLeft","value","input","toFixed","exists","find","withdrawal","parseInt","length","sort","alpha","beta","fetchUndelegatedStakeList","refetchUndelegatedStakeList","withdrawals","heading","title","body","map"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,SACEC,iBADF,EAEEC,mBAFF,QAGO,0BAHP;AAIA,SACEC,oBADF,EAEEC,gBAFF,EAGEC,aAHF,EAIEC,YAJF,EAKEC,OALF,EAMEC,KANF,EAOEC,YAPF,EAQEC,eARF,QASO,sBATP;AAUA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,YAA5B,QAAgD,QAAhD;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,SAA9C;AAEA,OAAOC,UAAP,MAAuB,oBAAvB;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,MAAMC,WAAqB,GAAG,MAAM;AAAA;;AAClC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA,QAAM;AAAEM,IAAAA;AAAF,MAAcrB,iBAAiB,EAArC;AACA,QAAM;AAAEsB,IAAAA;AAAF,MAA2BR,gBAAgB,EAAjD;AACA,QAAM;AAAES,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MACJvB,mBAAmB,CAACwB,8BAApB,EADF;;AAGA,QAAMC,uBAAuB,GAAG,YAA2B;AACzDN,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAE,yBADC;AAEPL,MAAAA,oBAAoB,EAAE;AACpBM,QAAAA,MAAM,EAAE,SADY;AAEpBC,QAAAA,IAAI,EAAE,IAFc;AAGpBC,QAAAA,KAAK,EAAE;AAHa;AAFf,KAAD,CAAR;;AASA,QAAI;AACF,YAAMC,QAAQ,GAAG,IAAI3B,aAAJ,CAAkBO,OAAO,CAACqB,cAA1B,CAAjB;AACA,YAAMC,KAAK,GAAG,IAAI1B,KAAJ,CAAU;AACtB2B,QAAAA,OAAO,EAAE,IAAI5B,OAAJ,CAAYK,OAAO,CAACwB,kBAApB,CADa;AAEtBC,QAAAA,IAAI,EAAE,IAAIjC,gBAAJ,CAAqB,wBAArB,CAFgB;AAGtBkC,QAAAA,IAAI,EAAE,CAAC,IAAIhC,YAAJ,CAAiB,IAAIC,OAAJ,CAAYe,OAAO,CAACa,OAApB,CAAjB,CAAD;AAHgB,OAAV,CAAd;AAMA,YAAM,CAACL,IAAD,EAAOS,MAAP,EAAeV,MAAf,IAAyB,MAAMW,OAAO,CAACC,GAAR,CAAY,CAC/CT,QAAQ,CAACU,aAAT,CAAuBR,KAAvB,CAD+C,EAE/CF,QAAQ,CAACW,gBAAT,EAF+C,EAG/CX,QAAQ,CAACY,gBAAT,EAH+C,CAAZ,CAArC;AAMA,YAAMC,OAAO,GAAGf,IAAI,CACjBgB,aADa,GAEbC,MAFa,CAEN,CAACC,KAAD,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,KAA1B,KAAoC;AAC1C,YAAID,KAAK,GAAG,CAAR,KAAc,CAAlB,EAAqB;AACnB,iBAAOF,KAAP;AACD,SAFD,MAEO;AACL,gBAAMI,IAAI,GAAGD,KAAK,CAACD,KAAK,GAAG,CAAT,CAAlB;;AACA,gBAAMG,OAAO,GAAG,MAAc;AAC5B,kBAAMC,sBAAsB,GAAGnD,oBAAoB,CAACiD,IAAD,CAAnD;AACA,kBAAMG,sBAAsB,GAC1BhB,MAAM,CAACiB,cAAP,GAAwB3B,MAAM,CAAC4B,0BADjC;AAEA,kBAAMC,kBAAkB,GACtBJ,sBAAsB,GAAG,CAAzB,GACI,CAACA,sBAAsB,GAAG,CAA1B,IAA+Bf,MAAM,CAACiB,cAD1C,GAEI,CAHN;AAKA,mBACE7C,MAAM,GAAGgD,IAAT,KACC,CAACJ,sBAAsB,GAAGG,kBAA1B,IACCnB,MAAM,CAACqB,aADT,GAEE,IAJJ;AAMD,WAfD;;AAiBA,gBAAMC,OAAO,GAAG;AACdC,YAAAA,QAAQ,EAAErD,YAAY,CAAC2C,IAAD,CAAZ,KAAuB,EAAvB,GAA4B,CAA5B,GAAgCC,OAAO,EADnC;AAEdU,YAAAA,KAAK,EAAE9C,UAAU,CAAC;AAChB+C,cAAAA,KAAK,EAAEtD,eAAe,CAACuC,IAAD,CAAf,CAAsBgB,OAAtB,EADS;AAEhBpD,cAAAA,QAFgB;AAGhBC,cAAAA;AAHgB,aAAD;AAFH,WAAhB;AASA,gBAAMoD,MAAM,GAAGlB,KAAK,CAACmB,IAAN,CACZC,UAAD,IACEA,UAAU,CAACN,QAAX,KAAwBM,UAAU,CAACN,QAFxB,CAAf;AAKA,gBAAMC,KAAK,GAAGG,MAAM,GAChB,CAACG,QAAQ,CAACH,MAAM,CAACH,KAAR,CAAR,GAAyBM,QAAQ,CAACR,OAAO,CAACE,KAAT,CAAlC,EAAmDE,OAAnD,EADgB,GAEhB,CAFJ;;AAIA,cAAIC,MAAM,IAAIL,OAAO,CAACC,QAAR,KAAqBI,MAAM,CAACJ,QAA1C,EAAoD;AAClD,mBAAO,CACL,IAAId,KAAK,CAACsB,MAAN,GAAe,CAAf,GAAmBtB,KAAnB,GAA2B,EAA/B,CADK,EAEL,EACE,GAAGkB,MADL;AAEEH,cAAAA;AAFF,aAFK,CAAP;AAOD,WARD,MAQO;AACL,mBAAO,CAAC,GAAGf,KAAJ,EAAWa,OAAX,CAAP;AACD;AACF;AACF,OAtDa,EAsDX,EAtDW,CAAhB;AAwDAxC,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,yBADC;AAEPL,QAAAA,oBAAoB,EAAE;AACpBM,UAAAA,MAAM,EAAE,QADY;AAEpBE,UAAAA,KAAK,EAAE,IAFa;AAGpBD,UAAAA,IAAI,EAAEe,OAAO,CAAC0B,IAAR,CACJ,CAACC,KAAD,EAAiCC,IAAjC,KACED,KAAK,CAACV,QAAN,GAAiBW,IAAI,CAACX,QAFpB;AAHc;AAFf,OAAD,CAAR;AAWD,KAjFD,CAiFE,OAAO/B,KAAP,EAAc;AACdV,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,yBADC;AAEPL,QAAAA,oBAAoB,EAAE;AACpBM,UAAAA,MAAM,EAAE,OADY;AAEpBC,UAAAA,IAAI,EAAE,IAFc;AAGpBC,UAAAA;AAHoB;AAFf,OAAD,CAAR;AAQD;AACF,GArGD;;AAuGA,QAAM2C,yBAAyB,GAAG,MAAM;AACtC,QAAI,CAACnD,oBAAoB,CAACO,IAA1B,EAAgC;AAC9BH,MAAAA,uBAAuB;AACxB;AACF,GAJD;;AAMA,QAAMgD,2BAA2B,GAAG,MAAM;AACxC,QAAIlD,qBAAqB,IAAID,OAAzB,IAAoCD,oBAAoB,CAACO,IAA7D,EAAmE;AACjEH,MAAAA,uBAAuB;AACxB;AACF,GAJD;;AAMA3B,EAAAA,SAAS,CAAC0E,yBAAD,EAA4B,CAACnD,oBAAoB,CAACO,IAAtB,CAA5B,CAAT;AACA9B,EAAAA,SAAS,CAAC2E,2BAAD,EAA8B,CAAClD,qBAAD,EAAwBD,OAAxB,CAA9B,CAAT;;AAEA,MAAI,CAACD,oBAAoB,CAACO,IAAtB,IAA8BP,oBAAoB,CAACO,IAArB,CAA0BwC,MAA1B,KAAqC,CAAvE,EAA0E;AACxE,WAAO,IAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAEnD,MAAM,CAACyD,WAAvB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEzD,MAAM,CAAC0D,OAAvB;AAAA,6BACE;AAAM,QAAA,SAAS,EAAE1D,MAAM,CAAC2D,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,SAAS,EAAE3D,MAAM,CAAC4D,IAAvB;AAAA,gBACGxD,oBAAoB,CAACO,IAArB,CAA0BkD,GAA1B,CACEZ,UAAD,iBACE,QAAC,UAAD,OAA0CA;AAA1C,SAAiBA,UAAU,CAACN,QAA5B;AAAA;AAAA;AAAA;AAAA,cAFH;AADH;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAjJD;;GAAM1C,W;UACaJ,W,EAEGf,iB,EACac,gB,EAE/Bb,mBAAmB,CAACwB,8B;;;KANlBN,W;AAmJN,eAAeA,WAAf","sourcesContent":["import * as React from 'react';\nimport { useEffect } from 'react';\n\nimport {\n  useGetAccountInfo,\n  transactionServices\n} from '@elrondnetwork/dapp-core';\nimport {\n  decodeUnsignedNumber,\n  ContractFunction,\n  ProxyProvider,\n  AddressValue,\n  Address,\n  Query,\n  decodeString,\n  decodeBigNumber\n} from '@elrondnetwork/erdjs';\nimport moment from 'moment';\nimport { network, decimals, denomination } from 'config';\nimport { useGlobalContext, useDispatch } from 'context';\nimport { UndelegateStakeListType } from 'context/state';\nimport denominate from 'helpers/denominate';\n\nimport Withdrawal from './components/Withdrawal';\nimport styles from './styles.module.scss';\n\nconst Withdrawals: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { account } = useGetAccountInfo();\n  const { undelegatedStakeList } = useGlobalContext();\n  const { success, hasActiveTransactions } =\n    transactionServices.useGetActiveTransactionsStatus();\n\n  const getUndelegatedStakeList = async (): Promise<void> => {\n    dispatch({\n      type: 'getUndelegatedStakeList',\n      undelegatedStakeList: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyProvider(network.gatewayAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getUserUnDelegatedList'),\n        args: [new AddressValue(new Address(account.address))]\n      });\n\n      const [data, config, status] = await Promise.all([\n        provider.queryContract(query),\n        provider.getNetworkConfig(),\n        provider.getNetworkStatus()\n      ]);\n\n      const payload = data\n        .outputUntyped()\n        .reduce((total: any, item, index, array) => {\n          if (index % 2 !== 0) {\n            return total;\n          } else {\n            const next = array[index + 1];\n            const getTime = (): number => {\n              const epochsChangesRemaining = decodeUnsignedNumber(next);\n              const roundsRemainingInEpoch =\n                config.RoundsPerEpoch - status.RoundsPassedInCurrentEpoch;\n              const roundEpochComplete =\n                epochsChangesRemaining > 1\n                  ? (epochsChangesRemaining - 1) * config.RoundsPerEpoch\n                  : 0;\n\n              return (\n                moment().unix() +\n                ((roundsRemainingInEpoch + roundEpochComplete) *\n                  config.RoundDuration) /\n                  1000\n              );\n            };\n\n            const current = {\n              timeLeft: decodeString(next) === '' ? 0 : getTime(),\n              value: denominate({\n                input: decodeBigNumber(item).toFixed(),\n                decimals,\n                denomination\n              })\n            };\n\n            const exists = total.find(\n              (withdrawal: UndelegateStakeListType) =>\n                withdrawal.timeLeft === withdrawal.timeLeft\n            );\n\n            const value = exists\n              ? (parseInt(exists.value) + parseInt(current.value)).toFixed()\n              : 0;\n\n            if (exists && current.timeLeft === exists.timeLeft) {\n              return [\n                ...(total.length > 1 ? total : []),\n                {\n                  ...exists,\n                  value\n                }\n              ];\n            } else {\n              return [...total, current];\n            }\n          }\n        }, []);\n\n      dispatch({\n        type: 'getUndelegatedStakeList',\n        undelegatedStakeList: {\n          status: 'loaded',\n          error: null,\n          data: payload.sort(\n            (alpha: UndelegateStakeListType, beta: UndelegateStakeListType) =>\n              alpha.timeLeft - beta.timeLeft\n          )\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getUndelegatedStakeList',\n        undelegatedStakeList: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const fetchUndelegatedStakeList = () => {\n    if (!undelegatedStakeList.data) {\n      getUndelegatedStakeList();\n    }\n  };\n\n  const refetchUndelegatedStakeList = () => {\n    if (hasActiveTransactions && success && undelegatedStakeList.data) {\n      getUndelegatedStakeList();\n    }\n  };\n\n  useEffect(fetchUndelegatedStakeList, [undelegatedStakeList.data]);\n  useEffect(refetchUndelegatedStakeList, [hasActiveTransactions, success]);\n\n  if (!undelegatedStakeList.data || undelegatedStakeList.data.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={styles.withdrawals}>\n      <div className={styles.heading}>\n        <span className={styles.title}>Pending Withdrawals</span>\n      </div>\n\n      <div className={styles.body}>\n        {undelegatedStakeList.data.map(\n          (withdrawal: UndelegateStakeListType) => (\n            <Withdrawal key={withdrawal.timeLeft} {...withdrawal} />\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Withdrawals;\n"]},"metadata":{},"sourceType":"module"}