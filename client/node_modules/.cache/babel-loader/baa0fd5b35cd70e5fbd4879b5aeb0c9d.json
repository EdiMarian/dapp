{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Cards/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { faUsers, faReceipt, faArrowUp, faCog } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport Logo from 'assets/Logo';\nimport modifiable from 'helpers/modifiable';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cards = () => {\n  _s();\n\n  const location = useLocation();\n  const url = 'https://api.elrond.com/nfts/count?collection=EQUISTAR-3f393f';\n  const [minted, setMinted] = useState();\n\n  const getNftsMinted = () => {\n    axios.get(url).then(res => {\n      setMinted(res.data);\n    });\n  };\n\n  const cards = [{\n    label: 'Nfts minted',\n    data: getNftsMinted(),\n    colors: ['#2044F5', '#1B37C0'],\n    icon: /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, {\n    label: 'Total Supply',\n    colors: ['#6CADEF', '#5B96D2'],\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this),\n    data: 10010\n  }, {\n    label: 'Service Fee',\n    modal: /*#__PURE__*/_jsxDEV(ChangeServiceFee, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 14\n    }, this),\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faReceipt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this),\n    title: 'Change service fee',\n    description: 'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n    colors: ['#F3BF89', '#B68350'],\n    data: {\n      value: contractDetails.data ? contractDetails.data.serviceFee : contractDetails.error ? 'Service Fee Unknown' : '...%'\n    }\n  }, {\n    label: 'Delegation Cap',\n    modal: /*#__PURE__*/_jsxDEV(ChangeDelegationCap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 14\n    }, this),\n    description: `The delegation cap is the maximum amount of ${network.egldLabel} your agency can stake from delegators.`,\n    title: 'Delegation Cap',\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faArrowUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this),\n    colors: ['#E48570', '#C25C45'],\n    data: getDelegationCap()\n  }];\n  useEffect(fetchTotalNetworkStake, [totalNetworkStake.data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.cards,\n    children: cards.map(card => {\n      const [alpha, beta] = card.colors;\n      const background = `linear-gradient(180deg, ${alpha} 0%, ${beta} 100%)`;\n      const interactive = card.modal && location.pathname === '/admin';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.card,\n        style: {\n          background\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.heading,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: card.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fill: interactive ? beta : 'white'\n            },\n            className: modifiable('icon', [interactive && 'fill'], styles),\n            children: interactive ? /*#__PURE__*/_jsxDEV(Action, {\n              render: card.modal,\n              title: card.title,\n              description: card.description,\n              trigger: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.trigger,\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faCog,\n                  size: \"lg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 19\n            }, this) : card.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.value,\n          children: card.data.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), card.data.percentage && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: card.data.percentage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 38\n        }, this)]\n      }, card.label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cards, \"tKDyYMBGdu8UsBiwh/tW8P/6q9Y=\", false, function () {\n  return [useLocation];\n});\n\n_c = Cards;\nexport default Cards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Cards/index.tsx"],"names":["React","useEffect","useState","faUsers","faReceipt","faArrowUp","faCog","FontAwesomeIcon","axios","useLocation","Logo","modifiable","styles","Cards","location","url","minted","setMinted","getNftsMinted","get","then","res","data","cards","label","colors","icon","modal","title","description","value","contractDetails","serviceFee","error","network","egldLabel","getDelegationCap","fetchTotalNetworkStake","totalNetworkStake","map","card","alpha","beta","background","interactive","pathname","heading","fill","trigger","percentage"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useCallback, useEffect, ReactNode, useState } from 'react';\nimport { useGlobalContext, useDispatch } from 'context';\n\nimport {\n  faUsers,\n  faServer,\n  faLeaf,\n  faReceipt,\n  faArrowUp,\n  faCog\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport Logo from 'assets/Logo';\n\nimport modifiable from 'helpers/modifiable';\nimport styles from './styles.module.scss';\n\ninterface CardType {\n  label: string;\n  colors: Array<string>;\n  data: {\n    value?: string | null;\n  };\n  title?: string;\n  description?: string;\n  modal?: ReactNode;\n  icon: ReactNode;\n}\n\nconst Cards: React.FC = () => {\n  const location = useLocation();\n  const url = 'https://api.elrond.com/nfts/count?collection=EQUISTAR-3f393f';\n  const [minted, setMinted] = useState();\n\n  const getNftsMinted = () => {\n        axios.get(url).then((res) => {\n            setMinted(res.data);\n      })\n  }\n\n  const cards: Array<CardType> = [\n    {\n      label: 'Nfts minted',\n      data: getNftsMinted(),\n      colors: ['#2044F5', '#1B37C0'],\n      icon: <Logo />\n    },\n    {\n      label: 'Total Supply',\n      colors: ['#6CADEF', '#5B96D2'],\n      icon: <FontAwesomeIcon icon={faUsers} />,\n      data: 10010,\n    },\n    {\n      label: 'Service Fee',\n      modal: <ChangeServiceFee />,\n      icon: <FontAwesomeIcon icon={faReceipt} />,\n      title: 'Change service fee',\n      description:\n        'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n      colors: ['#F3BF89', '#B68350'],\n      data: {\n        value: contractDetails.data\n          ? contractDetails.data.serviceFee\n          : contractDetails.error\n          ? 'Service Fee Unknown'\n          : '...%'\n      }\n    },\n    {\n      label: 'Delegation Cap',\n      modal: <ChangeDelegationCap />,\n      description: `The delegation cap is the maximum amount of ${network.egldLabel} your agency can stake from delegators.`,\n      title: 'Delegation Cap',\n      icon: <FontAwesomeIcon icon={faArrowUp} />,\n      colors: ['#E48570', '#C25C45'],\n      data: getDelegationCap()\n    }\n  ];\n\n  useEffect(fetchTotalNetworkStake, [totalNetworkStake.data]);\n\n  return (\n    <div className={styles.cards}>\n      {cards.map((card) => {\n        const [alpha, beta] = card.colors;\n        const background = `linear-gradient(180deg, ${alpha} 0%, ${beta} 100%)`;\n        const interactive = card.modal && location.pathname === '/admin';\n\n        return (\n          <div key={card.label} className={styles.card} style={{ background }}>\n            <div className={styles.heading}>\n              <span>{card.label}</span>\n              <div\n                style={{ fill: interactive ? beta : 'white' }}\n                className={modifiable('icon', [interactive && 'fill'], styles)}\n              >\n                {interactive ? (\n                  <Action\n                    render={card.modal}\n                    title={card.title}\n                    description={card.description}\n                    trigger={\n                      <span className={styles.trigger}>\n                        <FontAwesomeIcon icon={faCog} size='lg' />\n                      </span>\n                    }\n                  />\n                ) : (\n                  card.icon\n                )}\n              </div>\n            </div>\n\n            <div className={styles.value}>{card.data.value}</div>\n\n            {card.data.percentage && <span>{card.data.percentage}</span>}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Cards;\n"]},"metadata":{},"sourceType":"module"}