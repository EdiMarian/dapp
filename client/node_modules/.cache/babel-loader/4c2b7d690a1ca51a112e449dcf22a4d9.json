{"ast":null,"code":"import _defineProperty from\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useEffect}from'react';import{useGetAccountInfo,getNetworkProxy,transactionServices}from'@elrondnetwork/dapp-core';import{Query,ProxyProvider,ContractFunction,Address,decodeBigNumber,decodeUnsignedNumber,decodeString,AddressValue}from'@elrondnetwork/erdjs';import{network,decimals,auctionContract,denomination}from'config';import{useDispatch}from'context';import denominate from'helpers/denominate';var useGlobalData=function useGlobalData(){var _useGetAccountInfo=useGetAccountInfo(),address=_useGetAccountInfo.address;var _transactionServices$=transactionServices.useGetSuccessfulTransactions(),successfulTransactionsArray=_transactionServices$.successfulTransactionsArray;var dispatch=useDispatch();var provider=new ProxyProvider(network.gatewayAddress);var criticalFetches={getContractDetails:{key:'contractDetails',handler:function(){var _handler=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var query,data,response,ownerAddressIndex,serviceFeeIndex,delegationCapIndex,automaticActivationIndex,withDelegationCapIndex,redelegationCapIndex,ownerAddress,serviceFee,delegationCap,activationStatus,withDelegationCap,redelegationCap;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;query=new Query({address:new Address(network.delegationContract),func:new ContractFunction('getContractConfig')});_context.next=4;return provider.queryContract(query);case 4:data=_context.sent;response=data.outputUntyped();ownerAddressIndex=0;serviceFeeIndex=1;delegationCapIndex=2;automaticActivationIndex=4;withDelegationCapIndex=5;redelegationCapIndex=7;ownerAddress=response[ownerAddressIndex];serviceFee=response[serviceFeeIndex];delegationCap=response[delegationCapIndex];activationStatus=response[automaticActivationIndex];withDelegationCap=response[withDelegationCapIndex];redelegationCap=response[redelegationCapIndex];return _context.abrupt(\"return\",{withDelegationCap:String(withDelegationCap),owner:new Address(address).hex()===ownerAddress.toString('hex'),delegationCap:decodeBigNumber(delegationCap).toFixed(),redelegationCap:decodeString(redelegationCap)==='true'?'ON':'OFF',serviceFee:(decodeUnsignedNumber(serviceFee)/100).toString()+'%',automaticActivation:decodeString(activationStatus)==='true'?'ON':'OFF'});case 21:_context.prev=21;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",Promise.reject(_context.t0));case 24:case\"end\":return _context.stop();}}},_callee,null,[[0,21]]);}));function handler(){return _handler.apply(this,arguments);}return handler;}()},getNodesNumber:{key:'nodesNumber',handler:function(){var _handler2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var query,data,response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;query=new Query({address:new Address(auctionContract),func:new ContractFunction('getBlsKeysStatus'),args:[new AddressValue(new Address(network.delegationContract))]});_context2.next=4;return provider.queryContract(query);case 4:data=_context2.sent;response=data.outputUntyped();return _context2.abrupt(\"return\",response);case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](0);return _context2.abrupt(\"return\",Promise.reject(_context2.t0));case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[0,9]]);}));function handler(){return _handler2.apply(this,arguments);}return handler;}()},getTotalActiveStake:{key:'totalActiveStake',handler:function(){var _handler3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var query,data,_data$outputUntyped,_data$outputUntyped2,totalNodes;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;query=new Query({address:new Address(network.delegationContract),func:new ContractFunction('getTotalActiveStake')});_context3.next=4;return provider.queryContract(query);case 4:data=_context3.sent;_data$outputUntyped=data.outputUntyped(),_data$outputUntyped2=_slicedToArray(_data$outputUntyped,1),totalNodes=_data$outputUntyped2[0];return _context3.abrupt(\"return\",decodeBigNumber(totalNodes).toFixed());case 9:_context3.prev=9;_context3.t0=_context3[\"catch\"](0);return _context3.abrupt(\"return\",Promise.reject(_context3.t0));case 12:case\"end\":return _context3.stop();}}},_callee3,null,[[0,9]]);}));function handler(){return _handler3.apply(this,arguments);}return handler;}()},getUserActiveStake:{key:'userActiveStake',handler:function(){var _handler4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var query,data,_data$outputUntyped3,_data$outputUntyped4,userStake;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;query=new Query({address:new Address(network.delegationContract),func:new ContractFunction('getUserActiveStake'),args:[new AddressValue(new Address(address))]});_context4.next=4;return provider.queryContract(query);case 4:data=_context4.sent;_data$outputUntyped3=data.outputUntyped(),_data$outputUntyped4=_slicedToArray(_data$outputUntyped3,1),userStake=_data$outputUntyped4[0];return _context4.abrupt(\"return\",denominate({input:decodeBigNumber(userStake).toFixed(),decimals:decimals,denomination:denomination,addCommas:false}));case 9:_context4.prev=9;_context4.t0=_context4[\"catch\"](0);return _context4.abrupt(\"return\",Promise.reject(_context4.t0));case 12:case\"end\":return _context4.stop();}}},_callee4,null,[[0,9]]);}));function handler(){return _handler4.apply(this,arguments);}return handler;}()},getNetworkConfig:{key:'networkConfig',handler:function(){var _handler5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return getNetworkProxy().getNetworkConfig();case 3:return _context5.abrupt(\"return\",_context5.sent);case 6:_context5.prev=6;_context5.t0=_context5[\"catch\"](0);return _context5.abrupt(\"return\",Promise.reject(_context5.t0));case 9:case\"end\":return _context5.stop();}}},_callee5,null,[[0,6]]);}));function handler(){return _handler5.apply(this,arguments);}return handler;}()}};var fetchCriticalData=function fetchCriticalData(){var fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var keys,data;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:keys=Object.keys(criticalFetches);keys.forEach(function(key){dispatch(_defineProperty({type:key},criticalFetches[key].key,{status:'loading',data:null,error:null}));});_context6.next=4;return Promise.allSettled(keys.map(function(key){return criticalFetches[key].handler();}));case 4:data=_context6.sent;data.forEach(function(item,index){dispatch(_defineProperty({type:keys[index]},criticalFetches[keys[index]].key,{status:item.status==='rejected'?'error':'loaded',error:item.reason||null,data:item.value||null}));});case 6:case\"end\":return _context6.stop();}}},_callee6);}));return function fetchData(){return _ref.apply(this,arguments);};}();fetchData();};useEffect(fetchCriticalData,[successfulTransactionsArray.length]);};export default useGlobalData;","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/hooks/useGlobalData.ts"],"names":["useEffect","useGetAccountInfo","getNetworkProxy","transactionServices","Query","ProxyProvider","ContractFunction","Address","decodeBigNumber","decodeUnsignedNumber","decodeString","AddressValue","network","decimals","auctionContract","denomination","useDispatch","denominate","useGlobalData","address","useGetSuccessfulTransactions","successfulTransactionsArray","dispatch","provider","gatewayAddress","criticalFetches","getContractDetails","key","handler","query","delegationContract","func","queryContract","data","response","outputUntyped","ownerAddressIndex","serviceFeeIndex","delegationCapIndex","automaticActivationIndex","withDelegationCapIndex","redelegationCapIndex","ownerAddress","serviceFee","delegationCap","activationStatus","withDelegationCap","redelegationCap","String","owner","hex","toString","toFixed","automaticActivation","Promise","reject","getNodesNumber","args","getTotalActiveStake","totalNodes","getUserActiveStake","userStake","input","addCommas","getNetworkConfig","fetchCriticalData","fetchData","keys","Object","forEach","type","status","error","allSettled","map","item","index","reason","value","length"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\n\nimport {\n  useGetAccountInfo,\n  getNetworkProxy,\n  transactionServices\n} from '@elrondnetwork/dapp-core';\nimport {\n  Query,\n  ProxyProvider,\n  ContractFunction,\n  Address,\n  decodeBigNumber,\n  decodeUnsignedNumber,\n  decodeString,\n  AddressValue\n} from '@elrondnetwork/erdjs';\n\nimport { network, decimals, auctionContract, denomination } from 'config';\nimport { useDispatch } from 'context';\nimport denominate from 'helpers/denominate';\n\ninterface ContractDetailsType {\n  automaticActivation: string;\n  redelegationCap: string;\n  serviceFee: string;\n  delegationCap: string;\n  owner: boolean;\n  withDelegationCap: string;\n}\n\ninterface globalFetchesType {\n  [key: string]: any;\n  getContractDetails: {\n    key: string;\n    handler: () => Promise<ContractDetailsType | string>;\n  };\n  getNodesNumber: {\n    key: string;\n    handler: () => Promise<Array<Buffer> | string>;\n  };\n  getTotalActiveStake: {\n    key: string;\n    handler: () => Promise<string>;\n  };\n  getUserActiveStake: {\n    key: string;\n    handler: () => Promise<string>;\n  };\n  getNetworkConfig: {\n    key: string;\n    handler: () => Promise<any>;\n  };\n}\n\nconst useGlobalData = () => {\n  const { address } = useGetAccountInfo();\n  const { successfulTransactionsArray } =\n    transactionServices.useGetSuccessfulTransactions();\n\n  const dispatch = useDispatch();\n  const provider = new ProxyProvider(network.gatewayAddress);\n  const criticalFetches: globalFetchesType = {\n    getContractDetails: {\n      key: 'contractDetails',\n      handler: async (): Promise<ContractDetailsType | string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getContractConfig')\n          });\n\n          const data = await provider.queryContract(query);\n          const response = data.outputUntyped();\n\n          const ownerAddressIndex = 0;\n          const serviceFeeIndex = 1;\n          const delegationCapIndex = 2;\n          const automaticActivationIndex = 4;\n          const withDelegationCapIndex = 5;\n          const redelegationCapIndex = 7;\n\n          const ownerAddress = response[ownerAddressIndex];\n          const serviceFee = response[serviceFeeIndex];\n          const delegationCap = response[delegationCapIndex];\n          const activationStatus = response[automaticActivationIndex];\n          const withDelegationCap = response[withDelegationCapIndex];\n          const redelegationCap = response[redelegationCapIndex];\n\n          return {\n            withDelegationCap: String(withDelegationCap),\n            owner: new Address(address).hex() === ownerAddress.toString('hex'),\n            delegationCap: decodeBigNumber(delegationCap).toFixed(),\n            redelegationCap:\n              decodeString(redelegationCap) === 'true' ? 'ON' : 'OFF',\n            serviceFee:\n              (decodeUnsignedNumber(serviceFee) / 100).toString() + '%',\n            automaticActivation:\n              decodeString(activationStatus) === 'true' ? 'ON' : 'OFF'\n          };\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getNodesNumber: {\n      key: 'nodesNumber',\n      handler: async (): Promise<Array<Buffer> | string> => {\n        try {\n          const query = new Query({\n            address: new Address(auctionContract),\n            func: new ContractFunction('getBlsKeysStatus'),\n            args: [new AddressValue(new Address(network.delegationContract))]\n          });\n\n          const data = await provider.queryContract(query);\n          const response = data.outputUntyped();\n\n          return response;\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getTotalActiveStake: {\n      key: 'totalActiveStake',\n      handler: async (): Promise<string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getTotalActiveStake')\n          });\n\n          const data = await provider.queryContract(query);\n          const [totalNodes] = data.outputUntyped();\n\n          return decodeBigNumber(totalNodes).toFixed();\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getUserActiveStake: {\n      key: 'userActiveStake',\n      handler: async (): Promise<string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getUserActiveStake'),\n            args: [new AddressValue(new Address(address))]\n          });\n\n          const data = await provider.queryContract(query);\n          const [userStake] = data.outputUntyped();\n\n          return denominate({\n            input: decodeBigNumber(userStake).toFixed(),\n            decimals,\n            denomination,\n            addCommas: false\n          });\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getNetworkConfig: {\n      key: 'networkConfig',\n      handler: async (): Promise<any> => {\n        try {\n          return await getNetworkProxy().getNetworkConfig();\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  };\n\n  const fetchCriticalData = (): void => {\n    const fetchData = async () => {\n      const keys = Object.keys(criticalFetches);\n\n      keys.forEach((key) => {\n        dispatch({\n          type: key,\n          [criticalFetches[key].key]: {\n            status: 'loading',\n            data: null,\n            error: null\n          }\n        });\n      });\n\n      const data = await Promise.allSettled(\n        keys.map((key: string) => criticalFetches[key].handler())\n      );\n\n      data.forEach((item: any, index: any) => {\n        dispatch({\n          type: keys[index],\n          [criticalFetches[keys[index]].key]: {\n            status: item.status === 'rejected' ? 'error' : 'loaded',\n            error: item.reason || null,\n            data: item.value || null\n          }\n        });\n      });\n    };\n\n    fetchData();\n  };\n\n  useEffect(fetchCriticalData, [successfulTransactionsArray.length]);\n};\n\nexport default useGlobalData;\n"]},"metadata":{},"sourceType":"module"}