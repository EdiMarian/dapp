{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/pages/Account/Edit/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { backend } from 'config';\nimport { useNavigate } from 'react-router-dom';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { Form } from 'react-bootstrap';\nimport io from 'socket.io-client';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Edit = () => {\n  _s();\n\n  const {\n    address\n  } = useGetAccountInfo();\n  const [username, setUsername] = useState(null);\n  const [message, setMessage] = useState(null);\n  const [account, setAccount] = useState();\n  const [socket, setSocket] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  const handleRedirect = () => Boolean(address) ? setLoading(false) : navigate('/unlock');\n\n  useEffect(handleRedirect, [address]);\n  useEffect(() => {\n    const s = io(backend);\n    setSocket(s);\n    return () => {\n      s.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.emit('load-account', address);\n  }, [socket]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('get-account', data => {\n      if (data.message === 'OK') {\n        setAccount(data.account);\n      }\n    });\n  }, [socket]);\n\n  const editAccount = async () => {\n    if (username === null) {\n      setMessage('Please enter an username!');\n    } else {\n      if (username !== account.username) {\n        await socket.emit('create-account', {\n          address,\n          username\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: \"text-light mx-auto\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicEmail\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Enter username\",\n              onChange: e => setUsername(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 9\n            }, this), message !== null ? message === 'Success!' ? /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-success\",\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 13\n            }, this) : /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-danger\",\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 13\n            }, this) : /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"We'll never share your email with anyone else.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            className: \"d-block mx-auto\",\n            onClick: editAccount,\n            children: \"Save changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Edit, \"pEyPb5/2PtM2lXVKJiYatwsEaMk=\", false, function () {\n  return [useGetAccountInfo, useNavigate];\n});\n\n_c = Edit;\nexport default Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/pages/Account/Edit/index.js"],"names":["React","useState","useEffect","backend","useNavigate","useGetAccountInfo","Form","io","Button","Edit","address","username","setUsername","message","setMessage","account","setAccount","socket","setSocket","loading","setLoading","navigate","handleRedirect","Boolean","s","disconnect","emit","on","data","editAccount","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { backend } from 'config';\nimport { useNavigate } from 'react-router-dom';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { Form } from 'react-bootstrap';\nimport io from 'socket.io-client';\nimport Button from 'react-bootstrap/Button';\n\nconst Edit = () => {\n  const { address } = useGetAccountInfo();\n  const [username, setUsername] = useState(null);\n  const [message, setMessage] = useState(null);\n  const [account, setAccount] = useState();\n  const [socket, setSocket] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const navigate = useNavigate();\n  const handleRedirect = () =>\n    Boolean(address) ? setLoading(false) : navigate('/unlock');\n\n  useEffect(handleRedirect, [address]);\n\n  useEffect(() => {\n    const s = io(backend);\n    setSocket(s);\n\n    return () => {\n      s.disconnect();\n    }\n  }, []);\n\n  useEffect(() => {\n    if(socket == null ) return;\n    socket.emit('load-account', address);\n  }, [socket])\n\n  useEffect(() => {\n    if(socket == null ) return;\n    socket.on('get-account', (data) => {\n      if(data.message === 'OK') {\n        setAccount(data.account);\n      }\n    });\n  }, [socket]);\n\n  const editAccount = async () => {\n    if(username === null) {\n      setMessage('Please enter an username!')\n    } else {\n      if(username !== account.username) {\n        await socket.emit('create-account', {address, username});\n      }\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <Form className=\"text-light mx-auto\">\n      <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n        <Form.Label>Username</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Enter username\"\n          onChange={(e) => setUsername(e.target.value)}\n        />\n        {message !== null ?\n          message === 'Success!' ? (\n            <Form.Text className=\"text-success\">\n              {message}\n            </Form.Text>\n          ) : (\n            <Form.Text className=\"text-danger\">\n              {message}\n            </Form.Text>\n          )\n          \n         : (\n          <Form.Text className=\"text-muted\">\n            We'll never share your email with anyone else.\n          </Form.Text>\n        )}\n      </Form.Group>\n     <Button\n       variant=\"primary\"\n       className=\"d-block mx-auto\"\n       onClick={editAccount}\n     >\n        Save changes\n      </Button>\n    </Form>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Edit;\n"]},"metadata":{},"sourceType":"module"}