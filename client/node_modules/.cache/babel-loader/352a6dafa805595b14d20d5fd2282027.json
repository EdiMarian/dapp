{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Interaction = void 0;\n\nconst balance_1 = require(\"../balance\");\n\nconst networkParams_1 = require(\"../networkParams\");\n\nconst query_1 = require(\"./query\");\n\nconst function_1 = require(\"./function\");\n\nconst address_1 = require(\"../address\");\n\nconst typesystem_1 = require(\"./typesystem\");\n\nconst nonce_1 = require(\"../nonce\");\n\nconst networkConfig_1 = require(\"../networkConfig\");\n\nconst constants_1 = require(\"../constants\");\n/**\n * Interactions can be seen as mutable transaction & query builders.\n *\n * Aside from building transactions and queries, the interactors are also responsible for interpreting\n * the execution outcome for the objects they've built.\n */\n\n\nclass Interaction {\n  constructor(contract, executingFunction, interpretingFunction, args, receiver) {\n    this.nonce = new nonce_1.Nonce(0);\n    this.value = balance_1.Balance.Zero();\n    this.gasLimit = networkParams_1.GasLimit.min();\n    this.isWithSingleESDTTransfer = false;\n    this.isWithSingleESDTNFTTransfer = false;\n    this.isWithMultiESDTNFTTransfer = false;\n    this.tokenTransfersSender = new address_1.Address();\n    this.contract = contract;\n    this.executingFunction = executingFunction;\n    this.interpretingFunction = interpretingFunction;\n    this.args = args;\n    this.receiver = receiver;\n    this.tokenTransfers = new TokenTransfersWithinInteraction([], this);\n  }\n\n  getContract() {\n    return this.contract;\n  }\n\n  getInterpretingFunction() {\n    return this.interpretingFunction;\n  }\n\n  getExecutingFunction() {\n    return this.executingFunction;\n  }\n\n  getArguments() {\n    return this.args;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  getTokenTransfers() {\n    return this.tokenTransfers.getTransfers();\n  }\n\n  getGasLimit() {\n    return this.gasLimit;\n  }\n\n  buildTransaction() {\n    let receiver = this.receiver;\n    let func = this.executingFunction;\n    let args = this.args;\n\n    if (this.isWithSingleESDTTransfer) {\n      func = new function_1.ContractFunction(constants_1.ESDT_TRANSFER_FUNCTION_NAME);\n      args = this.tokenTransfers.buildArgsForSingleESDTTransfer();\n    } else if (this.isWithSingleESDTNFTTransfer) {\n      // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n      receiver = this.tokenTransfersSender;\n      func = new function_1.ContractFunction(constants_1.ESDTNFT_TRANSFER_FUNCTION_NAME);\n      args = this.tokenTransfers.buildArgsForSingleESDTNFTTransfer();\n    } else if (this.isWithMultiESDTNFTTransfer) {\n      // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n      receiver = this.tokenTransfersSender;\n      func = new function_1.ContractFunction(constants_1.MULTI_ESDTNFT_TRANSFER_FUNCTION_NAME);\n      args = this.tokenTransfers.buildArgsForMultiESDTNFTTransfer();\n    } // TODO: create as \"deploy\" transaction if the function is \"init\" (or find a better pattern for deployments).\n\n\n    let transaction = this.contract.call({\n      func: func,\n      // GasLimit will be set using \"withGasLimit()\".\n      gasLimit: this.gasLimit,\n      args: args,\n      // Value will be set using \"withValue()\".\n      value: this.value,\n      receiver: receiver\n    });\n    transaction.setNonce(this.nonce);\n    return transaction;\n  }\n\n  buildQuery() {\n    return new query_1.Query({\n      address: this.contract.getAddress(),\n      func: this.executingFunction,\n      args: this.args,\n      // Value will be set using \"withValue()\".\n      value: this.value,\n      // Caller will be set by the InteractionRunner.\n      caller: new address_1.Address()\n    });\n  }\n  /**\n   * Interprets the results of a previously broadcasted (and fully executed) smart contract transaction.\n   * The outcome is structured such that it allows quick access to each level of detail.\n   */\n\n\n  interpretExecutionResults(transactionOnNetwork) {\n    return interpretExecutionResults(this.getEndpoint(), transactionOnNetwork);\n  }\n  /**\n   * Interprets the raw outcome of a Smart Contract query.\n   * The outcome is structured such that it allows quick access to each level of detail.\n   */\n\n\n  interpretQueryResponse(queryResponse) {\n    let endpoint = this.getEndpoint();\n    queryResponse.setEndpointDefinition(endpoint);\n    let values = queryResponse.outputTyped();\n    let returnCode = queryResponse.returnCode;\n    return {\n      queryResponse: queryResponse,\n      values: values,\n      firstValue: values[0],\n      returnCode: returnCode\n    };\n  }\n\n  withValue(value) {\n    this.value = value;\n    return this;\n  }\n\n  withSingleESDTTransfer(transfer) {\n    this.isWithSingleESDTTransfer = true;\n    this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n    return this;\n  }\n\n  withSingleESDTNFTTransfer(transfer, sender) {\n    this.isWithSingleESDTNFTTransfer = true;\n    this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n    this.tokenTransfersSender = sender;\n    return this;\n  }\n\n  withMultiESDTNFTTransfer(transfers, sender) {\n    this.isWithMultiESDTNFTTransfer = true;\n    this.tokenTransfers = new TokenTransfersWithinInteraction(transfers, this);\n    this.tokenTransfersSender = sender;\n    return this;\n  }\n\n  withGasLimit(gasLimit) {\n    this.gasLimit = gasLimit;\n    return this;\n  }\n\n  withGasLimitComponents(args) {\n    let minGasLimit = args.minGasLimit || networkConfig_1.NetworkConfig.getDefault().MinGasLimit.valueOf();\n    let gasPerDataByte = args.gasPerDataByte || networkConfig_1.NetworkConfig.getDefault().GasPerDataByte;\n    let transaction = this.buildTransaction();\n    let dataLength = transaction.getData().length();\n    let movementComponent = new networkParams_1.GasLimit(minGasLimit + gasPerDataByte * dataLength);\n    let executionComponent = new networkParams_1.GasLimit(args.estimatedExecutionComponent);\n    let gasLimit = movementComponent.add(executionComponent);\n    return this.withGasLimit(gasLimit);\n  }\n\n  withNonce(nonce) {\n    this.nonce = nonce;\n    return this;\n  }\n\n  getEndpoint() {\n    return this.getContract().getAbi().getEndpoint(this.getInterpretingFunction());\n  }\n\n}\n\nexports.Interaction = Interaction;\n\nfunction interpretExecutionResults(endpoint, transactionOnNetwork) {\n  let smartContractResults = transactionOnNetwork.getSmartContractResults();\n  let immediateResult = smartContractResults.getImmediate();\n  let resultingCalls = smartContractResults.getResultingCalls();\n  immediateResult.setEndpointDefinition(endpoint);\n  let values = immediateResult.outputTyped();\n  let returnCode = immediateResult.getReturnCode();\n  return {\n    transactionOnNetwork: transactionOnNetwork,\n    smartContractResults: smartContractResults,\n    immediateResult,\n    resultingCalls,\n    values,\n    firstValue: values[0],\n    returnCode: returnCode\n  };\n}\n\nclass TokenTransfersWithinInteraction {\n  constructor(transfers, interaction) {\n    this.transfers = transfers;\n    this.interaction = interaction;\n  }\n\n  getTransfers() {\n    return this.transfers;\n  }\n\n  buildArgsForSingleESDTTransfer() {\n    let singleTransfer = this.transfers[0];\n    return [this.getTypedTokenIdentifier(singleTransfer), this.getTypedTokenQuantity(singleTransfer), this.getTypedInteractionFunction(), ...this.getInteractionArguments()];\n  }\n\n  buildArgsForSingleESDTNFTTransfer() {\n    let singleTransfer = this.transfers[0];\n    return [this.getTypedTokenIdentifier(singleTransfer), this.getTypedTokenNonce(singleTransfer), this.getTypedTokenQuantity(singleTransfer), this.getTypedTokensReceiver(), this.getTypedInteractionFunction(), ...this.getInteractionArguments()];\n  }\n\n  buildArgsForMultiESDTNFTTransfer() {\n    let result = [];\n    result.push(this.getTypedTokensReceiver());\n    result.push(this.getTypedNumberOfTransfers());\n\n    for (const transfer of this.transfers) {\n      result.push(this.getTypedTokenIdentifier(transfer));\n      result.push(this.getTypedTokenNonce(transfer));\n      result.push(this.getTypedTokenQuantity(transfer));\n    }\n\n    result.push(this.getTypedInteractionFunction());\n    result.push(...this.getInteractionArguments());\n    return result;\n  }\n\n  getTypedNumberOfTransfers() {\n    return new typesystem_1.U8Value(this.transfers.length);\n  }\n\n  getTypedTokenIdentifier(transfer) {\n    // Important: for NFTs, this has to be the \"collection\" name, actually.\n    // We will reconsider adding the field \"collection\" on \"Token\" upon merging \"ApiProvider\" and \"ProxyProvider\".\n    return typesystem_1.BytesValue.fromUTF8(transfer.token.identifier);\n  }\n\n  getTypedTokenNonce(transfer) {\n    // The token nonce (creation nonce)\n    return new typesystem_1.U64Value(transfer.getNonce());\n  }\n\n  getTypedTokenQuantity(transfer) {\n    // For NFTs, this will be 1.\n    return new typesystem_1.BigUIntValue(transfer.valueOf());\n  }\n\n  getTypedTokensReceiver() {\n    // The actual receiver of the token(s): the contract\n    return new typesystem_1.AddressValue(this.interaction.getContract().getAddress());\n  }\n\n  getTypedInteractionFunction() {\n    return typesystem_1.BytesValue.fromUTF8(this.interaction.getExecutingFunction().valueOf());\n  }\n\n  getInteractionArguments() {\n    return this.interaction.getArguments();\n  }\n\n}","map":{"version":3,"sources":["../../src/smartcontracts/interaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Interaction = void 0;\nconst balance_1 = require(\"../balance\");\nconst networkParams_1 = require(\"../networkParams\");\nconst query_1 = require(\"./query\");\nconst function_1 = require(\"./function\");\nconst address_1 = require(\"../address\");\nconst typesystem_1 = require(\"./typesystem\");\nconst nonce_1 = require(\"../nonce\");\nconst networkConfig_1 = require(\"../networkConfig\");\nconst constants_1 = require(\"../constants\");\n/**\n * Interactions can be seen as mutable transaction & query builders.\n *\n * Aside from building transactions and queries, the interactors are also responsible for interpreting\n * the execution outcome for the objects they've built.\n */\nclass Interaction {\n    constructor(contract, executingFunction, interpretingFunction, args, receiver) {\n        this.nonce = new nonce_1.Nonce(0);\n        this.value = balance_1.Balance.Zero();\n        this.gasLimit = networkParams_1.GasLimit.min();\n        this.isWithSingleESDTTransfer = false;\n        this.isWithSingleESDTNFTTransfer = false;\n        this.isWithMultiESDTNFTTransfer = false;\n        this.tokenTransfersSender = new address_1.Address();\n        this.contract = contract;\n        this.executingFunction = executingFunction;\n        this.interpretingFunction = interpretingFunction;\n        this.args = args;\n        this.receiver = receiver;\n        this.tokenTransfers = new TokenTransfersWithinInteraction([], this);\n    }\n    getContract() {\n        return this.contract;\n    }\n    getInterpretingFunction() {\n        return this.interpretingFunction;\n    }\n    getExecutingFunction() {\n        return this.executingFunction;\n    }\n    getArguments() {\n        return this.args;\n    }\n    getValue() {\n        return this.value;\n    }\n    getTokenTransfers() {\n        return this.tokenTransfers.getTransfers();\n    }\n    getGasLimit() {\n        return this.gasLimit;\n    }\n    buildTransaction() {\n        let receiver = this.receiver;\n        let func = this.executingFunction;\n        let args = this.args;\n        if (this.isWithSingleESDTTransfer) {\n            func = new function_1.ContractFunction(constants_1.ESDT_TRANSFER_FUNCTION_NAME);\n            args = this.tokenTransfers.buildArgsForSingleESDTTransfer();\n        }\n        else if (this.isWithSingleESDTNFTTransfer) {\n            // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n            receiver = this.tokenTransfersSender;\n            func = new function_1.ContractFunction(constants_1.ESDTNFT_TRANSFER_FUNCTION_NAME);\n            args = this.tokenTransfers.buildArgsForSingleESDTNFTTransfer();\n        }\n        else if (this.isWithMultiESDTNFTTransfer) {\n            // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n            receiver = this.tokenTransfersSender;\n            func = new function_1.ContractFunction(constants_1.MULTI_ESDTNFT_TRANSFER_FUNCTION_NAME);\n            args = this.tokenTransfers.buildArgsForMultiESDTNFTTransfer();\n        }\n        // TODO: create as \"deploy\" transaction if the function is \"init\" (or find a better pattern for deployments).\n        let transaction = this.contract.call({\n            func: func,\n            // GasLimit will be set using \"withGasLimit()\".\n            gasLimit: this.gasLimit,\n            args: args,\n            // Value will be set using \"withValue()\".\n            value: this.value,\n            receiver: receiver,\n        });\n        transaction.setNonce(this.nonce);\n        return transaction;\n    }\n    buildQuery() {\n        return new query_1.Query({\n            address: this.contract.getAddress(),\n            func: this.executingFunction,\n            args: this.args,\n            // Value will be set using \"withValue()\".\n            value: this.value,\n            // Caller will be set by the InteractionRunner.\n            caller: new address_1.Address()\n        });\n    }\n    /**\n     * Interprets the results of a previously broadcasted (and fully executed) smart contract transaction.\n     * The outcome is structured such that it allows quick access to each level of detail.\n     */\n    interpretExecutionResults(transactionOnNetwork) {\n        return interpretExecutionResults(this.getEndpoint(), transactionOnNetwork);\n    }\n    /**\n     * Interprets the raw outcome of a Smart Contract query.\n     * The outcome is structured such that it allows quick access to each level of detail.\n     */\n    interpretQueryResponse(queryResponse) {\n        let endpoint = this.getEndpoint();\n        queryResponse.setEndpointDefinition(endpoint);\n        let values = queryResponse.outputTyped();\n        let returnCode = queryResponse.returnCode;\n        return {\n            queryResponse: queryResponse,\n            values: values,\n            firstValue: values[0],\n            returnCode: returnCode\n        };\n    }\n    withValue(value) {\n        this.value = value;\n        return this;\n    }\n    withSingleESDTTransfer(transfer) {\n        this.isWithSingleESDTTransfer = true;\n        this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n        return this;\n    }\n    withSingleESDTNFTTransfer(transfer, sender) {\n        this.isWithSingleESDTNFTTransfer = true;\n        this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n        this.tokenTransfersSender = sender;\n        return this;\n    }\n    withMultiESDTNFTTransfer(transfers, sender) {\n        this.isWithMultiESDTNFTTransfer = true;\n        this.tokenTransfers = new TokenTransfersWithinInteraction(transfers, this);\n        this.tokenTransfersSender = sender;\n        return this;\n    }\n    withGasLimit(gasLimit) {\n        this.gasLimit = gasLimit;\n        return this;\n    }\n    withGasLimitComponents(args) {\n        let minGasLimit = args.minGasLimit || networkConfig_1.NetworkConfig.getDefault().MinGasLimit.valueOf();\n        let gasPerDataByte = args.gasPerDataByte || networkConfig_1.NetworkConfig.getDefault().GasPerDataByte;\n        let transaction = this.buildTransaction();\n        let dataLength = transaction.getData().length();\n        let movementComponent = new networkParams_1.GasLimit(minGasLimit + gasPerDataByte * dataLength);\n        let executionComponent = new networkParams_1.GasLimit(args.estimatedExecutionComponent);\n        let gasLimit = movementComponent.add(executionComponent);\n        return this.withGasLimit(gasLimit);\n    }\n    withNonce(nonce) {\n        this.nonce = nonce;\n        return this;\n    }\n    getEndpoint() {\n        return this.getContract().getAbi().getEndpoint(this.getInterpretingFunction());\n    }\n}\nexports.Interaction = Interaction;\nfunction interpretExecutionResults(endpoint, transactionOnNetwork) {\n    let smartContractResults = transactionOnNetwork.getSmartContractResults();\n    let immediateResult = smartContractResults.getImmediate();\n    let resultingCalls = smartContractResults.getResultingCalls();\n    immediateResult.setEndpointDefinition(endpoint);\n    let values = immediateResult.outputTyped();\n    let returnCode = immediateResult.getReturnCode();\n    return {\n        transactionOnNetwork: transactionOnNetwork,\n        smartContractResults: smartContractResults,\n        immediateResult,\n        resultingCalls,\n        values,\n        firstValue: values[0],\n        returnCode: returnCode\n    };\n}\nclass TokenTransfersWithinInteraction {\n    constructor(transfers, interaction) {\n        this.transfers = transfers;\n        this.interaction = interaction;\n    }\n    getTransfers() {\n        return this.transfers;\n    }\n    buildArgsForSingleESDTTransfer() {\n        let singleTransfer = this.transfers[0];\n        return [\n            this.getTypedTokenIdentifier(singleTransfer),\n            this.getTypedTokenQuantity(singleTransfer),\n            this.getTypedInteractionFunction(),\n            ...this.getInteractionArguments()\n        ];\n    }\n    buildArgsForSingleESDTNFTTransfer() {\n        let singleTransfer = this.transfers[0];\n        return [\n            this.getTypedTokenIdentifier(singleTransfer),\n            this.getTypedTokenNonce(singleTransfer),\n            this.getTypedTokenQuantity(singleTransfer),\n            this.getTypedTokensReceiver(),\n            this.getTypedInteractionFunction(),\n            ...this.getInteractionArguments()\n        ];\n    }\n    buildArgsForMultiESDTNFTTransfer() {\n        let result = [];\n        result.push(this.getTypedTokensReceiver());\n        result.push(this.getTypedNumberOfTransfers());\n        for (const transfer of this.transfers) {\n            result.push(this.getTypedTokenIdentifier(transfer));\n            result.push(this.getTypedTokenNonce(transfer));\n            result.push(this.getTypedTokenQuantity(transfer));\n        }\n        result.push(this.getTypedInteractionFunction());\n        result.push(...this.getInteractionArguments());\n        return result;\n    }\n    getTypedNumberOfTransfers() {\n        return new typesystem_1.U8Value(this.transfers.length);\n    }\n    getTypedTokenIdentifier(transfer) {\n        // Important: for NFTs, this has to be the \"collection\" name, actually.\n        // We will reconsider adding the field \"collection\" on \"Token\" upon merging \"ApiProvider\" and \"ProxyProvider\".\n        return typesystem_1.BytesValue.fromUTF8(transfer.token.identifier);\n    }\n    getTypedTokenNonce(transfer) {\n        // The token nonce (creation nonce)\n        return new typesystem_1.U64Value(transfer.getNonce());\n    }\n    getTypedTokenQuantity(transfer) {\n        // For NFTs, this will be 1.\n        return new typesystem_1.BigUIntValue(transfer.valueOf());\n    }\n    getTypedTokensReceiver() {\n        // The actual receiver of the token(s): the contract\n        return new typesystem_1.AddressValue(this.interaction.getContract().getAddress());\n    }\n    getTypedInteractionFunction() {\n        return typesystem_1.BytesValue.fromUTF8(this.interaction.getExecutingFunction().valueOf());\n    }\n    getInteractionArguments() {\n        return this.interaction.getArguments();\n    }\n}\n//# sourceMappingURL=interaction.js.map"]},"metadata":{},"sourceType":"script"}