{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/pages/Race/View/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RaceView = () => {\n  _s();\n\n  const {\n    address\n  } = useGetAccountInfo();\n  const {\n    pathname,\n    hash\n  } = useLocation();\n  const path = pathname.replace('/race/', '');\n  const id = path + hash;\n  const [loading, setLoading] = useState(true);\n  const [status, setStatus] = useState(true);\n  const [race, setRace] = useState([]);\n  const navigate = useNavigate();\n\n  const handleRedirect = () => Boolean(address) ? setLoading(false) : navigate('/unlock');\n\n  useEffect(() => {\n    const s = io('http://localhost:4000');\n    s.emit('get-race', id);\n\n    const handler = (race, status) => {\n      if (race != null) {\n        setRace(race);\n        setStatus(status);\n      } else {\n        setLoading(true);\n      }\n    };\n\n    s.on('recive-race', handler);\n    return () => {\n      s.disconnect();\n    };\n  }, []);\n  useEffect(handleRedirect, [address]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Salut\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 18\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 13\n  }, this);\n};\n\n_s(RaceView, \"fBVlMeciJAgcJVqzNlrq5ghfQLI=\", false, function () {\n  return [useGetAccountInfo, useLocation, useNavigate];\n});\n\n_c = RaceView;\nexport default RaceView;\n\nvar _c;\n\n$RefreshReg$(_c, \"RaceView\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/pages/Race/View/index.js"],"names":["React","useState","useEffect","useNavigate","useLocation","useGetAccountInfo","io","RaceView","address","pathname","hash","path","replace","id","loading","setLoading","status","setStatus","race","setRace","navigate","handleRedirect","Boolean","s","emit","handler","on","disconnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,EAAT,QAAmB,kBAAnB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAcH,iBAAiB,EAArC;AACA,QAAM;AAAEI,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAqBN,WAAW,EAAtC;AACA,QAAMO,IAAI,GAAGF,QAAQ,CAACG,OAAT,CAAiB,QAAjB,EAA2B,EAA3B,CAAb;AACA,QAAMC,EAAE,GAAGF,IAAI,GAAGD,IAAlB;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACiB,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMmB,QAAQ,GAAGjB,WAAW,EAA5B;;AACA,QAAMkB,cAAc,GAAG,MACrBC,OAAO,CAACd,OAAD,CAAP,GAAmBO,UAAU,CAAC,KAAD,CAA7B,GAAuCK,QAAQ,CAAC,SAAD,CADjD;;AAGAlB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,CAAC,GAAGjB,EAAE,CAAC,uBAAD,CAAZ;AACAiB,IAAAA,CAAC,CAACC,IAAF,CAAO,UAAP,EAAmBX,EAAnB;;AACA,UAAMY,OAAO,GAAG,CAACP,IAAD,EAAOF,MAAP,KAAkB;AAChC,UAAGE,IAAI,IAAI,IAAX,EAAiB;AACfC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAD,QAAAA,SAAS,CAACD,MAAD,CAAT;AACD,OAHD,MAGO;AACLD,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,KAPD;;AAQAQ,IAAAA,CAAC,CAACG,EAAF,CAAK,aAAL,EAAoBD,OAApB;AACA,WAAO,MAAM;AACXF,MAAAA,CAAC,CAACI,UAAF;AACD,KAFD;AAGD,GAfQ,EAeN,EAfM,CAAT;AAgBAzB,EAAAA,SAAS,CAACmB,cAAD,EAAiB,CAACb,OAAD,CAAjB,CAAT;AACI,sBACM;AAAA,2BACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,UADN;AAKL,CAlCD;;GAAMD,Q;UACgBF,iB,EACOD,W,EAMVD,W;;;KARbI,Q;AAoCN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { io } from 'socket.io-client';\n\nconst RaceView = () => {\n  const { address } = useGetAccountInfo();\n  const { pathname, hash } = useLocation();\n  const path = pathname.replace('/race/', '');\n  const id = path + hash;\n  const [loading, setLoading] = useState(true);\n  const [status, setStatus] = useState(true);\n  const [race, setRace] = useState([]);\n  const navigate = useNavigate();\n  const handleRedirect = () =>\n    Boolean(address) ? setLoading(false) : navigate('/unlock');\n\n  useEffect(() => {\n    const s = io('http://localhost:4000');\n    s.emit('get-race', id);\n    const handler = (race, status) => {\n      if(race != null) {\n        setRace(race);\n        setStatus(status);\n      } else {\n        setLoading(true)\n      }\n    }\n    s.on('recive-race', handler);\n    return () => {\n      s.disconnect();\n    }\n  }, []);\n  useEffect(handleRedirect, [address]);\n      return (\n            <div>\n                 <h1>Salut</h1> \n            </div>\n      )\n}\n\nexport default RaceView;\n"]},"metadata":{},"sourceType":"module"}