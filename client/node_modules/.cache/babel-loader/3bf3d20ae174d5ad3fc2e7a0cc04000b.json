{"ast":null,"code":"const reducer = (state, action) => {\n  switch (action.type) {\n    case 'getUsersNumber':\n      {\n        return { ...state,\n          usersNumber: action.usersNumber\n        };\n      }\n\n    case 'getContractDetails':\n      {\n        return { ...state,\n          contractDetails: action.contractDetails\n        };\n      }\n\n    case 'getNodesNumber':\n      {\n        return { ...state,\n          nodesNumber: action.nodesNumber\n        };\n      }\n\n    case 'getTotalActiveStake':\n      {\n        return { ...state,\n          totalActiveStake: action.totalActiveStake\n        };\n      }\n\n    case 'getUserActiveStake':\n      {\n        return { ...state,\n          userActiveStake: action.userActiveStake\n        };\n      }\n\n    case 'getUndelegatedStakeList':\n      {\n        return { ...state,\n          undelegatedStakeList: action.undelegatedStakeList\n        };\n      }\n\n    case 'getUserClaimableRewards':\n      {\n        return { ...state,\n          userClaimableRewards: action.userClaimableRewards\n        };\n      }\n\n    case 'getNetworkConfig':\n      {\n        return { ...state,\n          networkConfig: action.networkConfig\n        };\n      }\n\n    case 'getNetworkStatus':\n      {\n        return { ...state,\n          networkStatus: action.networkStatus\n        };\n      }\n\n    case 'getTotalNetworkStake':\n      {\n        return { ...state,\n          totalNetworkStake: action.totalNetworkStake\n        };\n      }\n\n    case 'getAgencyMetaData':\n      {\n        return { ...state,\n          agencyMetaData: action.agencyMetaData\n        };\n      }\n\n    default:\n      {\n        throw new Error(`Unhandled action type: ${action}`);\n      }\n  }\n};\n\nexport { reducer };","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/context/reducer.tsx"],"names":["reducer","state","action","type","usersNumber","contractDetails","nodesNumber","totalActiveStake","userActiveStake","undelegatedStakeList","userClaimableRewards","networkConfig","networkStatus","totalNetworkStake","agencyMetaData","Error"],"mappings":"AAiDA,MAAMA,OAAO,GAAG,CAACC,KAAD,EAAmBC,MAAnB,KAAmC;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,gBAAL;AAAuB;AACrB,eAAO,EACL,GAAGF,KADE;AAELG,UAAAA,WAAW,EAAEF,MAAM,CAACE;AAFf,SAAP;AAID;;AACD,SAAK,oBAAL;AAA2B;AACzB,eAAO,EACL,GAAGH,KADE;AAELI,UAAAA,eAAe,EAAEH,MAAM,CAACG;AAFnB,SAAP;AAID;;AACD,SAAK,gBAAL;AAAuB;AACrB,eAAO,EACL,GAAGJ,KADE;AAELK,UAAAA,WAAW,EAAEJ,MAAM,CAACI;AAFf,SAAP;AAID;;AACD,SAAK,qBAAL;AAA4B;AAC1B,eAAO,EACL,GAAGL,KADE;AAELM,UAAAA,gBAAgB,EAAEL,MAAM,CAACK;AAFpB,SAAP;AAID;;AACD,SAAK,oBAAL;AAA2B;AACzB,eAAO,EACL,GAAGN,KADE;AAELO,UAAAA,eAAe,EAAEN,MAAM,CAACM;AAFnB,SAAP;AAID;;AACD,SAAK,yBAAL;AAAgC;AAC9B,eAAO,EACL,GAAGP,KADE;AAELQ,UAAAA,oBAAoB,EAAEP,MAAM,CAACO;AAFxB,SAAP;AAID;;AACD,SAAK,yBAAL;AAAgC;AAC9B,eAAO,EACL,GAAGR,KADE;AAELS,UAAAA,oBAAoB,EAAER,MAAM,CAACQ;AAFxB,SAAP;AAID;;AACD,SAAK,kBAAL;AAAyB;AACvB,eAAO,EACL,GAAGT,KADE;AAELU,UAAAA,aAAa,EAAET,MAAM,CAACS;AAFjB,SAAP;AAID;;AACD,SAAK,kBAAL;AAAyB;AACvB,eAAO,EACL,GAAGV,KADE;AAELW,UAAAA,aAAa,EAAEV,MAAM,CAACU;AAFjB,SAAP;AAID;;AACD,SAAK,sBAAL;AAA6B;AAC3B,eAAO,EACL,GAAGX,KADE;AAELY,UAAAA,iBAAiB,EAAEX,MAAM,CAACW;AAFrB,SAAP;AAID;;AACD,SAAK,mBAAL;AAA0B;AACxB,eAAO,EACL,GAAGZ,KADE;AAELa,UAAAA,cAAc,EAAEZ,MAAM,CAACY;AAFlB,SAAP;AAID;;AACD;AAAS;AACP,cAAM,IAAIC,KAAJ,CAAW,0BAAyBb,MAAO,EAA3C,CAAN;AACD;AArEH;AAuED,CAxED;;AA0EA,SAASF,OAAT","sourcesContent":["import { StateType } from './state';\n\nexport type DispatchType = (action: any) => void;\nexport type ActionType =\n  | {\n      type: 'getUsersNumber';\n      usersNumber: StateType['usersNumber'];\n    }\n  | {\n      type: 'getContractDetails';\n      contractDetails: StateType['contractDetails'];\n    }\n  | {\n      type: 'getNodesNumber';\n      nodesNumber: StateType['nodesNumber'];\n    }\n  | {\n      type: 'getTotalActiveStake';\n      totalActiveStake: StateType['totalActiveStake'];\n    }\n  | {\n      type: 'getUserActiveStake';\n      userActiveStake: StateType['userActiveStake'];\n    }\n  | {\n      type: 'getUndelegatedStakeList';\n      undelegatedStakeList: StateType['undelegatedStakeList'];\n    }\n  | {\n      type: 'getUserClaimableRewards';\n      userClaimableRewards: StateType['userClaimableRewards'];\n    }\n  | {\n      type: 'getNetworkConfig';\n      networkConfig: StateType['networkConfig'];\n    }\n  | {\n      type: 'getNetworkStatus';\n      networkStatus: StateType['networkStatus'];\n    }\n  | {\n      type: 'getTotalNetworkStake';\n      totalNetworkStake: StateType['totalNetworkStake'];\n    }\n  | {\n      type: 'getAgencyMetaData';\n      agencyMetaData: StateType['agencyMetaData'];\n    };\n\nconst reducer = (state: StateType, action: any) => {\n  switch (action.type) {\n    case 'getUsersNumber': {\n      return {\n        ...state,\n        usersNumber: action.usersNumber\n      };\n    }\n    case 'getContractDetails': {\n      return {\n        ...state,\n        contractDetails: action.contractDetails\n      };\n    }\n    case 'getNodesNumber': {\n      return {\n        ...state,\n        nodesNumber: action.nodesNumber\n      };\n    }\n    case 'getTotalActiveStake': {\n      return {\n        ...state,\n        totalActiveStake: action.totalActiveStake\n      };\n    }\n    case 'getUserActiveStake': {\n      return {\n        ...state,\n        userActiveStake: action.userActiveStake\n      };\n    }\n    case 'getUndelegatedStakeList': {\n      return {\n        ...state,\n        undelegatedStakeList: action.undelegatedStakeList\n      };\n    }\n    case 'getUserClaimableRewards': {\n      return {\n        ...state,\n        userClaimableRewards: action.userClaimableRewards\n      };\n    }\n    case 'getNetworkConfig': {\n      return {\n        ...state,\n        networkConfig: action.networkConfig\n      };\n    }\n    case 'getNetworkStatus': {\n      return {\n        ...state,\n        networkStatus: action.networkStatus\n      };\n    }\n    case 'getTotalNetworkStake': {\n      return {\n        ...state,\n        totalNetworkStake: action.totalNetworkStake\n      };\n    }\n    case 'getAgencyMetaData': {\n      return {\n        ...state,\n        agencyMetaData: action.agencyMetaData\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action}`);\n    }\n  }\n};\n\nexport { reducer };\n"]},"metadata":{},"sourceType":"module"}