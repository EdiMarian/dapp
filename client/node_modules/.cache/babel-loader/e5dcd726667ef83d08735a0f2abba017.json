{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractQueryResponse = exports.ContractResultItem = exports.ContractResults = void 0;\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nconst address_1 = require(\"../address\");\n\nconst balance_1 = require(\"../balance\");\n\nconst hash_1 = require(\"../hash\");\n\nconst networkParams_1 = require(\"../networkParams\");\n\nconst nonce_1 = require(\"../nonce\");\n\nconst smartcontracts_1 = require(\"../smartcontracts\");\n\nconst transaction_1 = require(\"../transaction\");\n\nclass ContractResults {\n  constructor(items) {\n    this.items = items;\n    this.items.sort(function (a, b) {\n      return a.nonce.valueOf() - b.nonce.valueOf();\n    });\n  }\n\n  static empty() {\n    return new ContractResults([]);\n  }\n\n  static fromProxyHttpResponse(results) {\n    let items = results.map(item => ContractResultItem.fromProxyHttpResponse(item));\n    return new ContractResults(items);\n  }\n\n  static fromApiHttpResponse(results) {\n    let items = results.map(item => ContractResultItem.fromApiHttpResponse(item));\n    return new ContractResults(items);\n  }\n\n}\n\nexports.ContractResults = ContractResults;\n\nclass ContractResultItem {\n  constructor() {\n    this.hash = hash_1.Hash.empty();\n    this.nonce = new nonce_1.Nonce(0);\n    this.value = balance_1.Balance.Zero();\n    this.receiver = new address_1.Address();\n    this.sender = new address_1.Address();\n    this.data = \"\";\n    this.previousHash = hash_1.Hash.empty();\n    this.originalHash = hash_1.Hash.empty();\n    this.gasLimit = new networkParams_1.GasLimit(0);\n    this.gasPrice = new networkParams_1.GasPrice(0);\n    this.callType = 0;\n    this.returnMessage = \"\";\n  }\n\n  static fromProxyHttpResponse(response) {\n    let item = ContractResultItem.fromHttpResponse(response);\n    return item;\n  }\n\n  static fromApiHttpResponse(response) {\n    let item = ContractResultItem.fromHttpResponse(response);\n    item.data = Buffer.from(item.data, \"base64\").toString();\n    item.callType = Number(item.callType);\n    return item;\n  }\n\n  static fromHttpResponse(response) {\n    let item = new ContractResultItem();\n    item.hash = new transaction_1.TransactionHash(response.hash);\n    item.nonce = new nonce_1.Nonce(response.nonce || 0);\n    item.value = balance_1.Balance.fromString(response.value);\n    item.receiver = new address_1.Address(response.receiver);\n    item.sender = new address_1.Address(response.sender);\n    item.previousHash = new transaction_1.TransactionHash(response.prevTxHash);\n    item.originalHash = new transaction_1.TransactionHash(response.originalTxHash);\n    item.gasLimit = new networkParams_1.GasLimit(response.gasLimit);\n    item.gasPrice = new networkParams_1.GasPrice(response.gasPrice);\n    item.data = response.data || \"\";\n    item.callType = response.callType;\n    item.returnMessage = response.returnMessage;\n    return item;\n  }\n\n  getOutputUntyped() {\n    // TODO: Decide how to parse \"data\" (immediate results vs. other results).\n    throw new Error(\"Method not implemented.\");\n  }\n\n  getOutputTyped(_endpointDefinition) {\n    // TODO: Decide how to parse \"data\" (immediate results vs. other results).\n    throw new Error(\"Method not implemented.\");\n  }\n\n}\n\nexports.ContractResultItem = ContractResultItem;\n\nclass ContractQueryResponse {\n  constructor() {\n    this.returnData = [];\n    this.returnCode = smartcontracts_1.ReturnCode.None;\n    this.returnMessage = \"\";\n    this.gasUsed = new networkParams_1.GasLimit(0);\n  }\n\n  static fromHttpResponse(payload) {\n    let response = new ContractQueryResponse();\n    let gasRemaining = new bignumber_js_1.BigNumber(payload[\"gasRemaining\"] || payload[\"GasRemaining\"] || 0);\n    response.returnData = payload[\"returnData\"] || [];\n    response.returnCode = payload[\"returnCode\"] || \"\";\n    response.returnMessage = payload[\"returnMessage\"] || \"\";\n    response.gasUsed = new networkParams_1.GasLimit(smartcontracts_1.MaxUint64.minus(gasRemaining).toNumber());\n    return response;\n  }\n\n  getOutputUntyped() {\n    let buffers = this.returnData.map(item => Buffer.from(item || \"\", \"base64\"));\n    return buffers;\n  }\n\n  getOutputTyped(endpointDefinition) {\n    let buffers = this.getOutputUntyped();\n    let values = new smartcontracts_1.ArgSerializer().buffersToValues(buffers, endpointDefinition.output);\n    return values;\n  }\n\n}\n\nexports.ContractQueryResponse = ContractQueryResponse;","map":{"version":3,"sources":["../../src/networkProvider/contractResults.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContractQueryResponse = exports.ContractResultItem = exports.ContractResults = void 0;\nconst bignumber_js_1 = require(\"bignumber.js\");\nconst address_1 = require(\"../address\");\nconst balance_1 = require(\"../balance\");\nconst hash_1 = require(\"../hash\");\nconst networkParams_1 = require(\"../networkParams\");\nconst nonce_1 = require(\"../nonce\");\nconst smartcontracts_1 = require(\"../smartcontracts\");\nconst transaction_1 = require(\"../transaction\");\nclass ContractResults {\n    constructor(items) {\n        this.items = items;\n        this.items.sort(function (a, b) {\n            return a.nonce.valueOf() - b.nonce.valueOf();\n        });\n    }\n    static empty() {\n        return new ContractResults([]);\n    }\n    static fromProxyHttpResponse(results) {\n        let items = results.map(item => ContractResultItem.fromProxyHttpResponse(item));\n        return new ContractResults(items);\n    }\n    static fromApiHttpResponse(results) {\n        let items = results.map(item => ContractResultItem.fromApiHttpResponse(item));\n        return new ContractResults(items);\n    }\n}\nexports.ContractResults = ContractResults;\nclass ContractResultItem {\n    constructor() {\n        this.hash = hash_1.Hash.empty();\n        this.nonce = new nonce_1.Nonce(0);\n        this.value = balance_1.Balance.Zero();\n        this.receiver = new address_1.Address();\n        this.sender = new address_1.Address();\n        this.data = \"\";\n        this.previousHash = hash_1.Hash.empty();\n        this.originalHash = hash_1.Hash.empty();\n        this.gasLimit = new networkParams_1.GasLimit(0);\n        this.gasPrice = new networkParams_1.GasPrice(0);\n        this.callType = 0;\n        this.returnMessage = \"\";\n    }\n    static fromProxyHttpResponse(response) {\n        let item = ContractResultItem.fromHttpResponse(response);\n        return item;\n    }\n    static fromApiHttpResponse(response) {\n        let item = ContractResultItem.fromHttpResponse(response);\n        item.data = Buffer.from(item.data, \"base64\").toString();\n        item.callType = Number(item.callType);\n        return item;\n    }\n    static fromHttpResponse(response) {\n        let item = new ContractResultItem();\n        item.hash = new transaction_1.TransactionHash(response.hash);\n        item.nonce = new nonce_1.Nonce(response.nonce || 0);\n        item.value = balance_1.Balance.fromString(response.value);\n        item.receiver = new address_1.Address(response.receiver);\n        item.sender = new address_1.Address(response.sender);\n        item.previousHash = new transaction_1.TransactionHash(response.prevTxHash);\n        item.originalHash = new transaction_1.TransactionHash(response.originalTxHash);\n        item.gasLimit = new networkParams_1.GasLimit(response.gasLimit);\n        item.gasPrice = new networkParams_1.GasPrice(response.gasPrice);\n        item.data = response.data || \"\";\n        item.callType = response.callType;\n        item.returnMessage = response.returnMessage;\n        return item;\n    }\n    getOutputUntyped() {\n        // TODO: Decide how to parse \"data\" (immediate results vs. other results).\n        throw new Error(\"Method not implemented.\");\n    }\n    getOutputTyped(_endpointDefinition) {\n        // TODO: Decide how to parse \"data\" (immediate results vs. other results).\n        throw new Error(\"Method not implemented.\");\n    }\n}\nexports.ContractResultItem = ContractResultItem;\nclass ContractQueryResponse {\n    constructor() {\n        this.returnData = [];\n        this.returnCode = smartcontracts_1.ReturnCode.None;\n        this.returnMessage = \"\";\n        this.gasUsed = new networkParams_1.GasLimit(0);\n    }\n    static fromHttpResponse(payload) {\n        let response = new ContractQueryResponse();\n        let gasRemaining = new bignumber_js_1.BigNumber(payload[\"gasRemaining\"] || payload[\"GasRemaining\"] || 0);\n        response.returnData = payload[\"returnData\"] || [];\n        response.returnCode = payload[\"returnCode\"] || \"\";\n        response.returnMessage = payload[\"returnMessage\"] || \"\";\n        response.gasUsed = new networkParams_1.GasLimit(smartcontracts_1.MaxUint64.minus(gasRemaining).toNumber());\n        return response;\n    }\n    getOutputUntyped() {\n        let buffers = this.returnData.map((item) => Buffer.from(item || \"\", \"base64\"));\n        return buffers;\n    }\n    getOutputTyped(endpointDefinition) {\n        let buffers = this.getOutputUntyped();\n        let values = new smartcontracts_1.ArgSerializer().buffersToValues(buffers, endpointDefinition.output);\n        return values;\n    }\n}\nexports.ContractQueryResponse = ContractQueryResponse;\n//# sourceMappingURL=contractResults.js.map"]},"metadata":{},"sourceType":"script"}