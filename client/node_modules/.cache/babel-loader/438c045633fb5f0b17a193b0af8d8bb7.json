{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/pages/Marketplace/Components/Buy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { transactionServices, refreshAccount } from '@elrondnetwork/dapp-core';\nimport styles from '../styles.module.scss';\nimport { reciveAddress } from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Buy = ({\n  item,\n  socket\n}) => {\n  _s();\n\n  const [transactionSessionId, setTransactionSessionId] = useState(null);\n  const {\n    sendTransactions\n  } = transactionServices;\n  const txSuccess = transactionServices.useGetSuccessfulTransactions();\n  const data = {\n    itemId: item._id,\n    name: item.name\n  };\n  useEffect(() => {\n    for (let i = 0; i < txSuccess.successfulTransactionsArray.length; i++) {\n      if (txSuccess.successfulTransactionsArray[i][0] === transactionSessionId) {\n        console.log(data);\n      }\n    }\n  }, [txSuccess.successfulTransactionsArray.length]);\n\n  const sendTransaction = async () => {\n    const transaction = {\n      value: 1,\n      gasLimit: '70000',\n      data: 'QG9r',\n      receiver: reciveAddress\n    };\n    await refreshAccount();\n    const {\n      sessionId\n    } = await sendTransactions({\n      transactions: transaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: true\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: styles.buyBtn,\n    onClick: sendTransaction,\n    children: [item.price, \" $ESTAR\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Buy, \"hqJduuhX1pX3YKhb4PFWXJy2WaU=\", false, function () {\n  return [transactionServices.useGetSuccessfulTransactions];\n});\n\n_c = Buy;\nexport default Buy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Buy\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/pages/Marketplace/Components/Buy.js"],"names":["React","useState","useEffect","transactionServices","refreshAccount","styles","reciveAddress","Buy","item","socket","transactionSessionId","setTransactionSessionId","sendTransactions","txSuccess","useGetSuccessfulTransactions","data","itemId","_id","name","i","successfulTransactionsArray","length","console","log","sendTransaction","transaction","value","gasLimit","receiver","sessionId","transactions","transactionsDisplayInfo","processingMessage","errorMessage","successMessage","redirectAfterSign","buyBtn","price"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,mBAAT,EAA8BC,cAA9B,QAAoD,0BAApD;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,aAAT,QAA8B,QAA9B;;;AAGA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAsB;AAAA;;AAEhC,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDV,QAAQ,CAAC,IAAD,CAAhE;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAuBT,mBAA7B;AACA,QAAMU,SAAS,GAAGV,mBAAmB,CAACW,4BAApB,EAAlB;AAEA,QAAMC,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAER,IAAI,CAACS,GADF;AAEXC,IAAAA,IAAI,EAAEV,IAAI,CAACU;AAFA,GAAb;AAKAhB,EAAAA,SAAS,CAAC,MAAM;AACd,SAAI,IAAIiB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,SAAS,CAACO,2BAAV,CAAsCC,MAAzD,EAAiEF,CAAC,EAAlE,EAAsE;AACpE,UAAGN,SAAS,CAACO,2BAAV,CAAsCD,CAAtC,EAAyC,CAAzC,MAAgDT,oBAAnD,EAAyE;AACvEY,QAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACD;AACF;AACF,GANQ,EAMN,CAACF,SAAS,CAACO,2BAAV,CAAsCC,MAAvC,CANM,CAAT;;AAQA,QAAMG,eAAe,GAAG,YAAY;AAClC,UAAMC,WAAW,GAAG;AAClBC,MAAAA,KAAK,EAAE,CADW;AAElBC,MAAAA,QAAQ,EAAE,OAFQ;AAGlBZ,MAAAA,IAAI,EAAE,MAHY;AAIlBa,MAAAA,QAAQ,EAAEtB;AAJQ,KAApB;AAMA,UAAMF,cAAc,EAApB;AAEA,UAAM;AAAEyB,MAAAA;AAAF,QAAgB,MAAMjB,gBAAgB,CAAC;AAC3CkB,MAAAA,YAAY,EAAEL,WAD6B;AAE3CM,MAAAA,uBAAuB,EAAE;AACvBC,QAAAA,iBAAiB,EAAE,wBADI;AAEvBC,QAAAA,YAAY,EAAE,6BAFS;AAGvBC,QAAAA,cAAc,EAAE;AAHO,OAFkB;AAO3CC,MAAAA,iBAAiB,EAAE;AAPwB,KAAD,CAA5C;;AASA,QAAIN,SAAS,IAAI,IAAjB,EAAuB;AACrBlB,MAAAA,uBAAuB,CAACkB,SAAD,CAAvB;AACD;AACF,GArBD;;AAuBA,sBAAO;AACE,IAAA,SAAS,EAAExB,MAAM,CAAC+B,MADpB;AAEE,IAAA,OAAO,EAAEZ,eAFX;AAAA,eAIGhB,IAAI,CAAC6B,KAJR;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAMD,CAhDD;;GAAM9B,G;UAIcJ,mBAAmB,CAACW,4B;;;KAJlCP,G;AAkDN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { transactionServices, refreshAccount } from '@elrondnetwork/dapp-core';\n\nimport styles from '../styles.module.scss';\nimport { reciveAddress } from 'config';\n\n\nconst Buy = ({ item, socket }) => {\n\n  const [transactionSessionId, setTransactionSessionId] = useState(null);\n  const { sendTransactions } = transactionServices;\n  const txSuccess = transactionServices.useGetSuccessfulTransactions();\n\n  const data = {\n    itemId: item._id,\n    name: item.name\n  }\n\n  useEffect(() => {\n    for(let i = 0; i < txSuccess.successfulTransactionsArray.length; i++) {\n      if(txSuccess.successfulTransactionsArray[i][0] === transactionSessionId) {\n        console.log(data);\n      }\n    }\n  }, [txSuccess.successfulTransactionsArray.length])\n\n  const sendTransaction = async () => {\n    const transaction = {\n      value: 1,\n      gasLimit: '70000',\n      data: 'QG9r',\n      receiver: reciveAddress\n    };\n    await refreshAccount();\n\n    const { sessionId } = await sendTransactions({\n      transactions: transaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: true\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  return <button\n           className={styles.buyBtn}\n           onClick={sendTransaction}\n         >\n           {item.price} $ESTAR\n         </button>\n}\n\nexport default Buy;\n"]},"metadata":{},"sourceType":"module"}