{"ast":null,"code":"import BigNumber from 'bignumber.js';\nexport default function nominate(input, paramDenomination) {\n  const parts = input.toString().split('.');\n  const denomination = paramDenomination !== undefined ? paramDenomination : 18;\n\n  if (parts[1]) {\n    // remove trailing zeros\n    while (parts[1].substring(parts[1].length - 1) === '0' && parts[1].length > 1) {\n      parts[1] = parts[1].substring(0, parts[1].length - 1);\n    }\n  }\n\n  let count = parts[1] ? denomination - parts[1].length : denomination;\n  count = count < 0 ? 0 : count;\n  let transformed = parts.join('') + '0'.repeat(count); // remove beginning zeros\n\n  while (transformed.substring(0, 1) === '0' && transformed.length > 1) {\n    transformed = transformed.substring(1);\n  }\n\n  return transformed;\n}\nexport const nominateVal = value => {\n  let perc = (parseFloat(value) * 100).toString(16);\n\n  if (perc.length % 2 !== 0) {\n    perc = '0' + perc;\n  }\n\n  return perc;\n};\nexport const nominateValToHex = value => {\n  let val = value && value.length > 0 ? new BigNumber(nominate(value)).toString(16) : '0';\n\n  if (val.length % 2 !== 0) {\n    val = '0' + val;\n  }\n\n  return val;\n};","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/helpers/nominate.ts"],"names":["BigNumber","nominate","input","paramDenomination","parts","toString","split","denomination","undefined","substring","length","count","transformed","join","repeat","nominateVal","value","perc","parseFloat","nominateValToHex","val"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAiCC,iBAAjC,EAA6D;AAC1E,QAAMC,KAAK,GAAGF,KAAK,CAACG,QAAN,GAAiBC,KAAjB,CAAuB,GAAvB,CAAd;AACA,QAAMC,YAAY,GAAGJ,iBAAiB,KAAKK,SAAtB,GAAkCL,iBAAlC,GAAsD,EAA3E;;AAEA,MAAIC,KAAK,CAAC,CAAD,CAAT,EAAc;AACZ;AACA,WACEA,KAAK,CAAC,CAAD,CAAL,CAASK,SAAT,CAAmBL,KAAK,CAAC,CAAD,CAAL,CAASM,MAAT,GAAkB,CAArC,MAA4C,GAA5C,IACAN,KAAK,CAAC,CAAD,CAAL,CAASM,MAAT,GAAkB,CAFpB,EAGE;AACAN,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASK,SAAT,CAAmB,CAAnB,EAAsBL,KAAK,CAAC,CAAD,CAAL,CAASM,MAAT,GAAkB,CAAxC,CAAX;AACD;AACF;;AAED,MAAIC,KAAK,GAAGP,KAAK,CAAC,CAAD,CAAL,GAAWG,YAAY,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASM,MAAnC,GAA4CH,YAAxD;AAEAI,EAAAA,KAAK,GAAGA,KAAK,GAAG,CAAR,GAAY,CAAZ,GAAgBA,KAAxB;AAEA,MAAIC,WAAW,GAAGR,KAAK,CAACS,IAAN,CAAW,EAAX,IAAiB,IAAIC,MAAJ,CAAWH,KAAX,CAAnC,CAlB0E,CAoB1E;;AACA,SAAOC,WAAW,CAACH,SAAZ,CAAsB,CAAtB,EAAyB,CAAzB,MAAgC,GAAhC,IAAuCG,WAAW,CAACF,MAAZ,GAAqB,CAAnE,EAAsE;AACpEE,IAAAA,WAAW,GAAGA,WAAW,CAACH,SAAZ,CAAsB,CAAtB,CAAd;AACD;;AAED,SAAOG,WAAP;AACD;AAED,OAAO,MAAMG,WAAW,GAAIC,KAAD,IAAmB;AAC5C,MAAIC,IAAI,GAAG,CAACC,UAAU,CAACF,KAAD,CAAV,GAAoB,GAArB,EAA0BX,QAA1B,CAAmC,EAAnC,CAAX;;AACA,MAAIY,IAAI,CAACP,MAAL,GAAc,CAAd,KAAoB,CAAxB,EAA2B;AACzBO,IAAAA,IAAI,GAAG,MAAMA,IAAb;AACD;;AACD,SAAOA,IAAP;AACD,CANM;AAQP,OAAO,MAAME,gBAAgB,GAAIH,KAAD,IAAmB;AACjD,MAAII,GAAG,GACLJ,KAAK,IAAIA,KAAK,CAACN,MAAN,GAAe,CAAxB,GACI,IAAIV,SAAJ,CAAcC,QAAQ,CAACe,KAAD,CAAtB,EAA+BX,QAA/B,CAAwC,EAAxC,CADJ,GAEI,GAHN;;AAKA,MAAIe,GAAG,CAACV,MAAJ,GAAa,CAAb,KAAmB,CAAvB,EAA0B;AACxBU,IAAAA,GAAG,GAAG,MAAMA,GAAZ;AACD;;AAED,SAAOA,GAAP;AACD,CAXM","sourcesContent":["import BigNumber from 'bignumber.js';\n\nexport default function nominate(input: string, paramDenomination?: number) {\n  const parts = input.toString().split('.');\n  const denomination = paramDenomination !== undefined ? paramDenomination : 18;\n\n  if (parts[1]) {\n    // remove trailing zeros\n    while (\n      parts[1].substring(parts[1].length - 1) === '0' &&\n      parts[1].length > 1\n    ) {\n      parts[1] = parts[1].substring(0, parts[1].length - 1);\n    }\n  }\n\n  let count = parts[1] ? denomination - parts[1].length : denomination;\n\n  count = count < 0 ? 0 : count;\n\n  let transformed = parts.join('') + '0'.repeat(count);\n\n  // remove beginning zeros\n  while (transformed.substring(0, 1) === '0' && transformed.length > 1) {\n    transformed = transformed.substring(1);\n  }\n\n  return transformed;\n}\n\nexport const nominateVal = (value: string) => {\n  let perc = (parseFloat(value) * 100).toString(16);\n  if (perc.length % 2 !== 0) {\n    perc = '0' + perc;\n  }\n  return perc;\n};\n\nexport const nominateValToHex = (value: string) => {\n  let val =\n    value && value.length > 0\n      ? new BigNumber(nominate(value)).toString(16)\n      : '0';\n\n  if (val.length % 2 !== 0) {\n    val = '0' + val;\n  }\n\n  return val;\n};\n"]},"metadata":{},"sourceType":"module"}