{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { string } from 'yup';\nimport { network } from 'config';\n\nconst undelegateValidator = input => string().required('Required').test('minimum', 'Value must be greater than or equal to 1.', (value = '0') => new BigNumber(value).isGreaterThanOrEqualTo(1)).test('maximum', `You need to set a value under ${input} ${network.egldLabel}.`, (value = '0') => parseFloat(value) <= parseFloat(input));\n\nconst delegateValidator = (input, limit) => undelegateValidator(input).test('uncapable', `Max delegation cap reached. That is the maximum amount you can delegate: ${limit} ${network.egldLabel}`, (value = '0') => parseFloat(value) <= parseFloat(limit));\n\nexport { delegateValidator, undelegateValidator };","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Stake/helpers/delegationValidators.ts"],"names":["BigNumber","string","network","undelegateValidator","input","required","test","value","isGreaterThanOrEqualTo","egldLabel","parseFloat","delegateValidator","limit"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,MAAT,QAAuB,KAAvB;AACA,SAASC,OAAT,QAAwB,QAAxB;;AAEA,MAAMC,mBAAmB,GAAIC,KAAD,IAC1BH,MAAM,GACHI,QADH,CACY,UADZ,EAEGC,IAFH,CAGI,SAHJ,EAII,2CAJJ,EAKI,CAACC,KAAK,GAAG,GAAT,KAAiB,IAAIP,SAAJ,CAAcO,KAAd,EAAqBC,sBAArB,CAA4C,CAA5C,CALrB,EAOGF,IAPH,CAQI,SARJ,EASK,iCAAgCF,KAAM,IAAGF,OAAO,CAACO,SAAU,GAThE,EAUI,CAACF,KAAK,GAAG,GAAT,KAAiBG,UAAU,CAACH,KAAD,CAAV,IAAqBG,UAAU,CAACN,KAAD,CAVpD,CADF;;AAcA,MAAMO,iBAAiB,GAAG,CAACP,KAAD,EAAgBQ,KAAhB,KACxBT,mBAAmB,CAACC,KAAD,CAAnB,CAA2BE,IAA3B,CACE,WADF,EAEG,4EAA2EM,KAAM,IAAGV,OAAO,CAACO,SAAU,EAFzG,EAGE,CAACF,KAAK,GAAG,GAAT,KAAiBG,UAAU,CAACH,KAAD,CAAV,IAAqBG,UAAU,CAACE,KAAD,CAHlD,CADF;;AAOA,SAASD,iBAAT,EAA4BR,mBAA5B","sourcesContent":["import BigNumber from 'bignumber.js';\nimport { string } from 'yup';\nimport { network } from 'config';\n\nconst undelegateValidator = (input: string) =>\n  string()\n    .required('Required')\n    .test(\n      'minimum',\n      'Value must be greater than or equal to 1.',\n      (value = '0') => new BigNumber(value).isGreaterThanOrEqualTo(1)\n    )\n    .test(\n      'maximum',\n      `You need to set a value under ${input} ${network.egldLabel}.`,\n      (value = '0') => parseFloat(value) <= parseFloat(input)\n    );\n\nconst delegateValidator = (input: string, limit: string) =>\n  undelegateValidator(input).test(\n    'uncapable',\n    `Max delegation cap reached. That is the maximum amount you can delegate: ${limit} ${network.egldLabel}`,\n    (value = '0') => parseFloat(value) <= parseFloat(limit)\n  );\n\nexport { delegateValidator, undelegateValidator };\n"]},"metadata":{},"sourceType":"module"}