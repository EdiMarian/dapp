{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringValue = exports.StringType = void 0;\n\nvar types_1 = require(\"./types\");\n\nvar StringType = /*#__PURE__*/function (_types_1$PrimitiveTyp) {\n  _inherits(StringType, _types_1$PrimitiveTyp);\n\n  var _super = _createSuper(StringType);\n\n  function StringType() {\n    _classCallCheck(this, StringType);\n\n    return _super.call(this, \"utf-8 string\");\n  }\n\n  return StringType;\n}(types_1.PrimitiveType);\n\nexports.StringType = StringType;\n\nvar StringValue = /*#__PURE__*/function (_types_1$PrimitiveVal) {\n  _inherits(StringValue, _types_1$PrimitiveVal);\n\n  var _super2 = _createSuper(StringValue);\n\n  function StringValue(value) {\n    var _this;\n\n    _classCallCheck(this, StringValue);\n\n    _this = _super2.call(this, new StringType());\n    _this.value = value;\n    return _this;\n  }\n  /**\n   * Creates a StringValue from a utf-8 string.\n   */\n\n\n  _createClass(StringValue, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return this.value.length;\n    }\n    /**\n     * Returns whether two objects have the same value.\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.value === other.value;\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.value;\n    }\n  }], [{\n    key: \"fromUTF8\",\n    value: function fromUTF8(value) {\n      return new StringValue(value);\n    }\n    /**\n     * Creates a StringValue from a hex-encoded string.\n     */\n\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(value) {\n      var decodedValue = Buffer.from(value, \"hex\").toString();\n      return new StringValue(decodedValue);\n    }\n  }]);\n\n  return StringValue;\n}(types_1.PrimitiveValue);\n\nexports.StringValue = StringValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/string.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;IAEa,U;;;;;AACT,wBAAA;AAAA;;AAAA,6BACU,cADV;AAEC;;;EAH2B,OAAA,CAAA,a;;AAAhC,OAAA,CAAA,UAAA,GAAA,UAAA;;IAMa,W;;;;;AAGT,uBAAY,KAAZ,EAAyB;AAAA;;AAAA;;AACrB,+BAAM,IAAI,UAAJ,EAAN;AACA,UAAK,KAAL,GAAa,KAAb;AAFqB;AAGxB;AAED;;AAEG;;;;;WAaH,qBAAS;AACL,aAAO,KAAK,KAAL,CAAW,MAAlB;AACH;AAED;;AAEG;;;;WACH,gBAAO,KAAP,EAAyB;AACrB,aAAO,KAAK,KAAL,KAAe,KAAK,CAAC,KAA5B;AACH;;;WAED,mBAAO;AACH,aAAO,KAAK,KAAZ;AACH;;;WAzBD,kBAAgB,KAAhB,EAA6B;AACzB,aAAO,IAAI,WAAJ,CAAgB,KAAhB,CAAP;AACH;AAED;;AAEG;;;;WACH,iBAAe,KAAf,EAA4B;AACxB,UAAI,YAAY,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,KAAnB,EAA0B,QAA1B,EAAnB;AACA,aAAO,IAAI,WAAJ,CAAgB,YAAhB,CAAP;AACH;;;;EArB4B,OAAA,CAAA,c;;AAAjC,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StringValue = exports.StringType = void 0;\nconst types_1 = require(\"./types\");\nclass StringType extends types_1.PrimitiveType {\n    constructor() {\n        super(\"utf-8 string\");\n    }\n}\nexports.StringType = StringType;\nclass StringValue extends types_1.PrimitiveValue {\n    constructor(value) {\n        super(new StringType());\n        this.value = value;\n    }\n    /**\n     * Creates a StringValue from a utf-8 string.\n     */\n    static fromUTF8(value) {\n        return new StringValue(value);\n    }\n    /**\n     * Creates a StringValue from a hex-encoded string.\n     */\n    static fromHex(value) {\n        let decodedValue = Buffer.from(value, \"hex\").toString();\n        return new StringValue(decodedValue);\n    }\n    getLength() {\n        return this.value.length;\n    }\n    /**\n     * Returns whether two objects have the same value.\n     */\n    equals(other) {\n        return this.value === other.value;\n    }\n    valueOf() {\n        return this.value;\n    }\n}\nexports.StringValue = StringValue;\n//# sourceMappingURL=string.js.map"]},"metadata":{},"sourceType":"script"}