{"ast":null,"code":"import*as React from'react';import{transactionServices}from'@elrondnetwork/dapp-core';var TxTracking=function TxTracking(){var PendingTx=transactionServices.useGetPendingTransactions();var FailedTx=transactionServices.useGetFailedTransactions();var SuccessfulTx=transactionServices.useGetSuccessfulTransactions();var CompletedTx=transactionServices.useGetCompletedTransactions();// ==> CompletedTx is for success tx with SmartContract calls\nReact.useEffect(function(){if(PendingTx.pendingTransactionsArray.length>0){CheckPending();}},[PendingTx.pendingTransactionsArray.length]);React.useEffect(function(){if(FailedTx.failedTransactionsArray.length>0){CheckFailed();}},[FailedTx.failedTransactionsArray.length]);React.useEffect(function(){if(SuccessfulTx.successfulTransactionsArray.length>0){CheckSuccessful();}},[SuccessfulTx.successfulTransactionsArray.length]);React.useEffect(function(){if(CompletedTx.completedTransactionsArray.length>0){CheckCompletedTx();}},[CompletedTx.completedTransactionsArray.length]);function CheckPending(){//     console.log('>>>>> PendingTx : ', PendingTx);\nvar PendingTxArray=PendingTx.pendingTransactionsArray;for(var i=0;i<PendingTxArray.length;i++){var transactionSessionId=PendingTxArray[i][0];var transaction=PendingTxArray[i][1].transactions[0];// ==> transactions[0] because we create only 1 tx by transactionSessionId\n// console.log(\n//   '>>> PendingTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n//   transaction\n// );\n//// TODO : create the tx in the database if the tx don't exist\n}}function CheckFailed(){//     console.log('>>>>> FailedTx : ', FailedTx);\nvar FailedTxArray=FailedTx.failedTransactionsArray;for(var i=0;i<FailedTxArray.length;i++){var transactionSessionId=FailedTxArray[i][0];var transaction=FailedTxArray[i][1].transactions[0];// ==> transactions[0] because we create only 1 tx by transactionSessionId\n// console.log(\n//   '>>> FailedTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n//   transaction\n// );\n//// TODO : update the status of the tx in the database\n//// Remove the tx with the corresponding transactionSessionId from failedTransactionsArray\n//// ==> by doing so, the toast with a failed status will not be shown\n//transactionServices.removeSignedTransaction(transactionSessionId);\n}}function CheckSuccessful(){//     console.log('>>>>> SuccessfulTx : ', SuccessfulTx);\nvar SuccessfulTxArray=SuccessfulTx.successfulTransactionsArray;for(var i=0;i<SuccessfulTxArray.length;i++){var transactionSessionId=SuccessfulTxArray[i][0];var transaction=SuccessfulTxArray[i][1].transactions[0];// ==> transactions[0] because we create only 1 tx by transactionSessionId\n// console.log(\n//   '>>> SuccessfulTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n//   transaction\n// );\n//// TODO : update the status of the tx in the database\n//// Remove the tx with the corresponding transactionSessionId from successfulTransactionsArray\n//// ==> by doing so, the toast with a successful status will not be shown\n//transactionServices.removeSignedTransaction(transactionSessionId);\n}}function CheckCompletedTx(){//  console.log('>>>>> CompletedTx : ', CompletedTx);\nvar CompletedTxTxArray=CompletedTx.completedTransactionsArray;for(var i=0;i<CompletedTxTxArray.length;i++){var transactionSessionId=CompletedTxTxArray[i][0];var transaction=CompletedTxTxArray[i][1].transactions[0];// ==> transactions[0] because we create only 1 tx by transactionSessionId\n// console.log(\n//   '>>> CompletedTxTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n//   transaction\n// );\n//// TODO : update the status of the tx in the database\n//// Remove the tx with the corresponding transactionSessionId from completedTransactionsArray\n//// ==> by doing so, the toast with a successful status will not be shown\n//transactionServices.removeSignedTransaction(transactionSessionId);\n}}return SuccessfulTx;};export default TxTracking;","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/components/Layout/TxTracking/index.tsx"],"names":["React","transactionServices","TxTracking","PendingTx","useGetPendingTransactions","FailedTx","useGetFailedTransactions","SuccessfulTx","useGetSuccessfulTransactions","CompletedTx","useGetCompletedTransactions","useEffect","pendingTransactionsArray","length","CheckPending","failedTransactionsArray","CheckFailed","successfulTransactionsArray","CheckSuccessful","completedTransactionsArray","CheckCompletedTx","PendingTxArray","i","transactionSessionId","transaction","transactions","FailedTxArray","SuccessfulTxArray","CompletedTxTxArray"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { transactionServices } from '@elrondnetwork/dapp-core';\n\nconst TxTracking = () => {\n  const PendingTx = transactionServices.useGetPendingTransactions();\n  const FailedTx = transactionServices.useGetFailedTransactions();\n  const SuccessfulTx = transactionServices.useGetSuccessfulTransactions();\n  const CompletedTx = transactionServices.useGetCompletedTransactions(); // ==> CompletedTx is for success tx with SmartContract calls\n\n  React.useEffect(() => {\n    if (PendingTx.pendingTransactionsArray.length > 0) {\n      CheckPending();\n    }\n  }, [PendingTx.pendingTransactionsArray.length]);\n\n  React.useEffect(() => {\n    if (FailedTx.failedTransactionsArray.length > 0) {\n      CheckFailed();\n    }\n  }, [FailedTx.failedTransactionsArray.length]);\n\n  React.useEffect(() => {\n    if (SuccessfulTx.successfulTransactionsArray.length > 0) {\n      CheckSuccessful();\n    }\n  }, [SuccessfulTx.successfulTransactionsArray.length]);\n\n  React.useEffect(() => {\n    if (CompletedTx.completedTransactionsArray.length > 0) {\n      CheckCompletedTx();\n    }\n  }, [CompletedTx.completedTransactionsArray.length]);\n\n  function CheckPending() {\n    //     console.log('>>>>> PendingTx : ', PendingTx);\n    const PendingTxArray = PendingTx.pendingTransactionsArray;\n    for (let i = 0; i < PendingTxArray.length; i++) {\n      const transactionSessionId = PendingTxArray[i][0];\n      const transaction = PendingTxArray[i][1].transactions[0]; // ==> transactions[0] because we create only 1 tx by transactionSessionId\n\n      // console.log(\n      //   '>>> PendingTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n      //   transaction\n      // );\n\n      //// TODO : create the tx in the database if the tx don't exist\n    }\n  }\n\n  function CheckFailed() {\n    //     console.log('>>>>> FailedTx : ', FailedTx);\n    const FailedTxArray = FailedTx.failedTransactionsArray;\n    for (let i = 0; i < FailedTxArray.length; i++) {\n      const transactionSessionId = FailedTxArray[i][0];\n      const transaction = FailedTxArray[i][1].transactions[0]; // ==> transactions[0] because we create only 1 tx by transactionSessionId\n\n      // console.log(\n      //   '>>> FailedTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n      //   transaction\n      // );\n\n      //// TODO : update the status of the tx in the database\n\n      //// Remove the tx with the corresponding transactionSessionId from failedTransactionsArray\n      //// ==> by doing so, the toast with a failed status will not be shown\n      //transactionServices.removeSignedTransaction(transactionSessionId);\n    }\n  }\n\n  function CheckSuccessful() {\n    //     console.log('>>>>> SuccessfulTx : ', SuccessfulTx);\n    const SuccessfulTxArray = SuccessfulTx.successfulTransactionsArray;\n    for (let i = 0; i < SuccessfulTxArray.length; i++) {\n      const transactionSessionId = SuccessfulTxArray[i][0];\n      const transaction = SuccessfulTxArray[i][1].transactions[0]; // ==> transactions[0] because we create only 1 tx by transactionSessionId\n\n      // console.log(\n      //   '>>> SuccessfulTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n      //   transaction\n      // );\n\n      //// TODO : update the status of the tx in the database\n\n      //// Remove the tx with the corresponding transactionSessionId from successfulTransactionsArray\n      //// ==> by doing so, the toast with a successful status will not be shown\n      //transactionServices.removeSignedTransaction(transactionSessionId);\n    }\n  }\n\n  function CheckCompletedTx() {\n    //  console.log('>>>>> CompletedTx : ', CompletedTx);\n    const CompletedTxTxArray = CompletedTx.completedTransactionsArray;\n    for (let i = 0; i < CompletedTxTxArray.length; i++) {\n      const transactionSessionId = CompletedTxTxArray[i][0];\n      const transaction = CompletedTxTxArray[i][1].transactions[0]; // ==> transactions[0] because we create only 1 tx by transactionSessionId\n\n      // console.log(\n      //   '>>> CompletedTxTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n      //   transaction\n      // );\n\n      //// TODO : update the status of the tx in the database\n\n      //// Remove the tx with the corresponding transactionSessionId from completedTransactionsArray\n      //// ==> by doing so, the toast with a successful status will not be shown\n      //transactionServices.removeSignedTransaction(transactionSessionId);\n    }\n  }\n  return SuccessfulTx;\n};\n\nexport default TxTracking;\n"]},"metadata":{},"sourceType":"module"}