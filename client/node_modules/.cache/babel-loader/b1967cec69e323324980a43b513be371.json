{"ast":null,"code":"import _objectSpread from\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";var reducer=function reducer(state,action){switch(action.type){case'getUsersNumber':{return _objectSpread(_objectSpread({},state),{},{usersNumber:action.usersNumber});}case'getContractDetails':{return _objectSpread(_objectSpread({},state),{},{contractDetails:action.contractDetails});}case'getNodesNumber':{return _objectSpread(_objectSpread({},state),{},{nodesNumber:action.nodesNumber});}case'getTotalActiveStake':{return _objectSpread(_objectSpread({},state),{},{totalActiveStake:action.totalActiveStake});}case'getUserActiveStake':{return _objectSpread(_objectSpread({},state),{},{userActiveStake:action.userActiveStake});}case'getUndelegatedStakeList':{return _objectSpread(_objectSpread({},state),{},{undelegatedStakeList:action.undelegatedStakeList});}case'getUserClaimableRewards':{return _objectSpread(_objectSpread({},state),{},{userClaimableRewards:action.userClaimableRewards});}case'getNetworkConfig':{return _objectSpread(_objectSpread({},state),{},{networkConfig:action.networkConfig});}case'getNetworkStatus':{return _objectSpread(_objectSpread({},state),{},{networkStatus:action.networkStatus});}case'getTotalNetworkStake':{return _objectSpread(_objectSpread({},state),{},{totalNetworkStake:action.totalNetworkStake});}case'getAgencyMetaData':{return _objectSpread(_objectSpread({},state),{},{agencyMetaData:action.agencyMetaData});}default:{throw new Error(\"Unhandled action type: \".concat(action));}}};export{reducer};","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/context/reducer.tsx"],"names":["reducer","state","action","type","usersNumber","contractDetails","nodesNumber","totalActiveStake","userActiveStake","undelegatedStakeList","userClaimableRewards","networkConfig","networkStatus","totalNetworkStake","agencyMetaData","Error"],"mappings":"gLAiDA,GAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAmBC,MAAnB,CAAmC,CACjD,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,gBAAL,CAAuB,CACrB,sCACKF,KADL,MAEEG,WAAW,CAAEF,MAAM,CAACE,WAFtB,GAID,CACD,IAAK,oBAAL,CAA2B,CACzB,sCACKH,KADL,MAEEI,eAAe,CAAEH,MAAM,CAACG,eAF1B,GAID,CACD,IAAK,gBAAL,CAAuB,CACrB,sCACKJ,KADL,MAEEK,WAAW,CAAEJ,MAAM,CAACI,WAFtB,GAID,CACD,IAAK,qBAAL,CAA4B,CAC1B,sCACKL,KADL,MAEEM,gBAAgB,CAAEL,MAAM,CAACK,gBAF3B,GAID,CACD,IAAK,oBAAL,CAA2B,CACzB,sCACKN,KADL,MAEEO,eAAe,CAAEN,MAAM,CAACM,eAF1B,GAID,CACD,IAAK,yBAAL,CAAgC,CAC9B,sCACKP,KADL,MAEEQ,oBAAoB,CAAEP,MAAM,CAACO,oBAF/B,GAID,CACD,IAAK,yBAAL,CAAgC,CAC9B,sCACKR,KADL,MAEES,oBAAoB,CAAER,MAAM,CAACQ,oBAF/B,GAID,CACD,IAAK,kBAAL,CAAyB,CACvB,sCACKT,KADL,MAEEU,aAAa,CAAET,MAAM,CAACS,aAFxB,GAID,CACD,IAAK,kBAAL,CAAyB,CACvB,sCACKV,KADL,MAEEW,aAAa,CAAEV,MAAM,CAACU,aAFxB,GAID,CACD,IAAK,sBAAL,CAA6B,CAC3B,sCACKX,KADL,MAEEY,iBAAiB,CAAEX,MAAM,CAACW,iBAF5B,GAID,CACD,IAAK,mBAAL,CAA0B,CACxB,sCACKZ,KADL,MAEEa,cAAc,CAAEZ,MAAM,CAACY,cAFzB,GAID,CACD,QAAS,CACP,KAAM,IAAIC,CAAAA,KAAJ,kCAAoCb,MAApC,EAAN,CACD,CArEH,CAuED,CAxED,CA0EA,OAASF,OAAT","sourcesContent":["import { StateType } from './state';\n\nexport type DispatchType = (action: any) => void;\nexport type ActionType =\n  | {\n      type: 'getUsersNumber';\n      usersNumber: StateType['usersNumber'];\n    }\n  | {\n      type: 'getContractDetails';\n      contractDetails: StateType['contractDetails'];\n    }\n  | {\n      type: 'getNodesNumber';\n      nodesNumber: StateType['nodesNumber'];\n    }\n  | {\n      type: 'getTotalActiveStake';\n      totalActiveStake: StateType['totalActiveStake'];\n    }\n  | {\n      type: 'getUserActiveStake';\n      userActiveStake: StateType['userActiveStake'];\n    }\n  | {\n      type: 'getUndelegatedStakeList';\n      undelegatedStakeList: StateType['undelegatedStakeList'];\n    }\n  | {\n      type: 'getUserClaimableRewards';\n      userClaimableRewards: StateType['userClaimableRewards'];\n    }\n  | {\n      type: 'getNetworkConfig';\n      networkConfig: StateType['networkConfig'];\n    }\n  | {\n      type: 'getNetworkStatus';\n      networkStatus: StateType['networkStatus'];\n    }\n  | {\n      type: 'getTotalNetworkStake';\n      totalNetworkStake: StateType['totalNetworkStake'];\n    }\n  | {\n      type: 'getAgencyMetaData';\n      agencyMetaData: StateType['agencyMetaData'];\n    };\n\nconst reducer = (state: StateType, action: any) => {\n  switch (action.type) {\n    case 'getUsersNumber': {\n      return {\n        ...state,\n        usersNumber: action.usersNumber\n      };\n    }\n    case 'getContractDetails': {\n      return {\n        ...state,\n        contractDetails: action.contractDetails\n      };\n    }\n    case 'getNodesNumber': {\n      return {\n        ...state,\n        nodesNumber: action.nodesNumber\n      };\n    }\n    case 'getTotalActiveStake': {\n      return {\n        ...state,\n        totalActiveStake: action.totalActiveStake\n      };\n    }\n    case 'getUserActiveStake': {\n      return {\n        ...state,\n        userActiveStake: action.userActiveStake\n      };\n    }\n    case 'getUndelegatedStakeList': {\n      return {\n        ...state,\n        undelegatedStakeList: action.undelegatedStakeList\n      };\n    }\n    case 'getUserClaimableRewards': {\n      return {\n        ...state,\n        userClaimableRewards: action.userClaimableRewards\n      };\n    }\n    case 'getNetworkConfig': {\n      return {\n        ...state,\n        networkConfig: action.networkConfig\n      };\n    }\n    case 'getNetworkStatus': {\n      return {\n        ...state,\n        networkStatus: action.networkStatus\n      };\n    }\n    case 'getTotalNetworkStake': {\n      return {\n        ...state,\n        totalNetworkStake: action.totalNetworkStake\n      };\n    }\n    case 'getAgencyMetaData': {\n      return {\n        ...state,\n        agencyMetaData: action.agencyMetaData\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action}`);\n    }\n  }\n};\n\nexport { reducer };\n"]},"metadata":{},"sourceType":"module"}