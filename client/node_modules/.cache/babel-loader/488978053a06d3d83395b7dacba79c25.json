{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { getChainID, transactionServices, useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { ContractFunction, Transaction, TransactionPayload, Balance, GasLimit, ChainID, Address, Nonce, SmartContract } from '@elrondnetwork/erdjs';\nimport { network, delegationContractData } from 'config';\n\nconst useTransaction = () => {\n  _s();\n\n  const {\n    account\n  } = useGetAccountInfo();\n  const chainID = getChainID();\n\n  const sendTransaction = async ({\n    args,\n    value,\n    type\n  }) => {\n    const address = new Address(network.delegationContract);\n    const contract = new SmartContract({\n      address\n    });\n    const delegable = delegationContractData.find(item => item.name === type);\n\n    if (!delegable) {\n      throw new Error('The contract for this action is not defined.');\n    } else {\n      const getFunctionName = () => args === '' ? delegable.data : `${delegable.data}${args}`;\n\n      const getGasLimit = () => {\n        const nodeKeys = args.split('@').slice(1);\n        return delegable.data === 'addNodes' && args ? delegable.gasLimit * (nodeKeys.length / 2) : delegable.gasLimit;\n      };\n\n      const data = TransactionPayload.contractCall().setFunction(new ContractFunction(getFunctionName())).build();\n      const transaction = new Transaction({\n        data,\n        chainID: new ChainID(chainID.valueOf()),\n        receiver: contract.getAddress(),\n        value: Balance.egld(value),\n        gasLimit: new GasLimit(getGasLimit()),\n        nonce: new Nonce(account === null || account === void 0 ? void 0 : account.nonce)\n      });\n      return await transactionServices.sendTransactions({\n        transactions: transaction\n      });\n    }\n  };\n\n  return {\n    sendTransaction\n  };\n};\n\n_s(useTransaction, \"LwqdtxBwDviqQV2vQ3CsuDCZZJw=\", false, function () {\n  return [useGetAccountInfo];\n});\n\nexport default useTransaction;","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/helpers/useTransaction.ts"],"names":["getChainID","transactionServices","useGetAccountInfo","ContractFunction","Transaction","TransactionPayload","Balance","GasLimit","ChainID","Address","Nonce","SmartContract","network","delegationContractData","useTransaction","account","chainID","sendTransaction","args","value","type","address","delegationContract","contract","delegable","find","item","name","Error","getFunctionName","data","getGasLimit","nodeKeys","split","slice","gasLimit","length","contractCall","setFunction","build","transaction","valueOf","receiver","getAddress","egld","nonce","sendTransactions","transactions"],"mappings":";;AAAA,SACEA,UADF,EAEEC,mBAFF,EAGEC,iBAHF,QAIO,0BAJP;AAKA,SACEC,gBADF,EAEEC,WAFF,EAGEC,kBAHF,EAIEC,OAJF,EAKEC,QALF,EAMEC,OANF,EAOEC,OAPF,EAQEC,KARF,EASEC,aATF,QAUO,sBAVP;AAWA,SACEC,OADF,EAGEC,sBAHF,QAIO,QAJP;;AAYA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAcb,iBAAiB,EAArC;AACA,QAAMc,OAAO,GAAGhB,UAAU,EAA1B;;AAEA,QAAMiB,eAAe,GAAG,OAAO;AAC7BC,IAAAA,IAD6B;AAE7BC,IAAAA,KAF6B;AAG7BC,IAAAA;AAH6B,GAAP,KAIS;AAC/B,UAAMC,OAAO,GAAG,IAAIZ,OAAJ,CAAYG,OAAO,CAACU,kBAApB,CAAhB;AACA,UAAMC,QAAQ,GAAG,IAAIZ,aAAJ,CAAkB;AAAEU,MAAAA;AAAF,KAAlB,CAAjB;AACA,UAAMG,SAAS,GAAGX,sBAAsB,CAACY,IAAvB,CACfC,IAAD,IAAkCA,IAAI,CAACC,IAAL,KAAcP,IADhC,CAAlB;;AAIA,QAAI,CAACI,SAAL,EAAgB;AACd,YAAM,IAAII,KAAJ,CAAU,8CAAV,CAAN;AACD,KAFD,MAEO;AACL,YAAMC,eAAe,GAAG,MACtBX,IAAI,KAAK,EAAT,GAAcM,SAAS,CAACM,IAAxB,GAAgC,GAAEN,SAAS,CAACM,IAAK,GAAEZ,IAAK,EAD1D;;AAGA,YAAMa,WAAW,GAAG,MAAc;AAChC,cAAMC,QAAQ,GAAGd,IAAI,CAACe,KAAL,CAAW,GAAX,EAAgBC,KAAhB,CAAsB,CAAtB,CAAjB;AAEA,eAAOV,SAAS,CAACM,IAAV,KAAmB,UAAnB,IAAiCZ,IAAjC,GACHM,SAAS,CAACW,QAAV,IAAsBH,QAAQ,CAACI,MAAT,GAAkB,CAAxC,CADG,GAEHZ,SAAS,CAACW,QAFd;AAGD,OAND;;AAQA,YAAML,IAAI,GAAGzB,kBAAkB,CAACgC,YAAnB,GACVC,WADU,CACE,IAAInC,gBAAJ,CAAqB0B,eAAe,EAApC,CADF,EAEVU,KAFU,EAAb;AAIA,YAAMC,WAAW,GAAG,IAAIpC,WAAJ,CAAgB;AAClC0B,QAAAA,IADkC;AAElCd,QAAAA,OAAO,EAAE,IAAIR,OAAJ,CAAYQ,OAAO,CAACyB,OAAR,EAAZ,CAFyB;AAGlCC,QAAAA,QAAQ,EAAEnB,QAAQ,CAACoB,UAAT,EAHwB;AAIlCxB,QAAAA,KAAK,EAAEb,OAAO,CAACsC,IAAR,CAAazB,KAAb,CAJ2B;AAKlCgB,QAAAA,QAAQ,EAAE,IAAI5B,QAAJ,CAAawB,WAAW,EAAxB,CALwB;AAMlCc,QAAAA,KAAK,EAAE,IAAInC,KAAJ,CAAUK,OAAV,aAAUA,OAAV,uBAAUA,OAAO,CAAE8B,KAAnB;AAN2B,OAAhB,CAApB;AASA,aAAO,MAAM5C,mBAAmB,CAAC6C,gBAApB,CAAqC;AAChDC,QAAAA,YAAY,EAAEP;AADkC,OAArC,CAAb;AAGD;AACF,GA1CD;;AA4CA,SAAO;AACLvB,IAAAA;AADK,GAAP;AAGD,CAnDD;;GAAMH,c;UACgBZ,iB;;;AAoDtB,eAAeY,cAAf","sourcesContent":["import {\n  getChainID,\n  transactionServices,\n  useGetAccountInfo\n} from '@elrondnetwork/dapp-core';\nimport {\n  ContractFunction,\n  Transaction,\n  TransactionPayload,\n  Balance,\n  GasLimit,\n  ChainID,\n  Address,\n  Nonce,\n  SmartContract\n} from '@elrondnetwork/erdjs';\nimport {\n  network,\n  DelegationContractType,\n  delegationContractData\n} from 'config';\n\ninterface TransactionParametersType {\n  args: string;\n  value: string;\n  type: string;\n}\n\nconst useTransaction = () => {\n  const { account } = useGetAccountInfo();\n  const chainID = getChainID();\n\n  const sendTransaction = async ({\n    args,\n    value,\n    type\n  }: TransactionParametersType) => {\n    const address = new Address(network.delegationContract);\n    const contract = new SmartContract({ address });\n    const delegable = delegationContractData.find(\n      (item: DelegationContractType) => item.name === type\n    );\n\n    if (!delegable) {\n      throw new Error('The contract for this action is not defined.');\n    } else {\n      const getFunctionName = (): string =>\n        args === '' ? delegable.data : `${delegable.data}${args}`;\n\n      const getGasLimit = (): number => {\n        const nodeKeys = args.split('@').slice(1);\n\n        return delegable.data === 'addNodes' && args\n          ? delegable.gasLimit * (nodeKeys.length / 2)\n          : delegable.gasLimit;\n      };\n\n      const data = TransactionPayload.contractCall()\n        .setFunction(new ContractFunction(getFunctionName()))\n        .build();\n\n      const transaction = new Transaction({\n        data,\n        chainID: new ChainID(chainID.valueOf()),\n        receiver: contract.getAddress(),\n        value: Balance.egld(value),\n        gasLimit: new GasLimit(getGasLimit()),\n        nonce: new Nonce(account?.nonce)\n      });\n\n      return await transactionServices.sendTransactions({\n        transactions: transaction\n      });\n    }\n  };\n\n  return {\n    sendTransaction\n  };\n};\n\nexport default useTransaction;\n"]},"metadata":{},"sourceType":"module"}