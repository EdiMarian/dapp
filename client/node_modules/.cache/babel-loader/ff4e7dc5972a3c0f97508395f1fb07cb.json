{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{getChainID,transactionServices,useGetAccountInfo}from'@elrondnetwork/dapp-core';import{ContractFunction,Transaction,TransactionPayload,Balance,GasLimit,ChainID,Address,Nonce,SmartContract}from'@elrondnetwork/erdjs';import{network,delegationContractData}from'config';var useTransaction=function useTransaction(){var _useGetAccountInfo=useGetAccountInfo(),account=_useGetAccountInfo.account;var chainID=getChainID();var sendTransaction=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref){var args,value,type,address,contract,delegable,getFunctionName,getGasLimit,data,transaction;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:args=_ref.args,value=_ref.value,type=_ref.type;address=new Address(network.delegationContract);contract=new SmartContract({address:address});delegable=delegationContractData.find(function(item){return item.name===type;});if(delegable){_context.next=8;break;}throw new Error('The contract for this action is not defined.');case 8:getFunctionName=function getFunctionName(){return args===''?delegable.data:\"\".concat(delegable.data).concat(args);};getGasLimit=function getGasLimit(){var nodeKeys=args.split('@').slice(1);return delegable.data==='addNodes'&&args?delegable.gasLimit*(nodeKeys.length/2):delegable.gasLimit;};data=TransactionPayload.contractCall().setFunction(new ContractFunction(getFunctionName())).build();transaction=new Transaction({data:data,chainID:new ChainID(chainID.valueOf()),receiver:contract.getAddress(),value:Balance.egld(value),gasLimit:new GasLimit(getGasLimit()),nonce:new Nonce(account===null||account===void 0?void 0:account.nonce)});_context.next=14;return transactionServices.sendTransactions({transactions:transaction});case 14:return _context.abrupt(\"return\",_context.sent);case 15:case\"end\":return _context.stop();}}},_callee);}));return function sendTransaction(_x){return _ref2.apply(this,arguments);};}();return{sendTransaction:sendTransaction};};export default useTransaction;","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/helpers/useTransaction.ts"],"names":["getChainID","transactionServices","useGetAccountInfo","ContractFunction","Transaction","TransactionPayload","Balance","GasLimit","ChainID","Address","Nonce","SmartContract","network","delegationContractData","useTransaction","account","chainID","sendTransaction","args","value","type","address","delegationContract","contract","delegable","find","item","name","Error","getFunctionName","data","getGasLimit","nodeKeys","split","slice","gasLimit","length","contractCall","setFunction","build","transaction","valueOf","receiver","getAddress","egld","nonce","sendTransactions","transactions"],"mappings":"2XAAA,OACEA,UADF,CAEEC,mBAFF,CAGEC,iBAHF,KAIO,0BAJP,CAKA,OACEC,gBADF,CAEEC,WAFF,CAGEC,kBAHF,CAIEC,OAJF,CAKEC,QALF,CAMEC,OANF,CAOEC,OAPF,CAQEC,KARF,CASEC,aATF,KAUO,sBAVP,CAWA,OACEC,OADF,CAGEC,sBAHF,KAIO,QAJP,CAYA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,uBAAoBZ,iBAAiB,EAArC,CAAQa,OAAR,oBAAQA,OAAR,CACA,GAAMC,CAAAA,OAAO,CAAGhB,UAAU,EAA1B,CAEA,GAAMiB,CAAAA,eAAe,2FAAG,mOACtBC,IADsB,MACtBA,IADsB,CAEtBC,KAFsB,MAEtBA,KAFsB,CAGtBC,IAHsB,MAGtBA,IAHsB,CAKhBC,OALgB,CAKN,GAAIZ,CAAAA,OAAJ,CAAYG,OAAO,CAACU,kBAApB,CALM,CAMhBC,QANgB,CAML,GAAIZ,CAAAA,aAAJ,CAAkB,CAAEU,OAAO,CAAPA,OAAF,CAAlB,CANK,CAOhBG,SAPgB,CAOJX,sBAAsB,CAACY,IAAvB,CAChB,SAACC,IAAD,QAAkCA,CAAAA,IAAI,CAACC,IAAL,GAAcP,IAAhD,EADgB,CAPI,IAWjBI,SAXiB,8BAYd,IAAII,CAAAA,KAAJ,CAAU,8CAAV,CAZc,QAcdC,eAdc,CAcI,QAAlBA,CAAAA,eAAkB,SACtBX,CAAAA,IAAI,GAAK,EAAT,CAAcM,SAAS,CAACM,IAAxB,WAAkCN,SAAS,CAACM,IAA5C,SAAmDZ,IAAnD,CADsB,EAdJ,CAiBda,WAjBc,CAiBA,QAAdA,CAAAA,WAAc,EAAc,CAChC,GAAMC,CAAAA,QAAQ,CAAGd,IAAI,CAACe,KAAL,CAAW,GAAX,EAAgBC,KAAhB,CAAsB,CAAtB,CAAjB,CAEA,MAAOV,CAAAA,SAAS,CAACM,IAAV,GAAmB,UAAnB,EAAiCZ,IAAjC,CACHM,SAAS,CAACW,QAAV,EAAsBH,QAAQ,CAACI,MAAT,CAAkB,CAAxC,CADG,CAEHZ,SAAS,CAACW,QAFd,CAGD,CAvBmB,CAyBdL,IAzBc,CAyBPzB,kBAAkB,CAACgC,YAAnB,GACVC,WADU,CACE,GAAInC,CAAAA,gBAAJ,CAAqB0B,eAAe,EAApC,CADF,EAEVU,KAFU,EAzBO,CA6BdC,WA7Bc,CA6BA,GAAIpC,CAAAA,WAAJ,CAAgB,CAClC0B,IAAI,CAAJA,IADkC,CAElCd,OAAO,CAAE,GAAIR,CAAAA,OAAJ,CAAYQ,OAAO,CAACyB,OAAR,EAAZ,CAFyB,CAGlCC,QAAQ,CAAEnB,QAAQ,CAACoB,UAAT,EAHwB,CAIlCxB,KAAK,CAAEb,OAAO,CAACsC,IAAR,CAAazB,KAAb,CAJ2B,CAKlCgB,QAAQ,CAAE,GAAI5B,CAAAA,QAAJ,CAAawB,WAAW,EAAxB,CALwB,CAMlCc,KAAK,CAAE,GAAInC,CAAAA,KAAJ,CAAUK,OAAV,SAAUA,OAAV,iBAAUA,OAAO,CAAE8B,KAAnB,CAN2B,CAAhB,CA7BA,wBAsCP5C,CAAAA,mBAAmB,CAAC6C,gBAApB,CAAqC,CAChDC,YAAY,CAAEP,WADkC,CAArC,CAtCO,+GAAH,kBAAfvB,CAAAA,eAAe,6CAArB,CA4CA,MAAO,CACLA,eAAe,CAAfA,eADK,CAAP,CAGD,CAnDD,CAqDA,cAAeH,CAAAA,cAAf","sourcesContent":["import {\n  getChainID,\n  transactionServices,\n  useGetAccountInfo\n} from '@elrondnetwork/dapp-core';\nimport {\n  ContractFunction,\n  Transaction,\n  TransactionPayload,\n  Balance,\n  GasLimit,\n  ChainID,\n  Address,\n  Nonce,\n  SmartContract\n} from '@elrondnetwork/erdjs';\nimport {\n  network,\n  DelegationContractType,\n  delegationContractData\n} from 'config';\n\ninterface TransactionParametersType {\n  args: string;\n  value: string;\n  type: string;\n}\n\nconst useTransaction = () => {\n  const { account } = useGetAccountInfo();\n  const chainID = getChainID();\n\n  const sendTransaction = async ({\n    args,\n    value,\n    type\n  }: TransactionParametersType) => {\n    const address = new Address(network.delegationContract);\n    const contract = new SmartContract({ address });\n    const delegable = delegationContractData.find(\n      (item: DelegationContractType) => item.name === type\n    );\n\n    if (!delegable) {\n      throw new Error('The contract for this action is not defined.');\n    } else {\n      const getFunctionName = (): string =>\n        args === '' ? delegable.data : `${delegable.data}${args}`;\n\n      const getGasLimit = (): number => {\n        const nodeKeys = args.split('@').slice(1);\n\n        return delegable.data === 'addNodes' && args\n          ? delegable.gasLimit * (nodeKeys.length / 2)\n          : delegable.gasLimit;\n      };\n\n      const data = TransactionPayload.contractCall()\n        .setFunction(new ContractFunction(getFunctionName()))\n        .build();\n\n      const transaction = new Transaction({\n        data,\n        chainID: new ChainID(chainID.valueOf()),\n        receiver: contract.getAddress(),\n        value: Balance.egld(value),\n        gasLimit: new GasLimit(getGasLimit()),\n        nonce: new Nonce(account?.nonce)\n      });\n\n      return await transactionServices.sendTransactions({\n        transactions: transaction\n      });\n    }\n  };\n\n  return {\n    sendTransaction\n  };\n};\n\nexport default useTransaction;\n"]},"metadata":{},"sourceType":"module"}