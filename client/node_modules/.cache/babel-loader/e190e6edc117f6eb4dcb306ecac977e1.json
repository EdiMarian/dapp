{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/components/Button/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { transactionServices, refreshAccount } from '@elrondnetwork/dapp-core';\nimport { backend, reciveAddress, tokenName } from '../../config';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { Modal } from 'react-bootstrap';\nimport { io } from 'socket.io-client';\nimport EnterRace from './Components/EnterRace';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Button = ({\n  race\n}) => {\n  _s();\n\n  const navigate = useNavigate();\n  const {\n    address\n  } = useGetAccountInfo();\n  const [transactionSessionId, setTransactionSessionId] = useState('');\n  const [paid, setPaid] = useState(false);\n  const {\n    sendTransactions\n  } = transactionServices;\n  const [estar, setEstar] = useState(0);\n  const [egld, setEgld] = useState(0);\n  const [nft, setNft] = useState([]);\n  const [socket, setSocket] = useState();\n  const [show, setShow] = useState(false);\n  const [showSelect, setShowSelect] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [message, setMessage] = useState('');\n  const [raceIsAv, setRaceIsAv] = useState(false);\n  const [clickable, setClickable] = useState(true);\n  const [raceId, setRaceId] = useState('');\n  const txSuccess = transactionServices.useGetSuccessfulTransactions();\n  useEffect(() => {\n    // Connect socket.io\n    const s = io(backend);\n    s.emit('get-status', address);\n\n    function handler(data) {\n      setNft(data);\n    }\n\n    s.on('recive-status', handler);\n    setSocket(s); // Fee\n\n    setEstar(race.entryFee);\n    setEgld(race.entryFee); // Disconnect socket.io\n\n    return () => {\n      s.disconnect();\n    };\n  }, []);\n\n  async function available(race) {\n    const handler = message => {\n      if (race.payFee) {\n        if (message == 'OK') {\n          setRaceIsAv(true);\n        } else {\n          setMessage(message);\n        }\n\n        setShow(true);\n      } else setShowSelect(true);\n    };\n\n    await socket.emit('get-available', race, address);\n    await socket.on('recive-available', handler);\n  }\n\n  ;\n  useEffect(() => {\n    for (let i = 0; i < txSuccess.successfulTransactionsArray.length; i++) {\n      if (txSuccess.successfulTransactionsArray[i][0] == transactionSessionId) {\n        setPaid(true);\n      }\n    }\n  }, [txSuccess.successfulTransactionsArray.length]);\n  useEffect(() => {\n    if (paid) setShowSelect(true);\n  }, [paid]);\n\n  const encrypt = () => {\n    return (estar * 100).toString(16);\n  };\n\n  const sendEstarTransaction = async () => {\n    const estarTransaction = {\n      value: 0,\n      gasLimit: '500000',\n      data: estar >= 50 && estar <= 656 ? btoa('ESDTTransfer@45535441522d616661616630@' + encrypt()) : btoa('ESDTTransfer@45535441522d616661616630@0' + encrypt()),\n      receiver: reciveAddress\n    };\n    await refreshAccount();\n    const {\n      sessionId\n    } = await sendTransactions({\n      transactions: estarTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: false\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const sendEgldTransaction = async () => {\n    const egldTransaction = {\n      value: egld ? egld * 1000000000000000000 : 0,\n      gasLimit: '70000',\n      data: 'QG9r',\n      receiver: reciveAddress\n    };\n    await refreshAccount();\n    const {\n      sessionId\n    } = await sendTransactions({\n      transactions: egldTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: true\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  function setDelay(ms) {\n    return new Promise((resolve, reject) => {\n      setTimeout(resolve, ms);\n    });\n  }\n\n  const enter = async (horse, url) => {\n    await setDelay(2000);\n    const data = await {\n      address: address,\n      horse: horse,\n      horseUrl: url,\n      feePaid: true,\n      entryFee: race.withEstar ? estar : egld,\n      with: race.withEstar ? 'ESTAR' : 'EGLD',\n      raceId: race.id\n    };\n    socket.emit('enter-race', data);\n\n    const handle = response => {\n      setSuccess(true);\n      setShowSelect(response.showb);\n      setMessage(response.message);\n      setRaceId(response.id);\n    };\n\n    socket.on('recive-response', handle);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"d-block mx-auto btn text-white\",\n      style: {\n        backgroundColor: race.color\n      },\n      onClick: () => available(race),\n      children: \"Enter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      dialogClassName: \"custom-dialog\",\n      show: show,\n      onHide: () => setShow(!show),\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      children: raceIsAv ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          className: \"bg-white\",\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Pay\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          className: \"bg-white w-100\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"d-block mx-auto btn btn-primary\",\n            onClick: () => {\n              setShow(false);\n              sendEstarTransaction();\n            },\n            children: [estar, \" \", tokenName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          className: \"bg-white\",\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          className: \"bg-white w-100\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EnterRace, {\n      showSelect: showSelect,\n      nft: nft,\n      race: race\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Button, \"UgX91YDlTgJG53bwRmo0j4Gt+G0=\", false, function () {\n  return [useNavigate, useGetAccountInfo, transactionServices.useGetSuccessfulTransactions];\n});\n\n_c = Button;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/components/Button/index.js"],"names":["React","useState","useEffect","useNavigate","transactionServices","refreshAccount","backend","reciveAddress","tokenName","useGetAccountInfo","Modal","io","EnterRace","Button","race","navigate","address","transactionSessionId","setTransactionSessionId","paid","setPaid","sendTransactions","estar","setEstar","egld","setEgld","nft","setNft","socket","setSocket","show","setShow","showSelect","setShowSelect","success","setSuccess","message","setMessage","raceIsAv","setRaceIsAv","clickable","setClickable","raceId","setRaceId","txSuccess","useGetSuccessfulTransactions","s","emit","handler","data","on","entryFee","disconnect","available","payFee","i","successfulTransactionsArray","length","encrypt","toString","sendEstarTransaction","estarTransaction","value","gasLimit","btoa","receiver","sessionId","transactions","transactionsDisplayInfo","processingMessage","errorMessage","successMessage","redirectAfterSign","sendEgldTransaction","egldTransaction","setDelay","ms","Promise","resolve","reject","setTimeout","enter","horse","url","horseUrl","feePaid","withEstar","with","id","handle","response","showb","backgroundColor","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { transactionServices, refreshAccount } from '@elrondnetwork/dapp-core';\nimport { backend, reciveAddress, tokenName } from '../../config';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { Modal } from 'react-bootstrap';\nimport { io } from 'socket.io-client';\nimport EnterRace from './Components/EnterRace';\n\nconst Button = ({ race }) => {\n  const navigate = useNavigate();\n  const { address } = useGetAccountInfo();\n  const [transactionSessionId, setTransactionSessionId] = useState('');\n  const [paid, setPaid] = useState(false);\n  const { sendTransactions } = transactionServices;\n  const [estar, setEstar] = useState(0);\n  const [egld, setEgld] = useState(0);\n  const [nft, setNft] = useState([]);\n  const [socket, setSocket] = useState();\n  const [show, setShow] = useState(false);\n  const [showSelect, setShowSelect] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [message, setMessage] = useState('');\n  const [raceIsAv, setRaceIsAv] = useState(false);\n  const [clickable, setClickable] = useState(true);\n  const [raceId, setRaceId] = useState('');\n  const txSuccess = transactionServices.useGetSuccessfulTransactions();\n\n  useEffect(() => {\n    // Connect socket.io\n    const s = io(backend);\n    s.emit('get-status', address);\n    function handler (data) {\n      setNft(data);\n    }\n    s.on('recive-status', handler);\n    setSocket(s);\n\n    // Fee\n    setEstar(race.entryFee);\n    setEgld(race.entryFee);\n    // Disconnect socket.io\n    return () => {\n      s.disconnect();\n    };\n  }, []);\n\n  async function available (race) {\n    const handler = (message) => {\n      if(race.payFee) {\n        if(message == 'OK') {\n          setRaceIsAv(true);\n        } else {\n          setMessage(message);\n        }\n        setShow(true);\n      } else setShowSelect(true);\n    };\n    await socket.emit('get-available', race, address);\n    await socket.on('recive-available', handler);\n  };\n  \n  useEffect(() => {\n    for(let i = 0; i < txSuccess.successfulTransactionsArray.length; i++) {\n      if(txSuccess.successfulTransactionsArray[i][0] == transactionSessionId) {\n        setPaid(true);\n      }\n    }\n  }, [txSuccess.successfulTransactionsArray.length])\n\n  useEffect(() => {\n    if(paid) setShowSelect(true);\n  }, [paid])\n\n  const encrypt = () => {\n    return (estar * 100).toString(16);\n  };\n\n  const sendEstarTransaction = async () => {\n    const estarTransaction = {\n      value: 0,\n      gasLimit: '500000',\n      data:\n        estar >= 50 && estar <= 656\n          ? btoa('ESDTTransfer@45535441522d616661616630@' + encrypt())\n          : btoa('ESDTTransfer@45535441522d616661616630@0' + encrypt()),\n      receiver: reciveAddress\n    };\n    await refreshAccount();\n\n    const { sessionId } = await sendTransactions({\n      transactions: estarTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: false\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const sendEgldTransaction = async () => {\n    const egldTransaction = {\n      value: egld ? egld * 1000000000000000000 : 0,\n      gasLimit: '70000',\n      data: 'QG9r',\n      receiver: reciveAddress\n    };\n    await refreshAccount();\n\n    const { sessionId } = await sendTransactions({\n      transactions: egldTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: true\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  function setDelay(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms);\n  })\n}\n\n  const enter = async (horse, url) => {\n    await setDelay(2000);\n    const data = await {\n        address: address,\n        horse: horse,\n        horseUrl: url,\n        feePaid: true,\n        entryFee: race.withEstar ? estar : egld,\n        with: race.withEstar ? 'ESTAR' : 'EGLD',\n        raceId: race.id,\n      };\n    socket.emit('enter-race', data);\n    const handle = (response) => {\n        setSuccess(true);\n        setShowSelect(response.showb);\n        setMessage(response.message);\n        setRaceId(response.id);\n      }\n\n      socket.on('recive-response', handle);\n  };\n\n  return (\n    <div className='container'>\n      <button\n        className='d-block mx-auto btn text-white'\n        style={{ backgroundColor: race.color }}\n        onClick={() => available(race)}\n      >\n        Enter\n      </button>\n      {/* Enter race modal */}\n      <Modal\n        dialogClassName='custom-dialog'\n        show={show}\n        onHide={() => setShow(!show)}\n        aria-labelledby='contained-modal-title-vcenter'\n        centered\n      >\n        {raceIsAv ? (\n          <>\n            <Modal.Header closeButton className='bg-white'>\n              <Modal.Title>Pay</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='bg-white w-100'>\n              <button\n                className='d-block mx-auto btn btn-primary'\n                onClick={() => {\n                  setShow(false);\n                  sendEstarTransaction();\n                }}\n              >\n                {estar} {tokenName}\n              </button>\n            </Modal.Body>\n          </>\n        ) : (\n          <>\n            <Modal.Header closeButton className='bg-white'>\n              <Modal.Title>Error</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='bg-white w-100'>\n              <h4>{message}</h4>\n            </Modal.Body>\n          </>\n        )}\n      </Modal>\n      <EnterRace showSelect={showSelect} nft={nft} race={race} />\n    </div>\n  );\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}