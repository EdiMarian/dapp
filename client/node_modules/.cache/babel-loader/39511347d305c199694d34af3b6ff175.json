{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { transactionServices } from '@elrondnetwork/dapp-core';\n\nconst TxTracking = () => {\n  _s();\n\n  const PendingTx = transactionServices.useGetPendingTransactions();\n  const FailedTx = transactionServices.useGetFailedTransactions();\n  const SuccessfulTx = transactionServices.useGetSuccessfulTransactions();\n  const CompletedTx = transactionServices.useGetCompletedTransactions(); // ==> CompletedTx is for success tx with SmartContract calls\n\n  React.useEffect(() => {\n    if (PendingTx.pendingTransactionsArray.length > 0) {\n      CheckPending();\n    }\n  }, [PendingTx.pendingTransactionsArray.length]);\n  React.useEffect(() => {\n    if (FailedTx.failedTransactionsArray.length > 0) {\n      CheckFailed();\n    }\n  }, [FailedTx.failedTransactionsArray.length]);\n  React.useEffect(() => {\n    if (SuccessfulTx.successfulTransactionsArray.length > 0) {\n      CheckSuccessful();\n    }\n  }, [SuccessfulTx.successfulTransactionsArray.length]);\n  React.useEffect(() => {\n    if (CompletedTx.completedTransactionsArray.length > 0) {\n      CheckCompletedTx();\n    }\n  }, [CompletedTx.completedTransactionsArray.length]);\n\n  function CheckPending() {\n    //     console.log('>>>>> PendingTx : ', PendingTx);\n    const PendingTxArray = PendingTx.pendingTransactionsArray;\n\n    for (let i = 0; i < PendingTxArray.length; i++) {\n      const transactionSessionId = PendingTxArray[i][0];\n      const transaction = PendingTxArray[i][1].transactions[0]; // ==> transactions[0] because we create only 1 tx by transactionSessionId\n      // console.log(\n      //   '>>> PendingTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n      //   transaction\n      // );\n      //// TODO : create the tx in the database if the tx don't exist\n    }\n  }\n\n  function CheckFailed() {\n    //     console.log('>>>>> FailedTx : ', FailedTx);\n    const FailedTxArray = FailedTx.failedTransactionsArray;\n\n    for (let i = 0; i < FailedTxArray.length; i++) {\n      const transactionSessionId = FailedTxArray[i][0];\n      const transaction = FailedTxArray[i][1].transactions[0]; // ==> transactions[0] because we create only 1 tx by transactionSessionId\n      // console.log(\n      //   '>>> FailedTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n      //   transaction\n      // );\n      //// TODO : update the status of the tx in the database\n      //// Remove the tx with the corresponding transactionSessionId from failedTransactionsArray\n      //// ==> by doing so, the toast with a failed status will not be shown\n      //transactionServices.removeSignedTransaction(transactionSessionId);\n    }\n  }\n\n  function CheckSuccessful() {\n    //     console.log('>>>>> SuccessfulTx : ', SuccessfulTx);\n    const SuccessfulTxArray = SuccessfulTx.successfulTransactionsArray;\n\n    for (let i = 0; i < SuccessfulTxArray.length; i++) {\n      const transactionSessionId = SuccessfulTxArray[i][0];\n      const transaction = SuccessfulTxArray[i][1].transactions[0]; // ==> transactions[0] because we create only 1 tx by transactionSessionId\n      // console.log(\n      //   '>>> SuccessfulTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n      //   transaction\n      // );\n      //// TODO : update the status of the tx in the database\n      //// Remove the tx with the corresponding transactionSessionId from successfulTransactionsArray\n      //// ==> by doing so, the toast with a successful status will not be shown\n      //transactionServices.removeSignedTransaction(transactionSessionId);\n    }\n  }\n\n  function CheckCompletedTx() {\n    //  console.log('>>>>> CompletedTx : ', CompletedTx);\n    const CompletedTxTxArray = CompletedTx.completedTransactionsArray;\n\n    for (let i = 0; i < CompletedTxTxArray.length; i++) {\n      const transactionSessionId = CompletedTxTxArray[i][0];\n      const transaction = CompletedTxTxArray[i][1].transactions[0]; // ==> transactions[0] because we create only 1 tx by transactionSessionId\n      // console.log(\n      //   '>>> CompletedTxTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n      //   transaction\n      // );\n      //// TODO : update the status of the tx in the database\n      //// Remove the tx with the corresponding transactionSessionId from completedTransactionsArray\n      //// ==> by doing so, the toast with a successful status will not be shown\n      //transactionServices.removeSignedTransaction(transactionSessionId);\n    }\n  }\n\n  return SuccessfulTx;\n};\n\n_s(TxTracking, \"kRVH77x1graFmsg9lJX27zZqf/w=\", false, function () {\n  return [transactionServices.useGetPendingTransactions, transactionServices.useGetFailedTransactions, transactionServices.useGetSuccessfulTransactions, transactionServices.useGetCompletedTransactions];\n});\n\n_c = TxTracking;\nexport default TxTracking;\n\nvar _c;\n\n$RefreshReg$(_c, \"TxTracking\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Layout/TxTracking/index.tsx"],"names":["React","transactionServices","TxTracking","PendingTx","useGetPendingTransactions","FailedTx","useGetFailedTransactions","SuccessfulTx","useGetSuccessfulTransactions","CompletedTx","useGetCompletedTransactions","useEffect","pendingTransactionsArray","length","CheckPending","failedTransactionsArray","CheckFailed","successfulTransactionsArray","CheckSuccessful","completedTransactionsArray","CheckCompletedTx","PendingTxArray","i","transactionSessionId","transaction","transactions","FailedTxArray","SuccessfulTxArray","CompletedTxTxArray"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { transactionServices } from '@elrondnetwork/dapp-core';\n\nconst TxTracking = () => {\n  const PendingTx = transactionServices.useGetPendingTransactions();\n  const FailedTx = transactionServices.useGetFailedTransactions();\n  const SuccessfulTx = transactionServices.useGetSuccessfulTransactions();\n  const CompletedTx = transactionServices.useGetCompletedTransactions(); // ==> CompletedTx is for success tx with SmartContract calls\n\n  React.useEffect(() => {\n    if (PendingTx.pendingTransactionsArray.length > 0) {\n      CheckPending();\n    }\n  }, [PendingTx.pendingTransactionsArray.length]);\n\n  React.useEffect(() => {\n    if (FailedTx.failedTransactionsArray.length > 0) {\n      CheckFailed();\n    }\n  }, [FailedTx.failedTransactionsArray.length]);\n\n  React.useEffect(() => {\n    if (SuccessfulTx.successfulTransactionsArray.length > 0) {\n      CheckSuccessful();\n    }\n  }, [SuccessfulTx.successfulTransactionsArray.length]);\n\n  React.useEffect(() => {\n    if (CompletedTx.completedTransactionsArray.length > 0) {\n      CheckCompletedTx();\n    }\n  }, [CompletedTx.completedTransactionsArray.length]);\n\n  function CheckPending() {\n    //     console.log('>>>>> PendingTx : ', PendingTx);\n    const PendingTxArray = PendingTx.pendingTransactionsArray;\n    for (let i = 0; i < PendingTxArray.length; i++) {\n      const transactionSessionId = PendingTxArray[i][0];\n      const transaction = PendingTxArray[i][1].transactions[0]; // ==> transactions[0] because we create only 1 tx by transactionSessionId\n\n      // console.log(\n      //   '>>> PendingTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n      //   transaction\n      // );\n\n      //// TODO : create the tx in the database if the tx don't exist\n    }\n  }\n\n  function CheckFailed() {\n    //     console.log('>>>>> FailedTx : ', FailedTx);\n    const FailedTxArray = FailedTx.failedTransactionsArray;\n    for (let i = 0; i < FailedTxArray.length; i++) {\n      const transactionSessionId = FailedTxArray[i][0];\n      const transaction = FailedTxArray[i][1].transactions[0]; // ==> transactions[0] because we create only 1 tx by transactionSessionId\n\n      // console.log(\n      //   '>>> FailedTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n      //   transaction\n      // );\n\n      //// TODO : update the status of the tx in the database\n\n      //// Remove the tx with the corresponding transactionSessionId from failedTransactionsArray\n      //// ==> by doing so, the toast with a failed status will not be shown\n      //transactionServices.removeSignedTransaction(transactionSessionId);\n    }\n  }\n\n  function CheckSuccessful() {\n    //     console.log('>>>>> SuccessfulTx : ', SuccessfulTx);\n    const SuccessfulTxArray = SuccessfulTx.successfulTransactionsArray;\n    for (let i = 0; i < SuccessfulTxArray.length; i++) {\n      const transactionSessionId = SuccessfulTxArray[i][0];\n      const transaction = SuccessfulTxArray[i][1].transactions[0]; // ==> transactions[0] because we create only 1 tx by transactionSessionId\n\n      // console.log(\n      //   '>>> SuccessfulTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n      //   transaction\n      // );\n\n      //// TODO : update the status of the tx in the database\n\n      //// Remove the tx with the corresponding transactionSessionId from successfulTransactionsArray\n      //// ==> by doing so, the toast with a successful status will not be shown\n      //transactionServices.removeSignedTransaction(transactionSessionId);\n    }\n  }\n\n  function CheckCompletedTx() {\n    //  console.log('>>>>> CompletedTx : ', CompletedTx);\n    const CompletedTxTxArray = CompletedTx.completedTransactionsArray;\n    for (let i = 0; i < CompletedTxTxArray.length; i++) {\n      const transactionSessionId = CompletedTxTxArray[i][0];\n      const transaction = CompletedTxTxArray[i][1].transactions[0]; // ==> transactions[0] because we create only 1 tx by transactionSessionId\n\n      // console.log(\n      //   '>>> CompletedTxTxArray[' + i + '] : ' + transactionSessionId + ' : ',\n      //   transaction\n      // );\n\n      //// TODO : update the status of the tx in the database\n\n      //// Remove the tx with the corresponding transactionSessionId from completedTransactionsArray\n      //// ==> by doing so, the toast with a successful status will not be shown\n      //transactionServices.removeSignedTransaction(transactionSessionId);\n    }\n  }\n  return SuccessfulTx;\n};\n\nexport default TxTracking;\n"]},"metadata":{},"sourceType":"module"}