{"ast":null,"code":"import { decimals as defaultDecimals, denomination as defaultDenomination } from 'config';\n\nfunction format(big, denomination, decimals, showLastNonZeroDecimal, addCommas) {\n  showLastNonZeroDecimal = typeof showLastNonZeroDecimal !== 'undefined' ? showLastNonZeroDecimal : false;\n  let array = big.toString().split('');\n\n  if (denomination !== 0) {\n    // make sure we have enough characters\n    while (array.length < denomination + 1) {\n      array.unshift('0');\n    } // add our dot\n\n\n    array.splice(array.length - denomination, 0, '.'); // make sure there are enough decimals after the dot\n\n    while (array.length - array.indexOf('.') <= decimals) {\n      array.push('0');\n    }\n\n    if (showLastNonZeroDecimal) {\n      let nonZeroDigitIndex = 0;\n\n      for (let i = array.length - 1; i > 0; i--) {\n        if (array[i] !== '0') {\n          nonZeroDigitIndex = i + 1;\n          break;\n        }\n      }\n\n      const decimalsIndex = array.indexOf('.') + decimals + 1;\n      const sliceIndex = Math.max(decimalsIndex, nonZeroDigitIndex);\n      array = array.slice(0, sliceIndex);\n    } else {\n      // trim unnecessary characters after the dot\n      array = array.slice(0, array.indexOf('.') + decimals + 1);\n    }\n  }\n\n  if (addCommas) {\n    // add comas every 3 characters\n    array = array.reverse();\n    const reference = denomination ? array.length - array.indexOf('.') - 1 : array.length;\n    const count = Math.floor(reference / 3);\n\n    for (let i = 1; i <= count; i++) {\n      const position = array.indexOf('.') + 3 * i + i;\n\n      if (position !== array.length) {\n        array.splice(position, 0, ',');\n      }\n    }\n\n    array = array.reverse();\n  }\n\n  const allDecimalsZero = array.slice(array.indexOf('.') + 1).every(digit => digit.toString() === '0');\n  const string = array.join('');\n\n  if (allDecimalsZero) {\n    return string.split('.')[0];\n  }\n\n  return decimals === 0 ? string.split('.').join('') : string;\n}\n\nexport default function denominate({\n  input,\n  denomination,\n  decimals,\n  showLastNonZeroDecimal = false,\n  addCommas = true\n}) {\n  if (input === '...') {\n    return input;\n  }\n\n  if (input === '' || input === '0' || input === undefined) {\n    input = '0';\n  }\n\n  return format(input, denomination, decimals, showLastNonZeroDecimal, addCommas);\n}\nexport const denominated = (input, parameters) => denominate({\n  input,\n  denomination: defaultDenomination,\n  decimals: defaultDecimals,\n  ...parameters\n});","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/helpers/denominate.ts"],"names":["decimals","defaultDecimals","denomination","defaultDenomination","format","big","showLastNonZeroDecimal","addCommas","array","toString","split","length","unshift","splice","indexOf","push","nonZeroDigitIndex","i","decimalsIndex","sliceIndex","Math","max","slice","reverse","reference","count","floor","position","allDecimalsZero","every","digit","string","join","denominate","input","undefined","denominated","parameters"],"mappings":"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","sourcesContent":["import {\n  decimals as defaultDecimals,\n  denomination as defaultDenomination\n} from 'config';\n\nfunction format(\n  big: string,\n  denomination: number,\n  decimals: number,\n  showLastNonZeroDecimal: boolean,\n  addCommas: boolean\n) {\n  showLastNonZeroDecimal =\n    typeof showLastNonZeroDecimal !== 'undefined'\n      ? showLastNonZeroDecimal\n      : false;\n  let array = big.toString().split('');\n  if (denomination !== 0) {\n    // make sure we have enough characters\n    while (array.length < denomination + 1) {\n      array.unshift('0');\n    }\n    // add our dot\n    array.splice(array.length - denomination, 0, '.');\n    // make sure there are enough decimals after the dot\n    while (array.length - array.indexOf('.') <= decimals) {\n      array.push('0');\n    }\n\n    if (showLastNonZeroDecimal) {\n      let nonZeroDigitIndex = 0;\n      for (let i = array.length - 1; i > 0; i--) {\n        if (array[i] !== '0') {\n          nonZeroDigitIndex = i + 1;\n          break;\n        }\n      }\n      const decimalsIndex = array.indexOf('.') + decimals + 1;\n      const sliceIndex = Math.max(decimalsIndex, nonZeroDigitIndex);\n      array = array.slice(0, sliceIndex);\n    } else {\n      // trim unnecessary characters after the dot\n      array = array.slice(0, array.indexOf('.') + decimals + 1);\n    }\n  }\n  if (addCommas) {\n    // add comas every 3 characters\n    array = array.reverse();\n    const reference = denomination\n      ? array.length - array.indexOf('.') - 1\n      : array.length;\n    const count = Math.floor(reference / 3);\n    for (let i = 1; i <= count; i++) {\n      const position = array.indexOf('.') + 3 * i + i;\n      if (position !== array.length) {\n        array.splice(position, 0, ',');\n      }\n    }\n    array = array.reverse();\n  }\n\n  const allDecimalsZero = array\n    .slice(array.indexOf('.') + 1)\n    .every((digit) => digit.toString() === '0');\n\n  const string = array.join('');\n\n  if (allDecimalsZero) {\n    return string.split('.')[0];\n  }\n\n  return decimals === 0 ? string.split('.').join('') : string;\n}\n\ninterface DenominateType {\n  input: string;\n  denomination: number;\n  decimals: number;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}\n\nexport default function denominate({\n  input,\n  denomination,\n  decimals,\n  showLastNonZeroDecimal = false,\n  addCommas = true\n}: DenominateType): string {\n  if (input === '...') {\n    return input;\n  }\n  if (input === '' || input === '0' || input === undefined) {\n    input = '0';\n  }\n  return format(\n    input,\n    denomination,\n    decimals,\n    showLastNonZeroDecimal,\n    addCommas\n  );\n}\n\ninterface DenominatedType {\n  denomination?: number;\n  decimals?: number;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}\n\nexport const denominated = (\n  input: string,\n  parameters?: DenominatedType\n): string =>\n  denominate({\n    input,\n    denomination: defaultDenomination,\n    decimals: defaultDecimals,\n    ...parameters\n  });\n"]},"metadata":{},"sourceType":"module"}