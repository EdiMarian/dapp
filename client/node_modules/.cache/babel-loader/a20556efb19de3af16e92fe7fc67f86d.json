{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/components/Nfts/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { io } from 'socket.io-client';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Nfts = props => {\n  _s();\n\n  const {\n    address\n  } = useGetAccountInfo();\n  const [nft, setNft] = useState([]);\n  const [socket, setSocket] = useState();\n  useEffect(() => {\n    const s = io('http://localhost:4000');\n    setSocket(s);\n    return () => {\n      s.disconnect();\n    };\n  }, []);\n\n  async function getNfts() {\n    await socket.emit('get-nfts', address);\n  }\n\n  useEffect(async () => {\n    getNfts();\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.nftGrid,\n    style: props.col ? {\n      gridTemplateColumns: `repeat(${props.col}, 1fr)`\n    } : {\n      gridTemplateColumns: 'repeat(4, 1fr)'\n    },\n    children: nft ? nft.map(({\n      identifier,\n      url,\n      name\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.nftContent,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        className: styles.img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: props.color ? {\n          color: props.color\n        } : {\n          color: 'white'\n        },\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)]\n    }, identifier, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You don't have EquiStar Nfts.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Nfts, \"4fXpKSTYfcU7HFSMuPMlWoFCPiA=\", false, function () {\n  return [useGetAccountInfo];\n});\n\n_c = Nfts;\nexport default Nfts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Nfts\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/components/Nfts/index.js"],"names":["React","useState","useEffect","useGetAccountInfo","io","styles","Nfts","props","address","nft","setNft","socket","setSocket","s","disconnect","getNfts","emit","nftGrid","col","gridTemplateColumns","map","identifier","url","name","nftContent","img","color"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,EAAT,QAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAcL,iBAAiB,EAArC;AACA,QAAM,CAACM,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,EAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMW,CAAC,GAAGT,EAAE,CAAC,uBAAD,CAAZ;AACAQ,IAAAA,SAAS,CAACC,CAAD,CAAT;AACA,WAAO,MAAM;AACXA,MAAAA,CAAC,CAACC,UAAF;AACD,KAFD;AAGA,GANQ,EAMN,EANM,CAAT;;AAQA,iBAAeC,OAAf,GAAyB;AACxB,UAAMJ,MAAM,CAACK,IAAP,CAAY,UAAZ,EAAwBR,OAAxB,CAAN;AACA;;AAEDN,EAAAA,SAAS,CAAC,YAAY;AACpBa,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACJ,MAAD,CAFM,CAAT;AAIA,sBACE;AACE,IAAA,SAAS,EAAEN,MAAM,CAACY,OADpB;AAEE,IAAA,KAAK,EACHV,KAAK,CAACW,GAAN,GACI;AACEC,MAAAA,mBAAmB,EAAG,UAASZ,KAAK,CAACW,GAAI;AAD3C,KADJ,GAII;AACEC,MAAAA,mBAAmB,EAAE;AADvB,KAPR;AAAA,cAYGV,GAAG,GACFA,GAAG,CAACW,GAAJ,CAAQ,CAAC;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,GAAd;AAAmBC,MAAAA;AAAnB,KAAD,kBACN;AAAsB,MAAA,SAAS,EAAElB,MAAM,CAACmB,UAAxC;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEF,GAAV;AAAe,QAAA,SAAS,EAAEjB,MAAM,CAACoB;AAAjC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,KAAK,EAAElB,KAAK,CAACmB,KAAN,GAAc;AAAEA,UAAAA,KAAK,EAAEnB,KAAK,CAACmB;AAAf,SAAd,GAAuC;AAAEA,UAAAA,KAAK,EAAE;AAAT,SADhD;AAAA,kBAGGH;AAHH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAUF,UAAV;AAAA;AAAA;AAAA;AAAA,YADF,CADE,gBAYF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxBJ;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAjDD;;GAAMf,I;UACgBH,iB;;;KADhBG,I;AAmDN,eAAeA,IAAf","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { io } from 'socket.io-client';\nimport styles from './styles.module.scss';\n\nconst Nfts = (props) => {\n  const { address } = useGetAccountInfo();\n  const [nft, setNft] = useState([]);\n  const [socket, setSocket] = useState();\n  useEffect(() => {\n   const s = io('http://localhost:4000');\n   setSocket(s);\n   return () => {\n     s.disconnect();\n   }\n  }, []);\n\n  async function getNfts() {\n   await socket.emit('get-nfts', address);\n  }\n\n  useEffect(async () => {\n    getNfts();\n  }, [socket])\n\n  return (\n    <div\n      className={styles.nftGrid}\n      style={\n        props.col\n          ? {\n              gridTemplateColumns: `repeat(${props.col}, 1fr)`\n            }\n          : {\n              gridTemplateColumns: 'repeat(4, 1fr)'\n            }\n      }\n    >\n      {nft ? (\n        nft.map(({ identifier, url, name }) => (\n          <div key={identifier} className={styles.nftContent}>\n            <img src={url} className={styles.img} />\n            <p\n              style={props.color ? { color: props.color } : { color: 'white' }}\n            >\n              {name}\n            </p>\n          </div>\n        ))\n      ) : (\n        <p>You don&apos;t have EquiStar Nfts.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Nfts;\n"]},"metadata":{},"sourceType":"module"}