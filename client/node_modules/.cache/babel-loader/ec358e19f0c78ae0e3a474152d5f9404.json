{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/components/Cards/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport Logo from '../../assets/Logo';\nimport { faAnchor, faFile } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useLocation } from 'react-router-dom';\nimport { NbNftsMint, fetchEstarWallet, getNfts } from '../../apiRequests';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cards = () => {\n  _s();\n\n  const location = useLocation();\n  const {\n    address\n  } = useGetAccountInfo();\n  const [minted, setMinted] = useState();\n  const [estarWallet, setEstarWallet] = useState(0);\n  const [nftWallet, setNftWallet] = useState();\n  useEffect(() => {\n    const fetch = async () => {\n      const mints = await NbNftsMint().then(result => result.data);\n      setMinted(mints);\n      const estar = await fetchEstarWallet(address).then(result => {\n        if (result.data != []) {\n          setEstarWallet(result.data.balance);\n        } else {\n          return 0;\n        }\n      });\n      const nfts = await getNfts(address).then(result => result.data);\n      setNftWallet(nfts.length);\n    };\n\n    fetch();\n  }, []);\n  const cards = [{\n    label: 'Nfts minted',\n    data: {\n      value: minted || '0'\n    },\n    colors: ['#2044F5', '#1B37C0'],\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faAnchor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, {\n    label: 'Balance',\n    colors: ['#33cc33', '#2eb82e'],\n    icon: /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this),\n    data: {\n      value: String(estarWallet)\n    }\n  }, {\n    label: 'Your NFTs',\n    colors: ['#6CADEF', '#5B96D2'],\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this),\n    data: {\n      value: nftWallet\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.cards,\n    children: cards.map(card => {\n      const [alpha, beta] = card.colors;\n      const background = `linear-gradient(180deg, ${alpha} 0%, ${beta} 100%)`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.card,\n        style: {\n          background\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.heading,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: 20,\n              fontWeight: 400\n            },\n            children: card.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fill: 'white'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: card.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.value,\n          children: card.data.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, card.label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cards, \"WLNAQYIxZLag1cdEkgG0cwR1ZTQ=\", false, function () {\n  return [useLocation, useGetAccountInfo];\n});\n\n_c = Cards;\nexport default Cards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/components/Cards/index.tsx"],"names":["React","useEffect","useState","useGetAccountInfo","Logo","faAnchor","faFile","FontAwesomeIcon","useLocation","NbNftsMint","fetchEstarWallet","getNfts","styles","Cards","location","address","minted","setMinted","estarWallet","setEstarWallet","nftWallet","setNftWallet","fetch","mints","then","result","data","estar","balance","nfts","length","cards","label","value","colors","icon","String","map","card","alpha","beta","background","heading","fontSize","fontWeight","fill"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEffect, ReactNode, useState } from 'react';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport Logo from '../../assets/Logo';\nimport { faAnchor, faFile } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { useLocation } from 'react-router-dom';\nimport { NbNftsMint, fetchEstarWallet, getNfts } from '../../apiRequests';\n\nimport styles from './styles.module.scss';\n\ninterface CardType {\n  label: string;\n  colors: Array<string>;\n  data: {\n    value?: string | null;\n  };\n  title?: string;\n  description?: string;\n  modal?: ReactNode;\n  icon: ReactNode;\n}\n\nconst Cards: React.FC = () => {\n  const location = useLocation();\n  const { address } = useGetAccountInfo();\n  const [minted, setMinted] = useState();\n  const [estarWallet, setEstarWallet] = useState(0);\n  const [nftWallet, setNftWallet] = useState();\n\n  useEffect(() => {\n    const fetch = async () => {\n      const mints = await NbNftsMint().then((result) => result.data);\n      setMinted(mints);\n      const estar = await fetchEstarWallet(address).then(\n        (result) => {\n            if(result.data != []) {\n              setEstarWallet(result.data.balance);\n            } else {\n              return 0;\n            }\n        }\n      );\n      const nfts = await getNfts(address).then((result) => result.data);\n      setNftWallet(nfts.length);\n    };\n    fetch();\n  }, []);\n\n  const cards: Array<CardType> = [\n    {\n      label: 'Nfts minted',\n      data: {\n        value: minted || '0'\n      },\n      colors: ['#2044F5', '#1B37C0'],\n      icon: <FontAwesomeIcon icon={faAnchor} />\n    },\n    {\n      label: 'Balance',\n      colors: ['#33cc33', '#2eb82e'],\n      icon: <Logo />,\n      data: {\n        value: String(estarWallet)\n      }\n    },\n    {\n      label: 'Your NFTs',\n      colors: ['#6CADEF', '#5B96D2'],\n      icon: <FontAwesomeIcon icon={faFile} />,\n      data: {\n        value: nftWallet\n      }\n    }\n  ];\n\n  return (\n    <div className={styles.cards}>\n      {cards.map((card) => {\n        const [alpha, beta] = card.colors;\n        const background = `linear-gradient(180deg, ${alpha} 0%, ${beta} 100%)`;\n\n        return (\n          <div key={card.label} className={styles.card} style={{ background }}>\n            <div className={styles.heading}>\n              <span style={{ fontSize: 20, fontWeight: 400 }}>\n                {card.label}\n              </span>\n              <div style={{ fill: 'white' }}>\n                <span>{card.icon}</span>\n              </div>\n            </div>\n            <div className={styles.value}>{card.data.value}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Cards;\n"]},"metadata":{},"sourceType":"module"}