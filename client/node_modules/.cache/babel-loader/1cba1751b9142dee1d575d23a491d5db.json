{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Nodes/components/Add/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { Formik } from 'formik';\nimport { object, array, mixed } from 'yup';\nimport { Submit } from 'components/Action';\nimport Dropzone from 'components/Nodes/components/Dropzone';\nimport useTransaction from 'helpers/useTransaction';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Add = () => {\n  _s();\n\n  const {\n    sendTransaction\n  } = useTransaction();\n  const validationSchema = object().shape({\n    files: array().of(mixed()).required('PEM file is required.').test('validKeyLength', 'Invalid PEM file.', value => value.every(file => file.errors && !file.errors.includes('length'))).test('keyIsUnique', 'Duplicate key detected!', value => value.every(file => file.errors && !file.errors.includes('unique')))\n  });\n\n  const onSubmit = async ({\n    files\n  }) => {\n    try {\n      const value = files.reduce((total, current) => `${total}@${current.pubKey}@${current.signature}`, '');\n      await sendTransaction({\n        args: value,\n        type: 'addNodes',\n        value: '0'\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      files: []\n    },\n    onSubmit: onSubmit,\n    validationSchema: validationSchema,\n    children: ({\n      handleSubmit,\n      errors\n    }) => /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: styles.add,\n      children: [/*#__PURE__*/_jsxDEV(Dropzone, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), errors.files && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.error,\n        children: errors.files\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(Submit, {\n        close: \"Cancel\",\n        submit: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Add, \"ttflIPkpu74mbi/+tBXc6+0vNJE=\", false, function () {\n  return [useTransaction];\n});\n\n_c = Add;\nexport default Add;\n\nvar _c;\n\n$RefreshReg$(_c, \"Add\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Nodes/components/Add/index.tsx"],"names":["React","Formik","object","array","mixed","Submit","Dropzone","useTransaction","styles","Add","sendTransaction","validationSchema","shape","files","of","required","test","value","every","file","errors","includes","onSubmit","reduce","total","current","pubKey","signature","args","type","error","console","handleSubmit","add"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,KAAxB,QAAqC,KAArC;AAEA,SAASC,MAAT,QAAuB,mBAAvB;AAEA,OAAOC,QAAP,MAGO,sCAHP;AAIA,OAAOC,cAAP,MAA2B,wBAA3B;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,MAAMC,GAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM;AAAEC,IAAAA;AAAF,MAAsBH,cAAc,EAA1C;AAEA,QAAMI,gBAAgB,GAAGT,MAAM,GAAGU,KAAT,CAAe;AACtCC,IAAAA,KAAK,EAAEV,KAAK,GACTW,EADI,CACDV,KAAK,EADJ,EAEJW,QAFI,CAEK,uBAFL,EAGJC,IAHI,CAGC,gBAHD,EAGmB,mBAHnB,EAGyCC,KAAD,IAC3CA,KAAK,CAACC,KAAN,CACGC,IAAD,IACEA,IAAI,CAACC,MAAL,IAAe,CAACD,IAAI,CAACC,MAAL,CAAYC,QAAZ,CAAqB,QAArB,CAFpB,CAJG,EASJL,IATI,CASC,aATD,EASgB,yBAThB,EAS4CC,KAAD,IAC9CA,KAAK,CAACC,KAAN,CACGC,IAAD,IACEA,IAAI,CAACC,MAAL,IAAe,CAACD,IAAI,CAACC,MAAL,CAAYC,QAAZ,CAAqB,QAArB,CAFpB,CAVG;AAD+B,GAAf,CAAzB;;AAkBA,QAAMC,QAAQ,GAAG,OAAO;AAAET,IAAAA;AAAF,GAAP,KAAsD;AACrE,QAAI;AACF,YAAMI,KAAK,GAAGJ,KAAK,CAACU,MAAN,CACZ,CAACC,KAAD,EAAgBC,OAAhB,KACG,GAAED,KAAM,IAAGC,OAAO,CAACC,MAAO,IAAGD,OAAO,CAACE,SAAU,EAFtC,EAGZ,EAHY,CAAd;AAMA,YAAMjB,eAAe,CAAC;AACpBkB,QAAAA,IAAI,EAAEX,KADc;AAEpBY,QAAAA,IAAI,EAAE,UAFc;AAGpBZ,QAAAA,KAAK,EAAE;AAHa,OAAD,CAArB;AAKD,KAZD,CAYE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GAhBD;;AAkBA,sBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEjB,MAAAA,KAAK,EAAE;AAAT,KADjB;AAEE,IAAA,QAAQ,EAAES,QAFZ;AAGE,IAAA,gBAAgB,EAAEX,gBAHpB;AAAA,cAKG,CAAC;AAAEqB,MAAAA,YAAF;AAAgBZ,MAAAA;AAAhB,KAAD,kBACC;AAAM,MAAA,QAAQ,EAAEY,YAAhB;AAA8B,MAAA,SAAS,EAAExB,MAAM,CAACyB,GAAhD;AAAA,8BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cADF,EAGGb,MAAM,CAACP,KAAP,iBAAgB;AAAK,QAAA,SAAS,EAAEL,MAAM,CAACsB,KAAvB;AAAA,kBAA+BV,MAAM,CAACP;AAAtC;AAAA;AAAA;AAAA;AAAA,cAHnB,eAKE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAuB,QAAA,MAAM,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAxDD;;GAAMJ,G;UACwBF,c;;;KADxBE,G;AA0DN,eAAeA,GAAf","sourcesContent":["import * as React from 'react';\n\nimport { Formik } from 'formik';\nimport { object, array, mixed } from 'yup';\n\nimport { Submit } from 'components/Action';\n\nimport Dropzone, {\n  DropzonePayloadType,\n  DropzoneFormType\n} from 'components/Nodes/components/Dropzone';\nimport useTransaction from 'helpers/useTransaction';\n\nimport styles from './styles.module.scss';\n\nconst Add: React.FC = () => {\n  const { sendTransaction } = useTransaction();\n\n  const validationSchema = object().shape({\n    files: array()\n      .of(mixed())\n      .required('PEM file is required.')\n      .test('validKeyLength', 'Invalid PEM file.', (value: any) =>\n        value.every(\n          (file: DropzonePayloadType) =>\n            file.errors && !file.errors.includes('length')\n        )\n      )\n      .test('keyIsUnique', 'Duplicate key detected!', (value: any) =>\n        value.every(\n          (file: DropzonePayloadType) =>\n            file.errors && !file.errors.includes('unique')\n        )\n      )\n  });\n\n  const onSubmit = async ({ files }: DropzoneFormType): Promise<void> => {\n    try {\n      const value = files.reduce(\n        (total: string, current: DropzonePayloadType) =>\n          `${total}@${current.pubKey}@${current.signature}`,\n        ''\n      );\n\n      await sendTransaction({\n        args: value,\n        type: 'addNodes',\n        value: '0'\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{ files: [] }}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {({ handleSubmit, errors }) => (\n        <form onSubmit={handleSubmit} className={styles.add}>\n          <Dropzone />\n\n          {errors.files && <div className={styles.error}>{errors.files}</div>}\n\n          <Submit close='Cancel' submit='Save' />\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default Add;\n"]},"metadata":{},"sourceType":"module"}