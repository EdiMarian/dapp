{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypedEvent = void 0;\n/**\n * An event (a \"Subject\" in the context of the Observer pattern).\n * One or more {@link Listener} objects can register to this.\n *\n * Based on: https://basarat.gitbook.io/typescript/main-1/typed-event\n */\n\nvar TypedEvent = /*#__PURE__*/function () {\n  function TypedEvent() {\n    _classCallCheck(this, TypedEvent);\n\n    this.listeners = [];\n    this.listenersOnce = [];\n  }\n  /**\n   * Registers a listener to this event.\n   */\n\n\n  _createClass(TypedEvent, [{\n    key: \"on\",\n    value: function on(listener) {\n      var _this = this;\n\n      this.listeners.push(listener);\n      return {\n        dispose: function dispose() {\n          return _this.off(listener);\n        }\n      };\n    }\n    /**\n     * Registers a one-time listener to this event.\n     */\n\n  }, {\n    key: \"once\",\n    value: function once(listener) {\n      this.listenersOnce.push(listener);\n    }\n    /**\n     * Unregisters a listener from this event.\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(listener) {\n      var callbackIndex = this.listeners.indexOf(listener);\n\n      if (callbackIndex > -1) {\n        this.listeners.splice(callbackIndex, 1);\n      }\n    }\n    /**\n     * Emits an event (with a payload).\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      // Notify all listeners\n      this.listeners.forEach(function (listener) {\n        return listener(event);\n      }); // Notify (then clear) \"once\" listeners\n\n      this.listenersOnce.forEach(function (listener) {\n        return listener(event);\n      });\n      this.listenersOnce = [];\n    }\n  }]);\n\n  return TypedEvent;\n}();\n\nexports.TypedEvent = TypedEvent;","map":{"version":3,"sources":["../src/events.ts"],"names":[],"mappings":";;;;;;;;;;AASA;;;;;AAKG;;IACU,U;AAAb,wBAAA;AAAA;;AACY,SAAA,SAAA,GAA2B,EAA3B;AACA,SAAA,aAAA,GAA+B,EAA/B;AAwCX;AAtCG;;AAEG;;;;;WACH,YAAG,QAAH,EAAwB;AAAA;;AACpB,WAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACA,aAAO;AACH,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAAC,GAAL,CAAS,QAAT,CAAN;AAAA;AADN,OAAP;AAGH;AAED;;AAEG;;;;WACH,cAAK,QAAL,EAA0B;AACtB,WAAK,aAAL,CAAmB,IAAnB,CAAwB,QAAxB;AACH;AAED;;AAEG;;;;WACH,aAAI,QAAJ,EAAyB;AACrB,UAAI,aAAa,GAAG,KAAK,SAAL,CAAe,OAAf,CAAuB,QAAvB,CAApB;;AACA,UAAI,aAAa,GAAG,CAAC,CAArB,EAAwB;AACpB,aAAK,SAAL,CAAe,MAAf,CAAsB,aAAtB,EAAqC,CAArC;AACH;AACJ;AAED;;AAEG;;;;WACH,cAAK,KAAL,EAAa;AACT;AACA,WAAK,SAAL,CAAe,OAAf,CAAuB,UAAC,QAAD;AAAA,eAAc,QAAQ,CAAC,KAAD,CAAtB;AAAA,OAAvB,EAFS,CAIT;;AACA,WAAK,aAAL,CAAmB,OAAnB,CAA2B,UAAC,QAAD;AAAA,eAAc,QAAQ,CAAC,KAAD,CAAtB;AAAA,OAA3B;AACA,WAAK,aAAL,GAAqB,EAArB;AACH;;;;;;AAzCL,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypedEvent = void 0;\n/**\n * An event (a \"Subject\" in the context of the Observer pattern).\n * One or more {@link Listener} objects can register to this.\n *\n * Based on: https://basarat.gitbook.io/typescript/main-1/typed-event\n */\nclass TypedEvent {\n    constructor() {\n        this.listeners = [];\n        this.listenersOnce = [];\n    }\n    /**\n     * Registers a listener to this event.\n     */\n    on(listener) {\n        this.listeners.push(listener);\n        return {\n            dispose: () => this.off(listener)\n        };\n    }\n    /**\n     * Registers a one-time listener to this event.\n     */\n    once(listener) {\n        this.listenersOnce.push(listener);\n    }\n    /**\n     * Unregisters a listener from this event.\n     */\n    off(listener) {\n        var callbackIndex = this.listeners.indexOf(listener);\n        if (callbackIndex > -1) {\n            this.listeners.splice(callbackIndex, 1);\n        }\n    }\n    /**\n     * Emits an event (with a payload).\n     */\n    emit(event) {\n        // Notify all listeners\n        this.listeners.forEach((listener) => listener(event));\n        // Notify (then clear) \"once\" listeners\n        this.listenersOnce.forEach((listener) => listener(event));\n        this.listenersOnce = [];\n    }\n}\nexports.TypedEvent = TypedEvent;\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"script"}