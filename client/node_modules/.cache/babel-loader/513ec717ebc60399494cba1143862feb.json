{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Cards/components/ChangeDelegationCap/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport BigNumber from 'bignumber.js';\nimport { Formik } from 'formik';\nimport { string, object } from 'yup';\nimport { Submit } from 'components/Action';\nimport { network } from 'config';\nimport { useGlobalContext } from 'context';\nimport { denominated } from 'helpers/denominate';\nimport modifiable from 'helpers/modifiable';\nimport { nominateValToHex } from 'helpers/nominate';\nimport useTransaction from 'helpers/useTransaction';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChangeDelegationCap = () => {\n  _s();\n\n  const {\n    sendTransaction\n  } = useTransaction();\n  const {\n    contractDetails,\n    totalActiveStake\n  } = useGlobalContext();\n  const minimum = denominated(totalActiveStake.data || '', {\n    addCommas: false\n  });\n  const total = denominated(contractDetails.data ? contractDetails.data.delegationCap : '', {\n    addCommas: false\n  });\n  const validationSchema = object().shape({\n    amount: string().required('Required').test('minimum', `Minimum ${minimum} ${network.egldLabel} or 0 ${network.egldLabel}`, (value = '') => new BigNumber(value).isGreaterThanOrEqualTo(minimum) || value === '0')\n  });\n\n  const onSubmit = async data => {\n    try {\n      await sendTransaction({\n        args: nominateValToHex(data.amount.toString()),\n        type: 'modifyTotalDelegationCap',\n        value: '0'\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.cap,\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      validationSchema: validationSchema,\n      onSubmit: onSubmit,\n      initialValues: {\n        amount: total\n      },\n      children: ({\n        errors,\n        values,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit\n      }) => /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.field,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"amount\",\n            children: \"Update Delegation Cap\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.group,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"amount\",\n              step: \"any\",\n              required: true,\n              autoComplete: \"off\",\n              min: 0,\n              className: modifiable('input', [errors.amount && touched.amount && 'invalid'], styles),\n              value: values.amount,\n              onBlur: handleBlur,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), errors.amount && touched.amount && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.error,\n            children: errors.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Submit, {\n          close: \"Cancel\",\n          submit: \"Continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChangeDelegationCap, \"rUvNmEbxHWxtymiuqobkswsTadU=\", false, function () {\n  return [useTransaction, useGlobalContext];\n});\n\n_c = ChangeDelegationCap;\nexport default ChangeDelegationCap;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeDelegationCap\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Cards/components/ChangeDelegationCap/index.tsx"],"names":["React","BigNumber","Formik","string","object","Submit","network","useGlobalContext","denominated","modifiable","nominateValToHex","useTransaction","styles","ChangeDelegationCap","sendTransaction","contractDetails","totalActiveStake","minimum","data","addCommas","total","delegationCap","validationSchema","shape","amount","required","test","egldLabel","value","isGreaterThanOrEqualTo","onSubmit","args","toString","type","error","console","cap","errors","values","touched","handleChange","handleBlur","handleSubmit","field","group"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,KAA/B;AAEA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAMA,MAAMC,mBAA6B,GAAG,MAAM;AAAA;;AAC1C,QAAM;AAAEC,IAAAA;AAAF,MAAsBH,cAAc,EAA1C;AACA,QAAM;AAAEI,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAwCT,gBAAgB,EAA9D;AAEA,QAAMU,OAAO,GAAGT,WAAW,CAACQ,gBAAgB,CAACE,IAAjB,IAAyB,EAA1B,EAA8B;AACvDC,IAAAA,SAAS,EAAE;AAD4C,GAA9B,CAA3B;AAIA,QAAMC,KAAK,GAAGZ,WAAW,CACvBO,eAAe,CAACG,IAAhB,GAAuBH,eAAe,CAACG,IAAhB,CAAqBG,aAA5C,GAA4D,EADrC,EAEvB;AACEF,IAAAA,SAAS,EAAE;AADb,GAFuB,CAAzB;AAOA,QAAMG,gBAAgB,GAAGlB,MAAM,GAAGmB,KAAT,CAAe;AACtCC,IAAAA,MAAM,EAAErB,MAAM,GACXsB,QADK,CACI,UADJ,EAELC,IAFK,CAGJ,SAHI,EAIH,WAAUT,OAAQ,IAAGX,OAAO,CAACqB,SAAU,SAAQrB,OAAO,CAACqB,SAAU,EAJ9D,EAKJ,CAACC,KAAK,GAAG,EAAT,KACE,IAAI3B,SAAJ,CAAc2B,KAAd,EAAqBC,sBAArB,CAA4CZ,OAA5C,KAAwDW,KAAK,KAAK,GANhE;AAD8B,GAAf,CAAzB;;AAWA,QAAME,QAAQ,GAAG,MAAOZ,IAAP,IAA+C;AAC9D,QAAI;AACF,YAAMJ,eAAe,CAAC;AACpBiB,QAAAA,IAAI,EAAErB,gBAAgB,CAACQ,IAAI,CAACM,MAAL,CAAYQ,QAAZ,EAAD,CADF;AAEpBC,QAAAA,IAAI,EAAE,0BAFc;AAGpBL,QAAAA,KAAK,EAAE;AAHa,OAAD,CAArB;AAKD,KAND,CAME,OAAOM,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GAVD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAEtB,MAAM,CAACwB,GAAvB;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,gBAAgB,EAAEd,gBADpB;AAEE,MAAA,QAAQ,EAAEQ,QAFZ;AAGE,MAAA,aAAa,EAAE;AACbN,QAAAA,MAAM,EAAEJ;AADK,OAHjB;AAAA,gBAOG,CAAC;AACAiB,QAAAA,MADA;AAEAC,QAAAA,MAFA;AAGAC,QAAAA,OAHA;AAIAC,QAAAA,YAJA;AAKAC,QAAAA,UALA;AAMAC,QAAAA;AANA,OAAD,kBAQC;AAAM,QAAA,QAAQ,EAAEA,YAAhB;AAAA,gCACE;AAAK,UAAA,SAAS,EAAE9B,MAAM,CAAC+B,KAAvB;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAGE;AAAK,YAAA,SAAS,EAAE/B,MAAM,CAACgC,KAAvB;AAAA,mCACE;AACE,cAAA,IAAI,EAAC,QADP;AAEE,cAAA,IAAI,EAAC,QAFP;AAGE,cAAA,IAAI,EAAC,KAHP;AAIE,cAAA,QAAQ,EAAE,IAJZ;AAKE,cAAA,YAAY,EAAC,KALf;AAME,cAAA,GAAG,EAAE,CANP;AAOE,cAAA,SAAS,EAAEnC,UAAU,CACnB,OADmB,EAEnB,CAAC4B,MAAM,CAACb,MAAP,IAAiBe,OAAO,CAACf,MAAzB,IAAmC,SAApC,CAFmB,EAGnBZ,MAHmB,CAPvB;AAYE,cAAA,KAAK,EAAE0B,MAAM,CAACd,MAZhB;AAaE,cAAA,MAAM,EAAEiB,UAbV;AAcE,cAAA,QAAQ,EAAED;AAdZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAHF,EAsBGH,MAAM,CAACb,MAAP,IAAiBe,OAAO,CAACf,MAAzB,iBACC;AAAM,YAAA,SAAS,EAAEZ,MAAM,CAACsB,KAAxB;AAAA,sBAAgCG,MAAM,CAACb;AAAvC;AAAA;AAAA;AAAA;AAAA,kBAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eA4BE,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,QAAd;AAAuB,UAAA,MAAM,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,gBA5BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAfJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmDD,CAzFD;;GAAMX,mB;UACwBF,c,EACkBJ,gB;;;KAF1CM,mB;AA2FN,eAAeA,mBAAf","sourcesContent":["import * as React from 'react';\n\nimport BigNumber from 'bignumber.js';\n\nimport { Formik } from 'formik';\nimport { string, object } from 'yup';\n\nimport { Submit } from 'components/Action';\nimport { network } from 'config';\nimport { useGlobalContext } from 'context';\nimport { denominated } from 'helpers/denominate';\nimport modifiable from 'helpers/modifiable';\nimport { nominateValToHex } from 'helpers/nominate';\nimport useTransaction from 'helpers/useTransaction';\n\nimport styles from './styles.module.scss';\n\ninterface ActionDataType {\n  amount: string;\n}\n\nconst ChangeDelegationCap: React.FC = () => {\n  const { sendTransaction } = useTransaction();\n  const { contractDetails, totalActiveStake } = useGlobalContext();\n\n  const minimum = denominated(totalActiveStake.data || '', {\n    addCommas: false\n  });\n\n  const total = denominated(\n    contractDetails.data ? contractDetails.data.delegationCap : '',\n    {\n      addCommas: false\n    }\n  );\n\n  const validationSchema = object().shape({\n    amount: string()\n      .required('Required')\n      .test(\n        'minimum',\n        `Minimum ${minimum} ${network.egldLabel} or 0 ${network.egldLabel}`,\n        (value = '') =>\n          new BigNumber(value).isGreaterThanOrEqualTo(minimum) || value === '0'\n      )\n  });\n\n  const onSubmit = async (data: ActionDataType): Promise<void> => {\n    try {\n      await sendTransaction({\n        args: nominateValToHex(data.amount.toString()),\n        type: 'modifyTotalDelegationCap',\n        value: '0'\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <div className={styles.cap}>\n      <Formik\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n        initialValues={{\n          amount: total\n        }}\n      >\n        {({\n          errors,\n          values,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <div className={styles.field}>\n              <label htmlFor='amount'>Update Delegation Cap</label>\n\n              <div className={styles.group}>\n                <input\n                  type='number'\n                  name='amount'\n                  step='any'\n                  required={true}\n                  autoComplete='off'\n                  min={0}\n                  className={modifiable(\n                    'input',\n                    [errors.amount && touched.amount && 'invalid'],\n                    styles\n                  )}\n                  value={values.amount}\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                />\n              </div>\n\n              {errors.amount && touched.amount && (\n                <span className={styles.error}>{errors.amount}</span>\n              )}\n            </div>\n\n            <Submit close='Cancel' submit='Continue' />\n          </form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default ChangeDelegationCap;\n"]},"metadata":{},"sourceType":"module"}