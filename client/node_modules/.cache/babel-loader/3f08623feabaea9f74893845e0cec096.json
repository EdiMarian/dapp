{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.H256BinaryCodec = void 0;\n\nvar h256_1 = require(\"../typesystem/h256\");\n\nvar H256BinaryCodec = /*#__PURE__*/function () {\n  function H256BinaryCodec() {\n    _classCallCheck(this, H256BinaryCodec);\n  }\n\n  _createClass(H256BinaryCodec, [{\n    key: \"decodeNested\",\n    value:\n    /**\n     * Reads and decodes a H256Value from a given buffer.\n     *\n     * @param buffer the input buffer\n     */\n    function decodeNested(buffer) {\n      // We don't check the size of the buffer, we just read 32 bytes.\n      var slice = buffer.slice(0, 32);\n      return [new h256_1.H256Value(slice), 32];\n    }\n    /**\n     * Reads and decodes a H256Value from a given buffer.\n     *\n     * @param buffer the input buffer\n     */\n\n  }, {\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer) {\n      var _this$decodeNested = this.decodeNested(buffer),\n          _this$decodeNested2 = _slicedToArray(_this$decodeNested, 2),\n          decoded = _this$decodeNested2[0],\n          length = _this$decodeNested2[1];\n\n      return decoded;\n    }\n    /**\n     * Encodes a H256Value to a buffer.\n     */\n\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(primitive) {\n      return primitive.valueOf();\n    }\n    /**\n     * Encodes a H256Value to a buffer.\n     */\n\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(primitive) {\n      return primitive.valueOf();\n    }\n  }]);\n\n  return H256BinaryCodec;\n}();\n\nexports.H256BinaryCodec = H256BinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/h256.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;IAEa,e;;;;;;;;AACT;;;;AAIG;AACH,0BAAa,MAAb,EAA2B;AACvB;AACA,UAAI,KAAK,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAAZ;AACA,aAAO,CAAC,IAAI,MAAA,CAAA,SAAJ,CAAc,KAAd,CAAD,EAAuB,EAAvB,CAAP;AACH;AAED;;;;AAIG;;;;WACH,wBAAe,MAAf,EAA6B;AACzB,+BAAwB,KAAK,YAAL,CAAkB,MAAlB,CAAxB;AAAA;AAAA,UAAK,OAAL;AAAA,UAAc,MAAd;;AACA,aAAO,OAAP;AACH;AAED;;AAEG;;;;WACH,sBAAa,SAAb,EAAiC;AAC7B,aAAO,SAAS,CAAC,OAAV,EAAP;AACH;AAED;;AAEG;;;;WACH,wBAAe,SAAf,EAAmC;AAC/B,aAAO,SAAS,CAAC,OAAV,EAAP;AACH;;;;;;AAlCL,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.H256BinaryCodec = void 0;\nconst h256_1 = require(\"../typesystem/h256\");\nclass H256BinaryCodec {\n    /**\n     * Reads and decodes a H256Value from a given buffer.\n     *\n     * @param buffer the input buffer\n     */\n    decodeNested(buffer) {\n        // We don't check the size of the buffer, we just read 32 bytes.\n        let slice = buffer.slice(0, 32);\n        return [new h256_1.H256Value(slice), 32];\n    }\n    /**\n     * Reads and decodes a H256Value from a given buffer.\n     *\n     * @param buffer the input buffer\n     */\n    decodeTopLevel(buffer) {\n        let [decoded, length] = this.decodeNested(buffer);\n        return decoded;\n    }\n    /**\n     * Encodes a H256Value to a buffer.\n     */\n    encodeNested(primitive) {\n        return primitive.valueOf();\n    }\n    /**\n     * Encodes a H256Value to a buffer.\n     */\n    encodeTopLevel(primitive) {\n        return primitive.valueOf();\n    }\n}\nexports.H256BinaryCodec = H256BinaryCodec;\n//# sourceMappingURL=h256.js.map"]},"metadata":{},"sourceType":"script"}