{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/pages/Tournament/Components/Enter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { transactionServices, sendTransactions, refreshAccount } from '@elrondnetwork/dapp-core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Enter = ({\n  address,\n  socket\n}) => {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [transactionSessionId, setTransactionSessionId] = useState('');\n  const txSuccess = transactionServices.useGetSuccessfulTransactions();\n  const [nft, setNft] = useState(null);\n  const [message, setMessage] = useState(''); // Loading\n\n  function setDelay(ms) {\n    return new Promise((resolve, reject) => {\n      setTimeout(resolve, ms);\n    });\n  }\n\n  async function makeLoading() {\n    await setDelay(1000);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    makeLoading();\n  }, []);\n  useEffect(() => {\n    const handler = nfts => {\n      setNft(nfts);\n    };\n\n    socket.emit('get-status', address);\n    socket.on('recive-status', handler);\n  }, []);\n\n  const sendTransaction = async () => {\n    const estarTransaction = {\n      value: 0,\n      gasLimit: '500000',\n      data: btoa('ESDTTransfer@45535441522d616661616630@' + numHex()),\n      receiver: 'erd1q07w9xm8avd7kwj3cgn3xrnhzg5da7e3vg7dv6gs3npyql0jpq9ss35a20'\n    };\n    await refreshAccount();\n    const {\n      sessionId\n    } = await sendTransactions({\n      transactions: estarTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: false\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  async function enter(horse) {\n    const handler = message => {\n      setMessage(message);\n    };\n\n    await socket.emit('enter-tournament', address, horse);\n    await socket.on('recive-tournament-response', handler);\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sr-only\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  } else {\n    if (nft == null) {\n      return /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"You don't have nfts.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: message == '' ? nft.map(({\n          fileUri,\n          name\n        }) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12 col-md-4 text-center\",\n            onClick: () => {\n              sendTransaction();\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: fileUri,\n              className: \"d-block mx-auto\",\n              height: \"250px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: 'black'\n              },\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 21\n            }, this)]\n          }, name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 19\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"p-3\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this);\n    }\n  }\n};\n\n_s(Enter, \"UTl3a1OO2YPr4oSqDxGO4a8q9h4=\", false, function () {\n  return [transactionServices.useGetSuccessfulTransactions];\n});\n\n_c = Enter;\nexport default Enter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Enter\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/pages/Tournament/Components/Enter.js"],"names":["React","useState","useEffect","transactionServices","sendTransactions","refreshAccount","Enter","address","socket","loading","setLoading","transactionSessionId","setTransactionSessionId","txSuccess","useGetSuccessfulTransactions","nft","setNft","message","setMessage","setDelay","ms","Promise","resolve","reject","setTimeout","makeLoading","handler","nfts","emit","on","sendTransaction","estarTransaction","value","gasLimit","data","btoa","numHex","receiver","sessionId","transactions","transactionsDisplayInfo","processingMessage","errorMessage","successMessage","redirectAfterSign","enter","horse","map","fileUri","name","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { transactionServices ,sendTransactions, refreshAccount } from '@elrondnetwork/dapp-core';\n\nconst Enter = ({ address, socket }) => {\n  const [loading, setLoading] = useState(true);\n  const [transactionSessionId, setTransactionSessionId] = useState('');\n  const txSuccess = transactionServices.useGetSuccessfulTransactions();\n  const [nft, setNft] = useState(null);\n  const [message, setMessage] = useState('');\n\n  // Loading\n\n  function setDelay(ms) {\n    return new Promise((resolve, reject) => {\n      setTimeout(resolve, ms);\n    })\n  }\n\n  async function makeLoading() {\n    await setDelay(1000);\n    setLoading(false);\n  }\n  useEffect(() => {\n    makeLoading();\n  }, []);\n\n  useEffect(() => {\n    const handler = (nfts) => {\n      setNft(nfts);\n    };\n\n    socket.emit('get-status', address);\n    socket.on('recive-status', handler);\n  }, [])\n\n   const sendTransaction = async () => {\n    const estarTransaction = {\n      value: 0,\n      gasLimit: '500000',\n      data: btoa('ESDTTransfer@45535441522d616661616630@' + numHex()),\n      receiver: 'erd1q07w9xm8avd7kwj3cgn3xrnhzg5da7e3vg7dv6gs3npyql0jpq9ss35a20'\n    };\n    await refreshAccount();\n\n    const { sessionId } = await sendTransactions({\n      transactions: estarTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: false\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  async function enter(horse) {\n    const handler = (message) => {\n      setMessage(message);\n    }\n\n    await socket.emit('enter-tournament', address, horse);\n    await socket.on('recive-tournament-response', handler);\n  }\n\n  if(loading) {\n    return (\n      <div className=\"d-flex justify-content-center\">\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    );\n  } else {\n    if(nft == null) {\n      return <h3>You don't have nfts.</h3>;\n    } else {\n        return (\n          <div className=\"row\">\n            {\n              message == '' ? \n              nft.map(({ fileUri, name }) => {\n                return (\n                  <div\n                    key={name}\n                    className='col-12 col-md-4 text-center'\n                    onClick={() => {\n                      sendTransaction();\n                    }}\n                  >\n                    <img src={fileUri} className='d-block mx-auto' height='250px' />\n                    <p style={{ color: 'black' }}>{name}</p>\n                  </div>\n                );\n              }) : (\n                <h4 className='p-3'>{message}</h4>\n              )\n            \n            }\n          </div>\n        );\n    }\n  }\n}\n\nexport default Enter;\n"]},"metadata":{},"sourceType":"module"}