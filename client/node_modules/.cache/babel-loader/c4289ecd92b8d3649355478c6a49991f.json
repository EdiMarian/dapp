{"ast":null,"code":"import BigNumber from'bignumber.js';export default function nominate(input,paramDenomination){var parts=input.toString().split('.');var denomination=paramDenomination!==undefined?paramDenomination:18;if(parts[1]){// remove trailing zeros\nwhile(parts[1].substring(parts[1].length-1)==='0'&&parts[1].length>1){parts[1]=parts[1].substring(0,parts[1].length-1);}}var count=parts[1]?denomination-parts[1].length:denomination;count=count<0?0:count;var transformed=parts.join('')+'0'.repeat(count);// remove beginning zeros\nwhile(transformed.substring(0,1)==='0'&&transformed.length>1){transformed=transformed.substring(1);}return transformed;}export var nominateVal=function nominateVal(value){var perc=(parseFloat(value)*100).toString(16);if(perc.length%2!==0){perc='0'+perc;}return perc;};export var nominateValToHex=function nominateValToHex(value){var val=value&&value.length>0?new BigNumber(nominate(value)).toString(16):'0';if(val.length%2!==0){val='0'+val;}return val;};","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/helpers/nominate.ts"],"names":["BigNumber","nominate","input","paramDenomination","parts","toString","split","denomination","undefined","substring","length","count","transformed","join","repeat","nominateVal","value","perc","parseFloat","nominateValToHex","val"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CAEA,cAAe,SAASC,CAAAA,QAAT,CAAkBC,KAAlB,CAAiCC,iBAAjC,CAA6D,CAC1E,GAAMC,CAAAA,KAAK,CAAGF,KAAK,CAACG,QAAN,GAAiBC,KAAjB,CAAuB,GAAvB,CAAd,CACA,GAAMC,CAAAA,YAAY,CAAGJ,iBAAiB,GAAKK,SAAtB,CAAkCL,iBAAlC,CAAsD,EAA3E,CAEA,GAAIC,KAAK,CAAC,CAAD,CAAT,CAAc,CACZ;AACA,MACEA,KAAK,CAAC,CAAD,CAAL,CAASK,SAAT,CAAmBL,KAAK,CAAC,CAAD,CAAL,CAASM,MAAT,CAAkB,CAArC,IAA4C,GAA5C,EACAN,KAAK,CAAC,CAAD,CAAL,CAASM,MAAT,CAAkB,CAFpB,CAGE,CACAN,KAAK,CAAC,CAAD,CAAL,CAAWA,KAAK,CAAC,CAAD,CAAL,CAASK,SAAT,CAAmB,CAAnB,CAAsBL,KAAK,CAAC,CAAD,CAAL,CAASM,MAAT,CAAkB,CAAxC,CAAX,CACD,CACF,CAED,GAAIC,CAAAA,KAAK,CAAGP,KAAK,CAAC,CAAD,CAAL,CAAWG,YAAY,CAAGH,KAAK,CAAC,CAAD,CAAL,CAASM,MAAnC,CAA4CH,YAAxD,CAEAI,KAAK,CAAGA,KAAK,CAAG,CAAR,CAAY,CAAZ,CAAgBA,KAAxB,CAEA,GAAIC,CAAAA,WAAW,CAAGR,KAAK,CAACS,IAAN,CAAW,EAAX,EAAiB,IAAIC,MAAJ,CAAWH,KAAX,CAAnC,CAEA;AACA,MAAOC,WAAW,CAACH,SAAZ,CAAsB,CAAtB,CAAyB,CAAzB,IAAgC,GAAhC,EAAuCG,WAAW,CAACF,MAAZ,CAAqB,CAAnE,CAAsE,CACpEE,WAAW,CAAGA,WAAW,CAACH,SAAZ,CAAsB,CAAtB,CAAd,CACD,CAED,MAAOG,CAAAA,WAAP,CACD,CAED,MAAO,IAAMG,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAmB,CAC5C,GAAIC,CAAAA,IAAI,CAAG,CAACC,UAAU,CAACF,KAAD,CAAV,CAAoB,GAArB,EAA0BX,QAA1B,CAAmC,EAAnC,CAAX,CACA,GAAIY,IAAI,CAACP,MAAL,CAAc,CAAd,GAAoB,CAAxB,CAA2B,CACzBO,IAAI,CAAG,IAAMA,IAAb,CACD,CACD,MAAOA,CAAAA,IAAP,CACD,CANM,CAQP,MAAO,IAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACH,KAAD,CAAmB,CACjD,GAAII,CAAAA,GAAG,CACLJ,KAAK,EAAIA,KAAK,CAACN,MAAN,CAAe,CAAxB,CACI,GAAIV,CAAAA,SAAJ,CAAcC,QAAQ,CAACe,KAAD,CAAtB,EAA+BX,QAA/B,CAAwC,EAAxC,CADJ,CAEI,GAHN,CAKA,GAAIe,GAAG,CAACV,MAAJ,CAAa,CAAb,GAAmB,CAAvB,CAA0B,CACxBU,GAAG,CAAG,IAAMA,GAAZ,CACD,CAED,MAAOA,CAAAA,GAAP,CACD,CAXM","sourcesContent":["import BigNumber from 'bignumber.js';\n\nexport default function nominate(input: string, paramDenomination?: number) {\n  const parts = input.toString().split('.');\n  const denomination = paramDenomination !== undefined ? paramDenomination : 18;\n\n  if (parts[1]) {\n    // remove trailing zeros\n    while (\n      parts[1].substring(parts[1].length - 1) === '0' &&\n      parts[1].length > 1\n    ) {\n      parts[1] = parts[1].substring(0, parts[1].length - 1);\n    }\n  }\n\n  let count = parts[1] ? denomination - parts[1].length : denomination;\n\n  count = count < 0 ? 0 : count;\n\n  let transformed = parts.join('') + '0'.repeat(count);\n\n  // remove beginning zeros\n  while (transformed.substring(0, 1) === '0' && transformed.length > 1) {\n    transformed = transformed.substring(1);\n  }\n\n  return transformed;\n}\n\nexport const nominateVal = (value: string) => {\n  let perc = (parseFloat(value) * 100).toString(16);\n  if (perc.length % 2 !== 0) {\n    perc = '0' + perc;\n  }\n  return perc;\n};\n\nexport const nominateValToHex = (value: string) => {\n  let val =\n    value && value.length > 0\n      ? new BigNumber(nominate(value)).toString(16)\n      : '0';\n\n  if (val.length % 2 !== 0) {\n    val = '0' + val;\n  }\n\n  return val;\n};\n"]},"metadata":{},"sourceType":"module"}