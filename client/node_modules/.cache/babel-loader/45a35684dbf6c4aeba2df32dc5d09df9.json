{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Button/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { transactionServices, refreshAccount } from '@elrondnetwork/dapp-core';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport styles from './styles.module.scss';\nimport TxTracking from '../Layout/TxTracking';\nimport { useNavigate } from 'react-router-dom';\nimport { Modal } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = props => {\n  _s();\n\n  const navigate = useNavigate();\n  const {\n    successfulTransactionsArray\n  } = TxTracking();\n  const [, setTransactionSessionId] = useState('');\n  const [session, setSession] = useState('');\n  const {\n    address\n  } = useGetAccountInfo();\n  const {\n    sendTransactions\n  } = transactionServices;\n  const [estar, setEstar] = useState(0);\n  const [egld, setEgld] = useState(0);\n  useEffect(() => {\n    if (props.fee > 0) {\n      setEstar(props.fee * 10000);\n      setEgld(props.fee / 200);\n    }\n  }, []);\n  useEffect(() => {\n    for (let i = 0; i < successfulTransactionsArray.length; i++) {\n      if (successfulTransactionsArray[i][0] == session) {\n        navigate('/race/' + props.id);\n      }\n    }\n  }, [successfulTransactionsArray]);\n\n  const encrypt = () => {\n    return estar.toString(16);\n  };\n\n  const sendEgldTransaction = async () => {\n    const egldTransaction = {\n      value: egld ? egld * 1000000000000000000 : 0,\n      gasLimit: '70000',\n      data: 'QG9r',\n      receiver: 'erd1q07w9xm8avd7kwj3cgn3xrnhzg5da7e3vg7dv6gs3npyql0jpq9ss35a20'\n    };\n    await refreshAccount();\n    const {\n      sessionId\n    } = await sendTransactions({\n      transactions: egldTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: true\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n      setSession(sessionId);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Modal.Dialog, {\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Modal title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Modal body text goes here.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          children: \"Save changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.btn,\n      style: {\n        backgroundColor: props.color\n      },\n      onClick: sendEgldTransaction,\n      children: props.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Button, \"fUBlM+GefVdhvPqGCQbE+W+LX6Q=\", false, function () {\n  return [useNavigate, useGetAccountInfo];\n});\n\n_c = Button;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Button/index.tsx"],"names":["React","useState","useEffect","transactionServices","refreshAccount","useGetAccountInfo","styles","TxTracking","useNavigate","Modal","Button","props","navigate","successfulTransactionsArray","setTransactionSessionId","session","setSession","address","sendTransactions","estar","setEstar","egld","setEgld","fee","i","length","id","encrypt","toString","sendEgldTransaction","egldTransaction","value","gasLimit","data","receiver","sessionId","transactions","transactionsDisplayInfo","processingMessage","errorMessage","successMessage","redirectAfterSign","btn","backgroundColor","color","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { transactionServices, refreshAccount } from '@elrondnetwork/dapp-core';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport styles from './styles.module.scss';\nimport TxTracking from '../Layout/TxTracking';\nimport { useNavigate } from 'react-router-dom';\nimport { Modal } from 'react-bootstrap';\n\nconst Button = (props: any) => {\n  const navigate = useNavigate();\n  const { successfulTransactionsArray } = TxTracking();\n  const [, setTransactionSessionId] = useState('');\n  const [session, setSession] = useState('');\n  const { address } = useGetAccountInfo();\n  const { sendTransactions } = transactionServices;\n  const [estar, setEstar] = useState(0);\n  const [egld, setEgld] = useState(0);\n  useEffect(() => {\n    if (props.fee > 0) {\n      setEstar(props.fee * 10000);\n      setEgld(props.fee / 200);\n    }\n  }, []);\n  useEffect(() => {\n    for (let i = 0; i < successfulTransactionsArray.length; i++) {\n      if (successfulTransactionsArray[i][0] == session) {\n        navigate('/race/' + props.id);\n      }\n    }\n  }, [successfulTransactionsArray]);\n\n  const encrypt = () => {\n    return estar.toString(16);\n  };\n\n  const sendEgldTransaction = async () => {\n    const egldTransaction = {\n      value: egld ? egld * 1000000000000000000 : 0,\n      gasLimit: '70000',\n      data: 'QG9r',\n      receiver: 'erd1q07w9xm8avd7kwj3cgn3xrnhzg5da7e3vg7dv6gs3npyql0jpq9ss35a20'\n    };\n    await refreshAccount();\n\n    const { sessionId } = await sendTransactions({\n      transactions: egldTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: true\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n      setSession(sessionId);\n    }\n  };\n\n  return (\n    <div>\n      <Modal.Dialog>\n        <Modal.Header closeButton>\n          <Modal.Title>Modal title</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <p>Modal body text goes here.</p>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"secondary\">Close</Button>\n          <Button variant=\"primary\">Save changes</Button>\n        </Modal.Footer>\n</Modal.Dialog>\n      <button\n        className={styles.btn}\n        style={{ backgroundColor: props.color }}\n        onClick={sendEgldTransaction}\n      >\n        {props.name}\n      </button>\n    </div>\n  );\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}