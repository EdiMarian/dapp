{"ast":null,"code":"import _objectSpread from\"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{decimals as defaultDecimals,denomination as defaultDenomination}from'config';function format(big,denomination,decimals,showLastNonZeroDecimal,addCommas){showLastNonZeroDecimal=typeof showLastNonZeroDecimal!=='undefined'?showLastNonZeroDecimal:false;var array=big.toString().split('');if(denomination!==0){// make sure we have enough characters\nwhile(array.length<denomination+1){array.unshift('0');}// add our dot\narray.splice(array.length-denomination,0,'.');// make sure there are enough decimals after the dot\nwhile(array.length-array.indexOf('.')<=decimals){array.push('0');}if(showLastNonZeroDecimal){var nonZeroDigitIndex=0;for(var i=array.length-1;i>0;i--){if(array[i]!=='0'){nonZeroDigitIndex=i+1;break;}}var decimalsIndex=array.indexOf('.')+decimals+1;var sliceIndex=Math.max(decimalsIndex,nonZeroDigitIndex);array=array.slice(0,sliceIndex);}else{// trim unnecessary characters after the dot\narray=array.slice(0,array.indexOf('.')+decimals+1);}}if(addCommas){// add comas every 3 characters\narray=array.reverse();var reference=denomination?array.length-array.indexOf('.')-1:array.length;var count=Math.floor(reference/3);for(var _i=1;_i<=count;_i++){var position=array.indexOf('.')+3*_i+_i;if(position!==array.length){array.splice(position,0,',');}}array=array.reverse();}var allDecimalsZero=array.slice(array.indexOf('.')+1).every(function(digit){return digit.toString()==='0';});var string=array.join('');if(allDecimalsZero){return string.split('.')[0];}return decimals===0?string.split('.').join(''):string;}export default function denominate(_ref){var input=_ref.input,denomination=_ref.denomination,decimals=_ref.decimals,_ref$showLastNonZeroD=_ref.showLastNonZeroDecimal,showLastNonZeroDecimal=_ref$showLastNonZeroD===void 0?false:_ref$showLastNonZeroD,_ref$addCommas=_ref.addCommas,addCommas=_ref$addCommas===void 0?true:_ref$addCommas;if(input==='...'){return input;}if(input===''||input==='0'||input===undefined){input='0';}return format(input,denomination,decimals,showLastNonZeroDecimal,addCommas);}export var denominated=function denominated(input,parameters){return denominate(_objectSpread({input:input,denomination:defaultDenomination,decimals:defaultDecimals},parameters));};","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/helpers/denominate.ts"],"names":["decimals","defaultDecimals","denomination","defaultDenomination","format","big","showLastNonZeroDecimal","addCommas","array","toString","split","length","unshift","splice","indexOf","push","nonZeroDigitIndex","i","decimalsIndex","sliceIndex","Math","max","slice","reverse","reference","count","floor","position","allDecimalsZero","every","digit","string","join","denominate","input","undefined","denominated","parameters"],"mappings":"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","sourcesContent":["import {\n  decimals as defaultDecimals,\n  denomination as defaultDenomination\n} from 'config';\n\nfunction format(\n  big: string,\n  denomination: number,\n  decimals: number,\n  showLastNonZeroDecimal: boolean,\n  addCommas: boolean\n) {\n  showLastNonZeroDecimal =\n    typeof showLastNonZeroDecimal !== 'undefined'\n      ? showLastNonZeroDecimal\n      : false;\n  let array = big.toString().split('');\n  if (denomination !== 0) {\n    // make sure we have enough characters\n    while (array.length < denomination + 1) {\n      array.unshift('0');\n    }\n    // add our dot\n    array.splice(array.length - denomination, 0, '.');\n    // make sure there are enough decimals after the dot\n    while (array.length - array.indexOf('.') <= decimals) {\n      array.push('0');\n    }\n\n    if (showLastNonZeroDecimal) {\n      let nonZeroDigitIndex = 0;\n      for (let i = array.length - 1; i > 0; i--) {\n        if (array[i] !== '0') {\n          nonZeroDigitIndex = i + 1;\n          break;\n        }\n      }\n      const decimalsIndex = array.indexOf('.') + decimals + 1;\n      const sliceIndex = Math.max(decimalsIndex, nonZeroDigitIndex);\n      array = array.slice(0, sliceIndex);\n    } else {\n      // trim unnecessary characters after the dot\n      array = array.slice(0, array.indexOf('.') + decimals + 1);\n    }\n  }\n  if (addCommas) {\n    // add comas every 3 characters\n    array = array.reverse();\n    const reference = denomination\n      ? array.length - array.indexOf('.') - 1\n      : array.length;\n    const count = Math.floor(reference / 3);\n    for (let i = 1; i <= count; i++) {\n      const position = array.indexOf('.') + 3 * i + i;\n      if (position !== array.length) {\n        array.splice(position, 0, ',');\n      }\n    }\n    array = array.reverse();\n  }\n\n  const allDecimalsZero = array\n    .slice(array.indexOf('.') + 1)\n    .every((digit) => digit.toString() === '0');\n\n  const string = array.join('');\n\n  if (allDecimalsZero) {\n    return string.split('.')[0];\n  }\n\n  return decimals === 0 ? string.split('.').join('') : string;\n}\n\ninterface DenominateType {\n  input: string;\n  denomination: number;\n  decimals: number;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}\n\nexport default function denominate({\n  input,\n  denomination,\n  decimals,\n  showLastNonZeroDecimal = false,\n  addCommas = true\n}: DenominateType): string {\n  if (input === '...') {\n    return input;\n  }\n  if (input === '' || input === '0' || input === undefined) {\n    input = '0';\n  }\n  return format(\n    input,\n    denomination,\n    decimals,\n    showLastNonZeroDecimal,\n    addCommas\n  );\n}\n\ninterface DenominatedType {\n  denomination?: number;\n  decimals?: number;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}\n\nexport const denominated = (\n  input: string,\n  parameters?: DenominatedType\n): string =>\n  denominate({\n    input,\n    denomination: defaultDenomination,\n    decimals: defaultDecimals,\n    ...parameters\n  });\n"]},"metadata":{},"sourceType":"module"}