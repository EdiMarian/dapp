{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/context/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from 'react';\nimport { createContext, useReducer, useContext } from 'react';\nimport { reducer } from './reducer';\nimport { initializer } from './state';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/createContext(undefined);\nconst Dispatch = /*#__PURE__*/createContext(undefined);\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initializer);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(Dispatch.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"VXzm7+f5bIWBNcSRK5lN55+uxhk=\");\n\n_c = ContextProvider;\n\nconst useGlobalContext = () => {\n  _s2();\n\n  const context = useContext(Context);\n\n  if (context === undefined) {\n    throw new Error('The useDispatch hook must be used within a Context.Provider');\n  } else {\n    return context;\n  }\n};\n\n_s2(useGlobalContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nconst useDispatch = () => {\n  _s3();\n\n  const context = useContext(Dispatch);\n\n  if (context === undefined) {\n    throw new Error('The useDispatch hook must be used within a Dispatch.Provider');\n  } else {\n    return context;\n  }\n};\n\n_s3(useDispatch, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { ContextProvider, useGlobalContext, useDispatch };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/context/index.tsx"],"names":["React","createContext","useReducer","useContext","reducer","initializer","Context","undefined","Dispatch","ContextProvider","children","state","dispatch","useGlobalContext","context","Error","useDispatch"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAoBC,aAApB,EAAmCC,UAAnC,EAA+CC,UAA/C,QAAiE,OAAjE;AAEA,SAAuBC,OAAvB,QAAsC,WAAtC;AACA,SAAoBC,WAApB,QAAuC,SAAvC;;AAMA,MAAMC,OAAO,gBAAGL,aAAa,CAAwBM,SAAxB,CAA7B;AACA,MAAMC,QAAQ,gBAAGP,aAAa,CAA2BM,SAA3B,CAA9B;;AAEA,MAAME,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA+B;AAAA;;AACrD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,UAAU,CAACE,OAAD,EAAUC,WAAV,CAApC;AAEA,sBACE,QAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAEM,KAAzB;AAAA,2BACE,QAAC,QAAD,CAAU,QAAV;AAAmB,MAAA,KAAK,EAAEC,QAA1B;AAAA,gBAAqCF;AAArC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CARD;;GAAMD,e;;KAAAA,e;;AAUN,MAAMI,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAMC,OAAO,GAAGX,UAAU,CAACG,OAAD,CAA1B;;AAEA,MAAIQ,OAAO,KAAKP,SAAhB,EAA2B;AACzB,UAAM,IAAIQ,KAAJ,CACJ,6DADI,CAAN;AAGD,GAJD,MAIO;AACL,WAAOD,OAAP;AACD;AACF,CAVD;;IAAMD,gB;;AAYN,MAAMG,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMF,OAAO,GAAGX,UAAU,CAACK,QAAD,CAA1B;;AAEA,MAAIM,OAAO,KAAKP,SAAhB,EAA2B;AACzB,UAAM,IAAIQ,KAAJ,CACJ,8DADI,CAAN;AAGD,GAJD,MAIO;AACL,WAAOD,OAAP;AACD;AACF,CAVD;;IAAME,W;;AAYN,SAASP,eAAT,EAA0BI,gBAA1B,EAA4CG,WAA5C","sourcesContent":["import React from 'react';\nimport { ReactNode, createContext, useReducer, useContext } from 'react';\n\nimport { DispatchType, reducer } from './reducer';\nimport { StateType, initializer } from './state';\n\ninterface ContextType {\n  children: ReactNode;\n}\n\nconst Context = createContext<StateType | undefined>(undefined);\nconst Dispatch = createContext<DispatchType | undefined>(undefined);\n\nconst ContextProvider = ({ children }: ContextType) => {\n  const [state, dispatch] = useReducer(reducer, initializer);\n\n  return (\n    <Context.Provider value={state}>\n      <Dispatch.Provider value={dispatch}>{children}</Dispatch.Provider>\n    </Context.Provider>\n  );\n};\n\nconst useGlobalContext = () => {\n  const context = useContext(Context);\n\n  if (context === undefined) {\n    throw new Error(\n      'The useDispatch hook must be used within a Context.Provider'\n    );\n  } else {\n    return context;\n  }\n};\n\nconst useDispatch = () => {\n  const context = useContext(Dispatch);\n\n  if (context === undefined) {\n    throw new Error(\n      'The useDispatch hook must be used within a Dispatch.Provider'\n    );\n  } else {\n    return context;\n  }\n};\n\nexport { ContextProvider, useGlobalContext, useDispatch };\n"]},"metadata":{},"sourceType":"module"}