{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Cards/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useCallback, useEffect } from 'react';\nimport { faUsers, faServer, faLeaf, faReceipt, faArrowUp, faCog } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useLocation } from 'react-router-dom';\nimport Logo from 'assets/Logo';\nimport { denominated } from 'helpers/denominate';\nimport getPercentage from 'helpers/getPercentage';\nimport modifiable from 'helpers/modifiable';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cards = () => {\n  _s();\n\n  const location = useLocation();\n\n  const getUsersNumber = async () => {\n    dispatch({\n      type: 'getUsersNumber',\n      usersNumber: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyProvider(network.apiAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getNumUsers')\n      });\n      const data = await provider.queryContract(query);\n      const [userNumber] = data.outputUntyped();\n      dispatch({\n        type: 'getUsersNumber',\n        usersNumber: {\n          status: 'loaded',\n          data: decodeUnsignedNumber(userNumber).toString(),\n          error: null\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getUsersNumber',\n        usersNumber: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getTotalNetworkStake = async () => {\n    dispatch({\n      type: 'getTotalNetworkStake',\n      totalNetworkStake: {\n        data: null,\n        error: null,\n        status: 'loading'\n      }\n    });\n\n    try {\n      const query = new ApiProvider(network.apiAddress, {\n        timeout: 4000\n      });\n      const data = await query.getNetworkStake();\n      dispatch({\n        type: 'getTotalNetworkStake',\n        totalNetworkStake: {\n          status: 'loaded',\n          error: null,\n          data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getTotalNetworkStake',\n        totalNetworkStake: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getContractStakeData = useCallback(() => {\n    if (!totalNetworkStake.data || !totalActiveStake.data) {\n      const loading = totalNetworkStake.status === 'loading' || totalActiveStake.status === 'loading';\n      return {\n        value: loading ? `... ${network.egldLabel}` : 'Stake Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: denominated(totalNetworkStake.data.TotalStaked.toFixed()),\n      nodes: denominated(totalActiveStake.data)\n    };\n    return {\n      value: `${formatted.nodes} ${network.egldLabel}`,\n      percentage: `${getPercentage(formatted.nodes, formatted.stake)}% of total stake`\n    };\n  }, [totalNetworkStake, totalActiveStake.data]);\n  const getNodesNumber = useCallback(() => {\n    if (!totalNetworkStake.data || !nodesNumber.data) {\n      const loading = totalNetworkStake.status === 'loading' || nodesNumber.status === 'loading';\n      return {\n        value: loading ? '...' : 'Nodes Unknown',\n        percentage: loading ? '...% of total nodes' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: totalNetworkStake.data.TotalValidators.toString(),\n      nodes: nodesNumber.data.filter(key => decodeString(key) === 'staked').length.toString()\n    };\n    return {\n      value: formatted.nodes,\n      percentage: `${getPercentage(formatted.nodes, formatted.stake)}% of total nodes`\n    };\n  }, [totalNetworkStake, nodesNumber]);\n  const getDelegationCap = useCallback(() => {\n    if (!contractDetails.data || !totalActiveStake.data) {\n      const loading = totalActiveStake.status === 'loading' || contractDetails.status === 'loading';\n      return {\n        value: loading ? `... ${network.egldLabel}` : 'Cap Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: denominated(totalActiveStake.data),\n      value: denominated(contractDetails.data.delegationCap)\n    };\n    return {\n      value: `${formatted.value} ${network.egldLabel}`,\n      percentage: `${getPercentage(formatted.stake, formatted.value)}% filled`\n    };\n  }, [totalActiveStake.data, contractDetails.data]);\n\n  const getAnnualPercentage = () => {\n    const dependencies = [totalActiveStake, nodesNumber, networkStatus, totalNetworkStake, networkConfig, contractDetails];\n\n    if (dependencies.some(dependency => dependency.status === 'loading')) {\n      return '...%';\n    }\n\n    if (dependencies.every(dependency => dependency.data)) {\n      const percentage = calculateAnnualPercentage({\n        activeStake: totalActiveStake.data,\n        blsKeys: nodesNumber.data,\n        networkStatus: networkStatus.data,\n        networkStake: totalNetworkStake.data,\n        networkConfig: networkConfig.data,\n        serviceFee: parseFloat(contractDetails.data ? contractDetails.data.serviceFee.replace('%', '') : '0')\n      });\n      return `${percentage}%`;\n    }\n\n    return 'Unknown APR';\n  };\n\n  const cards = [{\n    label: 'Contract Stake',\n    data: getContractStakeData(),\n    colors: ['#2044F5', '#1B37C0'],\n    icon: /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this)\n  }, {\n    label: 'Number of Users',\n    colors: ['#6CADEF', '#5B96D2'],\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this),\n    data: {\n      value: usersNumber.status !== 'loaded' ? usersNumber.error ? 'Data Unavailable' : '...' : usersNumber.data\n    }\n  }, {\n    label: 'Number of Nodes',\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faServer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this),\n    colors: ['#36CA8C', '#2BA572'],\n    data: getNodesNumber()\n  }, {\n    label: 'Computed APR',\n    colors: ['#FBC34C', '#D49712'],\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faLeaf\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this),\n    data: {\n      value: getAnnualPercentage(),\n      percentage: 'Including Service Fee'\n    }\n  }, {\n    label: 'Service Fee',\n    modal: /*#__PURE__*/_jsxDEV(ChangeServiceFee, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 14\n    }, this),\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faReceipt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this),\n    title: 'Change service fee',\n    description: 'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n    colors: ['#F3BF89', '#B68350'],\n    data: {\n      value: contractDetails.data ? contractDetails.data.serviceFee : contractDetails.error ? 'Service Fee Unknown' : '...%'\n    }\n  }, {\n    label: 'Delegation Cap',\n    modal: /*#__PURE__*/_jsxDEV(ChangeDelegationCap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 14\n    }, this),\n    description: `The delegation cap is the maximum amount of ${network.egldLabel} your agency can stake from delegators.`,\n    title: 'Delegation Cap',\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faArrowUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this),\n    colors: ['#E48570', '#C25C45'],\n    data: getDelegationCap()\n  }];\n\n  const fetchNetworkStatus = () => {\n    if (!networkStatus.data) {\n      getNetworkStatus();\n    }\n  };\n\n  const fetchUsersNumber = () => {\n    if (!usersNumber.data) {\n      getUsersNumber();\n    }\n  };\n\n  const fetchTotalNetworkStake = () => {\n    if (!totalNetworkStake.data) {\n      getTotalNetworkStake();\n    }\n  };\n\n  useEffect(fetchUsersNumber, [usersNumber.data]);\n  useEffect(fetchNetworkStatus, [networkStatus.data]);\n  useEffect(fetchTotalNetworkStake, [totalNetworkStake.data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.cards,\n    children: cards.map(card => {\n      const [alpha, beta] = card.colors;\n      const background = `linear-gradient(180deg, ${alpha} 0%, ${beta} 100%)`;\n      const interactive = card.modal && location.pathname === '/admin';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.card,\n        style: {\n          background\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.heading,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: card.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fill: interactive ? beta : 'white'\n            },\n            className: modifiable('icon', [interactive && 'fill'], styles),\n            children: interactive ? /*#__PURE__*/_jsxDEV(Action, {\n              render: card.modal,\n              title: card.title,\n              description: card.description,\n              trigger: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.trigger,\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faCog,\n                  size: \"lg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 19\n            }, this) : card.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.value,\n          children: card.data.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this), card.data.percentage && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: card.data.percentage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 38\n        }, this)]\n      }, card.label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cards, \"wbzs2nofPlnU0rWEzChQwm02E/Y=\", false, function () {\n  return [useLocation];\n});\n\n_c = Cards;\nexport default Cards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Cards/index.tsx"],"names":["React","useCallback","useEffect","faUsers","faServer","faLeaf","faReceipt","faArrowUp","faCog","FontAwesomeIcon","useLocation","Logo","denominated","getPercentage","modifiable","styles","Cards","location","getUsersNumber","dispatch","type","usersNumber","status","data","error","provider","ProxyProvider","network","apiAddress","query","Query","address","Address","delegationContract","func","ContractFunction","queryContract","userNumber","outputUntyped","decodeUnsignedNumber","toString","getTotalNetworkStake","totalNetworkStake","ApiProvider","timeout","getNetworkStake","getContractStakeData","totalActiveStake","loading","value","egldLabel","percentage","formatted","stake","TotalStaked","toFixed","nodes","getNodesNumber","nodesNumber","TotalValidators","filter","key","decodeString","length","getDelegationCap","contractDetails","delegationCap","getAnnualPercentage","dependencies","networkStatus","networkConfig","some","dependency","every","calculateAnnualPercentage","activeStake","blsKeys","networkStake","serviceFee","parseFloat","replace","cards","label","colors","icon","modal","title","description","fetchNetworkStatus","getNetworkStatus","fetchUsersNumber","fetchTotalNetworkStake","map","card","alpha","beta","background","interactive","pathname","heading","fill","trigger"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useCallback, useEffect, ReactNode } from 'react';\n\nimport {\n  faUsers,\n  faServer,\n  faLeaf,\n  faReceipt,\n  faArrowUp,\n  faCog\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport Logo from 'assets/Logo';\n\nimport { denominated } from 'helpers/denominate';\nimport getPercentage from 'helpers/getPercentage';\nimport modifiable from 'helpers/modifiable';\nimport styles from './styles.module.scss';\n\ninterface CardType {\n  label: string;\n  colors: Array<string>;\n  data: {\n    value?: string | null;\n  };\n  title?: string;\n  description?: string;\n  modal?: ReactNode;\n  icon: ReactNode;\n}\n\nconst Cards: React.FC = () => {\n  const location = useLocation();\n\n  const getUsersNumber = async (): Promise<void> => {\n    dispatch({\n      type: 'getUsersNumber',\n      usersNumber: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyProvider(network.apiAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getNumUsers')\n      });\n\n      const data = await provider.queryContract(query);\n      const [userNumber] = data.outputUntyped();\n\n      dispatch({\n        type: 'getUsersNumber',\n        usersNumber: {\n          status: 'loaded',\n          data: decodeUnsignedNumber(userNumber).toString(),\n          error: null\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getUsersNumber',\n        usersNumber: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getTotalNetworkStake = async (): Promise<void> => {\n    dispatch({\n      type: 'getTotalNetworkStake',\n      totalNetworkStake: {\n        data: null,\n        error: null,\n        status: 'loading'\n      }\n    });\n\n    try {\n      const query = new ApiProvider(network.apiAddress, {\n        timeout: 4000\n      });\n\n      const data = await query.getNetworkStake();\n\n      dispatch({\n        type: 'getTotalNetworkStake',\n        totalNetworkStake: {\n          status: 'loaded',\n          error: null,\n          data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getTotalNetworkStake',\n        totalNetworkStake: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getContractStakeData = useCallback(() => {\n    if (!totalNetworkStake.data || !totalActiveStake.data) {\n      const loading =\n        totalNetworkStake.status === 'loading' ||\n        totalActiveStake.status === 'loading';\n\n      return {\n        value: loading ? `... ${network.egldLabel}` : 'Stake Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: denominated(totalNetworkStake.data.TotalStaked.toFixed()),\n      nodes: denominated(totalActiveStake.data)\n    };\n\n    return {\n      value: `${formatted.nodes} ${network.egldLabel}`,\n      percentage: `${getPercentage(\n        formatted.nodes,\n        formatted.stake\n      )}% of total stake`\n    };\n  }, [totalNetworkStake, totalActiveStake.data]);\n\n  const getNodesNumber = useCallback(() => {\n    if (!totalNetworkStake.data || !nodesNumber.data) {\n      const loading =\n        totalNetworkStake.status === 'loading' ||\n        nodesNumber.status === 'loading';\n\n      return {\n        value: loading ? '...' : 'Nodes Unknown',\n        percentage: loading ? '...% of total nodes' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: totalNetworkStake.data.TotalValidators.toString(),\n      nodes: nodesNumber.data\n        .filter((key: any) => decodeString(key) === 'staked')\n        .length.toString()\n    };\n\n    return {\n      value: formatted.nodes,\n      percentage: `${getPercentage(\n        formatted.nodes,\n        formatted.stake\n      )}% of total nodes`\n    };\n  }, [totalNetworkStake, nodesNumber]);\n\n  const getDelegationCap = useCallback(() => {\n    if (!contractDetails.data || !totalActiveStake.data) {\n      const loading =\n        totalActiveStake.status === 'loading' ||\n        contractDetails.status === 'loading';\n\n      return {\n        value: loading ? `... ${network.egldLabel}` : 'Cap Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: denominated(totalActiveStake.data),\n      value: denominated(contractDetails.data.delegationCap)\n    };\n\n    return {\n      value: `${formatted.value} ${network.egldLabel}`,\n      percentage: `${getPercentage(formatted.stake, formatted.value)}% filled`\n    };\n  }, [totalActiveStake.data, contractDetails.data]);\n\n  const getAnnualPercentage = () => {\n    const dependencies = [\n      totalActiveStake,\n      nodesNumber,\n      networkStatus,\n      totalNetworkStake,\n      networkConfig,\n      contractDetails\n    ];\n\n    if (dependencies.some((dependency) => dependency.status === 'loading')) {\n      return '...%';\n    }\n\n    if (dependencies.every((dependency) => dependency.data)) {\n      const percentage = calculateAnnualPercentage({\n        activeStake: totalActiveStake.data,\n        blsKeys: nodesNumber.data,\n        networkStatus: networkStatus.data,\n        networkStake: totalNetworkStake.data,\n        networkConfig: networkConfig.data,\n        serviceFee: parseFloat(\n          contractDetails.data\n            ? contractDetails.data.serviceFee.replace('%', '')\n            : '0'\n        )\n      });\n\n      return `${percentage}%`;\n    }\n\n    return 'Unknown APR';\n  };\n\n  const cards: Array<CardType> = [\n    {\n      label: 'Contract Stake',\n      data: getContractStakeData(),\n      colors: ['#2044F5', '#1B37C0'],\n      icon: <Logo />\n    },\n    {\n      label: 'Number of Users',\n      colors: ['#6CADEF', '#5B96D2'],\n      icon: <FontAwesomeIcon icon={faUsers} />,\n      data: {\n        value:\n          usersNumber.status !== 'loaded'\n            ? usersNumber.error\n              ? 'Data Unavailable'\n              : '...'\n            : usersNumber.data\n      }\n    },\n    {\n      label: 'Number of Nodes',\n      icon: <FontAwesomeIcon icon={faServer} />,\n      colors: ['#36CA8C', '#2BA572'],\n      data: getNodesNumber()\n    },\n    {\n      label: 'Computed APR',\n      colors: ['#FBC34C', '#D49712'],\n      icon: <FontAwesomeIcon icon={faLeaf} />,\n      data: {\n        value: getAnnualPercentage(),\n        percentage: 'Including Service Fee'\n      }\n    },\n    {\n      label: 'Service Fee',\n      modal: <ChangeServiceFee />,\n      icon: <FontAwesomeIcon icon={faReceipt} />,\n      title: 'Change service fee',\n      description:\n        'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n      colors: ['#F3BF89', '#B68350'],\n      data: {\n        value: contractDetails.data\n          ? contractDetails.data.serviceFee\n          : contractDetails.error\n          ? 'Service Fee Unknown'\n          : '...%'\n      }\n    },\n    {\n      label: 'Delegation Cap',\n      modal: <ChangeDelegationCap />,\n      description: `The delegation cap is the maximum amount of ${network.egldLabel} your agency can stake from delegators.`,\n      title: 'Delegation Cap',\n      icon: <FontAwesomeIcon icon={faArrowUp} />,\n      colors: ['#E48570', '#C25C45'],\n      data: getDelegationCap()\n    }\n  ];\n\n  const fetchNetworkStatus = () => {\n    if (!networkStatus.data) {\n      getNetworkStatus();\n    }\n  };\n\n  const fetchUsersNumber = () => {\n    if (!usersNumber.data) {\n      getUsersNumber();\n    }\n  };\n\n  const fetchTotalNetworkStake = () => {\n    if (!totalNetworkStake.data) {\n      getTotalNetworkStake();\n    }\n  };\n\n  useEffect(fetchUsersNumber, [usersNumber.data]);\n  useEffect(fetchNetworkStatus, [networkStatus.data]);\n  useEffect(fetchTotalNetworkStake, [totalNetworkStake.data]);\n\n  return (\n    <div className={styles.cards}>\n      {cards.map((card) => {\n        const [alpha, beta] = card.colors;\n        const background = `linear-gradient(180deg, ${alpha} 0%, ${beta} 100%)`;\n        const interactive = card.modal && location.pathname === '/admin';\n\n        return (\n          <div key={card.label} className={styles.card} style={{ background }}>\n            <div className={styles.heading}>\n              <span>{card.label}</span>\n              <div\n                style={{ fill: interactive ? beta : 'white' }}\n                className={modifiable('icon', [interactive && 'fill'], styles)}\n              >\n                {interactive ? (\n                  <Action\n                    render={card.modal}\n                    title={card.title}\n                    description={card.description}\n                    trigger={\n                      <span className={styles.trigger}>\n                        <FontAwesomeIcon icon={faCog} size='lg' />\n                      </span>\n                    }\n                  />\n                ) : (\n                  card.icon\n                )}\n              </div>\n            </div>\n\n            <div className={styles.value}>{card.data.value}</div>\n\n            {card.data.percentage && <span>{card.data.percentage}</span>}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Cards;\n"]},"metadata":{},"sourceType":"module"}