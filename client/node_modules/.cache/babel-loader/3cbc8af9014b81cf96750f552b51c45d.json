{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnumValue = exports.EnumVariantDefinition = exports.EnumType = void 0;\n\nvar utils_1 = require(\"../../utils\");\n\nvar fields_1 = require(\"./fields\");\n\nvar types_1 = require(\"./types\");\n\nvar SimpleEnumMaxDiscriminant = 256;\n\nvar EnumType = /*#__PURE__*/function (_types_1$CustomType) {\n  _inherits(EnumType, _types_1$CustomType);\n\n  var _super = _createSuper(EnumType);\n\n  function EnumType(name, variants) {\n    var _this;\n\n    _classCallCheck(this, EnumType);\n\n    _this = _super.call(this, name);\n    _this.variants = [];\n    _this.variants = variants;\n    return _this;\n  }\n\n  _createClass(EnumType, [{\n    key: \"getVariantByDiscriminant\",\n    value: function getVariantByDiscriminant(discriminant) {\n      var result = this.variants.find(function (e) {\n        return e.discriminant == discriminant;\n      });\n      utils_1.guardValueIsSet(\"variant by discriminant (\".concat(discriminant, \")\"), result);\n      return result;\n    }\n  }, {\n    key: \"getVariantByName\",\n    value: function getVariantByName(name) {\n      var result = this.variants.find(function (e) {\n        return e.name == name;\n      });\n      utils_1.guardValueIsSet(\"variant by name (\".concat(name, \")\"), result);\n      return result;\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      var variants = (json.variants || []).map(function (variant) {\n        return EnumVariantDefinition.fromJSON(variant);\n      });\n      return new EnumType(json.name, variants);\n    }\n  }]);\n\n  return EnumType;\n}(types_1.CustomType);\n\nexports.EnumType = EnumType;\n\nvar EnumVariantDefinition = /*#__PURE__*/function () {\n  function EnumVariantDefinition(name, discriminant) {\n    var fieldsDefinitions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, EnumVariantDefinition);\n\n    this.fieldsDefinitions = [];\n    utils_1.guardTrue(discriminant < SimpleEnumMaxDiscriminant, \"discriminant for simple enum should be less than \".concat(SimpleEnumMaxDiscriminant));\n    this.name = name;\n    this.discriminant = discriminant;\n    this.fieldsDefinitions = fieldsDefinitions;\n  }\n\n  _createClass(EnumVariantDefinition, [{\n    key: \"getFieldsDefinitions\",\n    value: function getFieldsDefinitions() {\n      return this.fieldsDefinitions;\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      var definitions = (json.fields || []).map(function (definition) {\n        return fields_1.FieldDefinition.fromJSON(definition);\n      });\n      return new EnumVariantDefinition(json.name, json.discriminant, definitions);\n    }\n  }]);\n\n  return EnumVariantDefinition;\n}();\n\nexports.EnumVariantDefinition = EnumVariantDefinition;\n\nvar EnumValue = /*#__PURE__*/function (_types_1$TypedValue) {\n  _inherits(EnumValue, _types_1$TypedValue);\n\n  var _super2 = _createSuper(EnumValue);\n\n  function EnumValue(type, variant, fields) {\n    var _this2;\n\n    _classCallCheck(this, EnumValue);\n\n    _this2 = _super2.call(this, type);\n    _this2.fields = [];\n    _this2.name = variant.name;\n    _this2.discriminant = variant.discriminant;\n    _this2.fields = fields;\n    var definitions = variant.getFieldsDefinitions();\n    fields_1.Fields.checkTyping(_this2.fields, definitions);\n    return _this2;\n  }\n  /**\n   * Utility (named constructor) to create a simple (i.e. without fields) enum value.\n   */\n\n\n  _createClass(EnumValue, [{\n    key: \"equals\",\n    value: function equals(other) {\n      if (!this.getType().equals(other.getType())) {\n        return false;\n      }\n\n      var selfFields = this.getFields();\n      var otherFields = other.getFields();\n      var nameIsSame = this.name == other.name;\n      var discriminantIsSame = this.discriminant == other.discriminant;\n      var fieldsAreSame = fields_1.Fields.equals(selfFields, otherFields);\n      return nameIsSame && discriminantIsSame && fieldsAreSame;\n    }\n  }, {\n    key: \"getFields\",\n    value: function getFields() {\n      return this.fields;\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      var result = {\n        name: this.name,\n        fields: []\n      };\n      this.fields.forEach(function (field) {\n        return result.fields[field.name] = field.value.valueOf();\n      });\n      return result;\n    }\n  }], [{\n    key: \"fromName\",\n    value: function fromName(type, name) {\n      var variant = type.getVariantByName(name);\n      return new EnumValue(type, variant, []);\n    }\n    /**\n     * Utility (named constructor) to create a simple (i.e. without fields) enum value.\n     */\n\n  }, {\n    key: \"fromDiscriminant\",\n    value: function fromDiscriminant(type, discriminant) {\n      var variant = type.getVariantByDiscriminant(discriminant);\n      return new EnumValue(type, variant, []);\n    }\n  }]);\n\n  return EnumValue;\n}(types_1.TypedValue);\n\nexports.EnumValue = EnumValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/enum.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EnumValue = exports.EnumVariantDefinition = exports.EnumType = void 0;\nconst utils_1 = require(\"../../utils\");\nconst fields_1 = require(\"./fields\");\nconst types_1 = require(\"./types\");\nconst SimpleEnumMaxDiscriminant = 256;\nclass EnumType extends types_1.CustomType {\n    constructor(name, variants) {\n        super(name);\n        this.variants = [];\n        this.variants = variants;\n    }\n    static fromJSON(json) {\n        let variants = (json.variants || []).map((variant) => EnumVariantDefinition.fromJSON(variant));\n        return new EnumType(json.name, variants);\n    }\n    getVariantByDiscriminant(discriminant) {\n        let result = this.variants.find((e) => e.discriminant == discriminant);\n        utils_1.guardValueIsSet(`variant by discriminant (${discriminant})`, result);\n        return result;\n    }\n    getVariantByName(name) {\n        let result = this.variants.find((e) => e.name == name);\n        utils_1.guardValueIsSet(`variant by name (${name})`, result);\n        return result;\n    }\n}\nexports.EnumType = EnumType;\nclass EnumVariantDefinition {\n    constructor(name, discriminant, fieldsDefinitions = []) {\n        this.fieldsDefinitions = [];\n        utils_1.guardTrue(discriminant < SimpleEnumMaxDiscriminant, `discriminant for simple enum should be less than ${SimpleEnumMaxDiscriminant}`);\n        this.name = name;\n        this.discriminant = discriminant;\n        this.fieldsDefinitions = fieldsDefinitions;\n    }\n    static fromJSON(json) {\n        let definitions = (json.fields || []).map((definition) => fields_1.FieldDefinition.fromJSON(definition));\n        return new EnumVariantDefinition(json.name, json.discriminant, definitions);\n    }\n    getFieldsDefinitions() {\n        return this.fieldsDefinitions;\n    }\n}\nexports.EnumVariantDefinition = EnumVariantDefinition;\nclass EnumValue extends types_1.TypedValue {\n    constructor(type, variant, fields) {\n        super(type);\n        this.fields = [];\n        this.name = variant.name;\n        this.discriminant = variant.discriminant;\n        this.fields = fields;\n        let definitions = variant.getFieldsDefinitions();\n        fields_1.Fields.checkTyping(this.fields, definitions);\n    }\n    /**\n     * Utility (named constructor) to create a simple (i.e. without fields) enum value.\n     */\n    static fromName(type, name) {\n        let variant = type.getVariantByName(name);\n        return new EnumValue(type, variant, []);\n    }\n    /**\n     * Utility (named constructor) to create a simple (i.e. without fields) enum value.\n     */\n    static fromDiscriminant(type, discriminant) {\n        let variant = type.getVariantByDiscriminant(discriminant);\n        return new EnumValue(type, variant, []);\n    }\n    equals(other) {\n        if (!this.getType().equals(other.getType())) {\n            return false;\n        }\n        let selfFields = this.getFields();\n        let otherFields = other.getFields();\n        const nameIsSame = this.name == other.name;\n        const discriminantIsSame = this.discriminant == other.discriminant;\n        const fieldsAreSame = fields_1.Fields.equals(selfFields, otherFields);\n        return nameIsSame && discriminantIsSame && fieldsAreSame;\n    }\n    getFields() {\n        return this.fields;\n    }\n    valueOf() {\n        let result = { name: this.name, fields: [] };\n        this.fields.forEach((field) => (result.fields[field.name] = field.value.valueOf()));\n        return result;\n    }\n}\nexports.EnumValue = EnumValue;\n//# sourceMappingURL=enum.js.map"]},"metadata":{},"sourceType":"script"}