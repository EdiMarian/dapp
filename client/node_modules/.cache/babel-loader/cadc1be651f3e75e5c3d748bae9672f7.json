{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Cards/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useCallback, useEffect } from 'react';\nimport { getNetworkProxy } from '@elrondnetwork/dapp-core';\nimport { decodeUnsignedNumber, ContractFunction, ProxyProvider, Address, Query, decodeString, ApiProvider } from '@elrondnetwork/erdjs';\nimport { faUsers, faServer, faLeaf, faReceipt, faArrowUp, faCog } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport Logo from 'assets/Logo';\nimport Action from 'components/Action';\nimport { network, auctionContract } from 'config';\nimport { useGlobalContext, useDispatch } from 'context';\nimport { denominated } from 'helpers/denominate';\nimport getPercentage from 'helpers/getPercentage';\nimport modifiable from 'helpers/modifiable';\nimport ChangeDelegationCap from './components/ChangeDelegationCap';\nimport ChangeServiceFee from './components/ChangeServiceFee';\nimport calculateAnnualPercentage from './helpers/calculateAnnualPercentage';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cards = () => {\n  _s();\n\n  const {\n    totalActiveStake,\n    totalNetworkStake,\n    usersNumber,\n    nodesNumber,\n    networkStatus,\n    contractDetails,\n    networkConfig\n  } = useGlobalContext();\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  const getNetworkStatus = async () => {\n    dispatch({\n      type: 'getNetworkStatus',\n      networkStatus: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const [status, balance] = await Promise.all([getNetworkProxy().getNetworkStatus(), axios.get(`${network.apiAddress}/accounts/${auctionContract}`)]);\n      dispatch({\n        type: 'getNetworkStatus',\n        networkStatus: {\n          status: 'loaded',\n          error: null,\n          data: { ...status,\n            Balance: balance.data.balance\n          }\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getNetworkStatus',\n        networkStatus: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getUsersNumber = async () => {\n    dispatch({\n      type: 'getUsersNumber',\n      usersNumber: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyProvider(network.apiAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getNumUsers')\n      });\n      const data = await provider.queryContract(query);\n      const [userNumber] = data.outputUntyped();\n      dispatch({\n        type: 'getUsersNumber',\n        usersNumber: {\n          status: 'loaded',\n          data: decodeUnsignedNumber(userNumber).toString(),\n          error: null\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getUsersNumber',\n        usersNumber: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getTotalNetworkStake = async () => {\n    dispatch({\n      type: 'getTotalNetworkStake',\n      totalNetworkStake: {\n        data: null,\n        error: null,\n        status: 'loading'\n      }\n    });\n\n    try {\n      const query = new ApiProvider(network.apiAddress, {\n        timeout: 4000\n      });\n      const data = await query.getNetworkStake();\n      dispatch({\n        type: 'getTotalNetworkStake',\n        totalNetworkStake: {\n          status: 'loaded',\n          error: null,\n          data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getTotalNetworkStake',\n        totalNetworkStake: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getContractStakeData = useCallback(() => {\n    if (!totalNetworkStake.data || !totalActiveStake.data) {\n      const loading = totalNetworkStake.status === 'loading' || totalActiveStake.status === 'loading';\n      return {\n        value: loading ? `... ${network.egldLabel}` : 'Stake Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: denominated(totalNetworkStake.data.TotalStaked.toFixed()),\n      nodes: denominated(totalActiveStake.data)\n    };\n    return {\n      value: `${formatted.nodes} ${network.egldLabel}`,\n      percentage: `${getPercentage(formatted.nodes, formatted.stake)}% of total stake`\n    };\n  }, [totalNetworkStake, totalActiveStake.data]);\n  const getNodesNumber = useCallback(() => {\n    if (!totalNetworkStake.data || !nodesNumber.data) {\n      const loading = totalNetworkStake.status === 'loading' || nodesNumber.status === 'loading';\n      return {\n        value: loading ? '...' : 'Nodes Unknown',\n        percentage: loading ? '...% of total nodes' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: totalNetworkStake.data.TotalValidators.toString(),\n      nodes: nodesNumber.data.filter(key => decodeString(key) === 'staked').length.toString()\n    };\n    return {\n      value: formatted.nodes,\n      percentage: `${getPercentage(formatted.nodes, formatted.stake)}% of total nodes`\n    };\n  }, [totalNetworkStake, nodesNumber]);\n  const getDelegationCap = useCallback(() => {\n    if (!contractDetails.data || !totalActiveStake.data) {\n      const loading = totalActiveStake.status === 'loading' || contractDetails.status === 'loading';\n      return {\n        value: loading ? `... ${network.egldLabel}` : 'Cap Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: denominated(totalActiveStake.data),\n      value: denominated(contractDetails.data.delegationCap)\n    };\n    return {\n      value: `${formatted.value} ${network.egldLabel}`,\n      percentage: `${getPercentage(formatted.stake, formatted.value)}% filled`\n    };\n  }, [totalActiveStake.data, contractDetails.data]);\n\n  const getAnnualPercentage = () => {\n    const dependencies = [totalActiveStake, nodesNumber, networkStatus, totalNetworkStake, networkConfig, contractDetails];\n\n    if (dependencies.some(dependency => dependency.status === 'loading')) {\n      return '...%';\n    }\n\n    if (dependencies.every(dependency => dependency.data)) {\n      const percentage = calculateAnnualPercentage({\n        activeStake: totalActiveStake.data,\n        blsKeys: nodesNumber.data,\n        networkStatus: networkStatus.data,\n        networkStake: totalNetworkStake.data,\n        networkConfig: networkConfig.data,\n        serviceFee: parseFloat(contractDetails.data ? contractDetails.data.serviceFee.replace('%', '') : '0')\n      });\n      return `${percentage}%`;\n    }\n\n    return 'Unknown APR';\n  };\n\n  const cards = [{\n    label: 'Contract Stake',\n    data: getContractStakeData(),\n    colors: ['#2044F5', '#1B37C0'],\n    icon: /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }, this)\n  }, {\n    label: 'Number of Users',\n    colors: ['#6CADEF', '#5B96D2'],\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this),\n    data: {\n      value: usersNumber.status !== 'loaded' ? usersNumber.error ? 'Data Unavailable' : '...' : usersNumber.data\n    }\n  }, {\n    label: 'Number of Nodes',\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faServer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this),\n    colors: ['#36CA8C', '#2BA572'],\n    data: getNodesNumber()\n  }, {\n    label: 'Computed APR',\n    colors: ['#FBC34C', '#D49712'],\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faLeaf\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }, this),\n    data: {\n      value: getAnnualPercentage(),\n      percentage: 'Including Service Fee'\n    }\n  }, {\n    label: 'Service Fee',\n    modal: /*#__PURE__*/_jsxDEV(ChangeServiceFee, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 14\n    }, this),\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faReceipt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 13\n    }, this),\n    title: 'Change service fee',\n    description: 'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n    colors: ['#F3BF89', '#B68350'],\n    data: {\n      value: contractDetails.data ? contractDetails.data.serviceFee : contractDetails.error ? 'Service Fee Unknown' : '...%'\n    }\n  }, {\n    label: 'Delegation Cap',\n    modal: /*#__PURE__*/_jsxDEV(ChangeDelegationCap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 14\n    }, this),\n    description: `The delegation cap is the maximum amount of ${network.egldLabel} your agency can stake from delegators.`,\n    title: 'Delegation Cap',\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faArrowUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }, this),\n    colors: ['#E48570', '#C25C45'],\n    data: getDelegationCap()\n  }];\n\n  const fetchNetworkStatus = () => {\n    if (!networkStatus.data) {\n      getNetworkStatus();\n    }\n  };\n\n  const fetchUsersNumber = () => {\n    if (!usersNumber.data) {\n      getUsersNumber();\n    }\n  };\n\n  const fetchTotalNetworkStake = () => {\n    if (!totalNetworkStake.data) {\n      getTotalNetworkStake();\n    }\n  };\n\n  useEffect(fetchUsersNumber, [usersNumber.data]);\n  useEffect(fetchNetworkStatus, [networkStatus.data]);\n  useEffect(fetchTotalNetworkStake, [totalNetworkStake.data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.cards,\n    children: cards.map(card => {\n      const [alpha, beta] = card.colors;\n      const background = `linear-gradient(180deg, ${alpha} 0%, ${beta} 100%)`;\n      const interactive = card.modal && location.pathname === '/admin';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.card,\n        style: {\n          background\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.heading,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: card.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fill: interactive ? beta : 'white'\n            },\n            className: modifiable('icon', [interactive && 'fill'], styles),\n            children: interactive ? /*#__PURE__*/_jsxDEV(Action, {\n              render: card.modal,\n              title: card.title,\n              description: card.description,\n              trigger: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.trigger,\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faCog,\n                  size: \"lg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 19\n            }, this) : card.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.value,\n          children: card.data.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this), card.data.percentage && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: card.data.percentage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 38\n        }, this)]\n      }, card.label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 379,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cards, \"J4Xi+Q3UISr7WtOjjcVxHJ8jV5I=\", false, function () {\n  return [useGlobalContext, useDispatch, useLocation];\n});\n\n_c = Cards;\nexport default Cards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Cards/index.tsx"],"names":["React","useCallback","useEffect","getNetworkProxy","decodeUnsignedNumber","ContractFunction","ProxyProvider","Address","Query","decodeString","ApiProvider","faUsers","faServer","faLeaf","faReceipt","faArrowUp","faCog","FontAwesomeIcon","axios","useLocation","Logo","Action","network","auctionContract","useGlobalContext","useDispatch","denominated","getPercentage","modifiable","ChangeDelegationCap","ChangeServiceFee","calculateAnnualPercentage","styles","Cards","totalActiveStake","totalNetworkStake","usersNumber","nodesNumber","networkStatus","contractDetails","networkConfig","dispatch","location","getNetworkStatus","type","status","data","error","balance","Promise","all","get","apiAddress","Balance","getUsersNumber","provider","query","address","delegationContract","func","queryContract","userNumber","outputUntyped","toString","getTotalNetworkStake","timeout","getNetworkStake","getContractStakeData","loading","value","egldLabel","percentage","formatted","stake","TotalStaked","toFixed","nodes","getNodesNumber","TotalValidators","filter","key","length","getDelegationCap","delegationCap","getAnnualPercentage","dependencies","some","dependency","every","activeStake","blsKeys","networkStake","serviceFee","parseFloat","replace","cards","label","colors","icon","modal","title","description","fetchNetworkStatus","fetchUsersNumber","fetchTotalNetworkStake","map","card","alpha","beta","background","interactive","pathname","heading","fill","trigger"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useCallback, useEffect, ReactNode } from 'react';\n\nimport { getNetworkProxy } from '@elrondnetwork/dapp-core';\nimport {\n  decodeUnsignedNumber,\n  ContractFunction,\n  ProxyProvider,\n  Address,\n  Query,\n  decodeString,\n  ApiProvider\n} from '@elrondnetwork/erdjs';\nimport {\n  faUsers,\n  faServer,\n  faLeaf,\n  faReceipt,\n  faArrowUp,\n  faCog\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport Logo from 'assets/Logo';\n\nimport Action from 'components/Action';\nimport { network, auctionContract } from 'config';\nimport { useGlobalContext, useDispatch } from 'context';\nimport { denominated } from 'helpers/denominate';\nimport getPercentage from 'helpers/getPercentage';\nimport modifiable from 'helpers/modifiable';\nimport ChangeDelegationCap from './components/ChangeDelegationCap';\nimport ChangeServiceFee from './components/ChangeServiceFee';\n\nimport calculateAnnualPercentage from './helpers/calculateAnnualPercentage';\n\nimport styles from './styles.module.scss';\n\ninterface CardType {\n  label: string;\n  colors: Array<string>;\n  data: {\n    value?: string | null;\n    percentage?: string | undefined;\n  };\n  title?: string;\n  description?: string;\n  modal?: ReactNode;\n  icon: ReactNode;\n}\n\nconst Cards: React.FC = () => {\n  const {\n    totalActiveStake,\n    totalNetworkStake,\n    usersNumber,\n    nodesNumber,\n    networkStatus,\n    contractDetails,\n    networkConfig\n  } = useGlobalContext();\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  const getNetworkStatus = async (): Promise<void> => {\n    dispatch({\n      type: 'getNetworkStatus',\n      networkStatus: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const [status, balance] = await Promise.all([\n        getNetworkProxy().getNetworkStatus(),\n        axios.get(`${network.apiAddress}/accounts/${auctionContract}`)\n      ]);\n\n      dispatch({\n        type: 'getNetworkStatus',\n        networkStatus: {\n          status: 'loaded',\n          error: null,\n          data: {\n            ...status,\n            Balance: balance.data.balance\n          }\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getNetworkStatus',\n        networkStatus: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getUsersNumber = async (): Promise<void> => {\n    dispatch({\n      type: 'getUsersNumber',\n      usersNumber: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyProvider(network.apiAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getNumUsers')\n      });\n\n      const data = await provider.queryContract(query);\n      const [userNumber] = data.outputUntyped();\n\n      dispatch({\n        type: 'getUsersNumber',\n        usersNumber: {\n          status: 'loaded',\n          data: decodeUnsignedNumber(userNumber).toString(),\n          error: null\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getUsersNumber',\n        usersNumber: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getTotalNetworkStake = async (): Promise<void> => {\n    dispatch({\n      type: 'getTotalNetworkStake',\n      totalNetworkStake: {\n        data: null,\n        error: null,\n        status: 'loading'\n      }\n    });\n\n    try {\n      const query = new ApiProvider(network.apiAddress, {\n        timeout: 4000\n      });\n\n      const data = await query.getNetworkStake();\n\n      dispatch({\n        type: 'getTotalNetworkStake',\n        totalNetworkStake: {\n          status: 'loaded',\n          error: null,\n          data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getTotalNetworkStake',\n        totalNetworkStake: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getContractStakeData = useCallback(() => {\n    if (!totalNetworkStake.data || !totalActiveStake.data) {\n      const loading =\n        totalNetworkStake.status === 'loading' ||\n        totalActiveStake.status === 'loading';\n\n      return {\n        value: loading ? `... ${network.egldLabel}` : 'Stake Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: denominated(totalNetworkStake.data.TotalStaked.toFixed()),\n      nodes: denominated(totalActiveStake.data)\n    };\n\n    return {\n      value: `${formatted.nodes} ${network.egldLabel}`,\n      percentage: `${getPercentage(\n        formatted.nodes,\n        formatted.stake\n      )}% of total stake`\n    };\n  }, [totalNetworkStake, totalActiveStake.data]);\n\n  const getNodesNumber = useCallback(() => {\n    if (!totalNetworkStake.data || !nodesNumber.data) {\n      const loading =\n        totalNetworkStake.status === 'loading' ||\n        nodesNumber.status === 'loading';\n\n      return {\n        value: loading ? '...' : 'Nodes Unknown',\n        percentage: loading ? '...% of total nodes' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: totalNetworkStake.data.TotalValidators.toString(),\n      nodes: nodesNumber.data\n        .filter((key: any) => decodeString(key) === 'staked')\n        .length.toString()\n    };\n\n    return {\n      value: formatted.nodes,\n      percentage: `${getPercentage(\n        formatted.nodes,\n        formatted.stake\n      )}% of total nodes`\n    };\n  }, [totalNetworkStake, nodesNumber]);\n\n  const getDelegationCap = useCallback(() => {\n    if (!contractDetails.data || !totalActiveStake.data) {\n      const loading =\n        totalActiveStake.status === 'loading' ||\n        contractDetails.status === 'loading';\n\n      return {\n        value: loading ? `... ${network.egldLabel}` : 'Cap Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: denominated(totalActiveStake.data),\n      value: denominated(contractDetails.data.delegationCap)\n    };\n\n    return {\n      value: `${formatted.value} ${network.egldLabel}`,\n      percentage: `${getPercentage(formatted.stake, formatted.value)}% filled`\n    };\n  }, [totalActiveStake.data, contractDetails.data]);\n\n  const getAnnualPercentage = () => {\n    const dependencies = [\n      totalActiveStake,\n      nodesNumber,\n      networkStatus,\n      totalNetworkStake,\n      networkConfig,\n      contractDetails\n    ];\n\n    if (dependencies.some((dependency) => dependency.status === 'loading')) {\n      return '...%';\n    }\n\n    if (dependencies.every((dependency) => dependency.data)) {\n      const percentage = calculateAnnualPercentage({\n        activeStake: totalActiveStake.data,\n        blsKeys: nodesNumber.data,\n        networkStatus: networkStatus.data,\n        networkStake: totalNetworkStake.data,\n        networkConfig: networkConfig.data,\n        serviceFee: parseFloat(\n          contractDetails.data\n            ? contractDetails.data.serviceFee.replace('%', '')\n            : '0'\n        )\n      });\n\n      return `${percentage}%`;\n    }\n\n    return 'Unknown APR';\n  };\n\n  const cards: Array<CardType> = [\n    {\n      label: 'Contract Stake',\n      data: getContractStakeData(),\n      colors: ['#2044F5', '#1B37C0'],\n      icon: <Logo />\n    },\n    {\n      label: 'Number of Users',\n      colors: ['#6CADEF', '#5B96D2'],\n      icon: <FontAwesomeIcon icon={faUsers} />,\n      data: {\n        value:\n          usersNumber.status !== 'loaded'\n            ? usersNumber.error\n              ? 'Data Unavailable'\n              : '...'\n            : usersNumber.data\n      }\n    },\n    {\n      label: 'Number of Nodes',\n      icon: <FontAwesomeIcon icon={faServer} />,\n      colors: ['#36CA8C', '#2BA572'],\n      data: getNodesNumber()\n    },\n    {\n      label: 'Computed APR',\n      colors: ['#FBC34C', '#D49712'],\n      icon: <FontAwesomeIcon icon={faLeaf} />,\n      data: {\n        value: getAnnualPercentage(),\n        percentage: 'Including Service Fee'\n      }\n    },\n    {\n      label: 'Service Fee',\n      modal: <ChangeServiceFee />,\n      icon: <FontAwesomeIcon icon={faReceipt} />,\n      title: 'Change service fee',\n      description:\n        'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n      colors: ['#F3BF89', '#B68350'],\n      data: {\n        value: contractDetails.data\n          ? contractDetails.data.serviceFee\n          : contractDetails.error\n          ? 'Service Fee Unknown'\n          : '...%'\n      }\n    },\n    {\n      label: 'Delegation Cap',\n      modal: <ChangeDelegationCap />,\n      description: `The delegation cap is the maximum amount of ${network.egldLabel} your agency can stake from delegators.`,\n      title: 'Delegation Cap',\n      icon: <FontAwesomeIcon icon={faArrowUp} />,\n      colors: ['#E48570', '#C25C45'],\n      data: getDelegationCap()\n    }\n  ];\n\n  const fetchNetworkStatus = () => {\n    if (!networkStatus.data) {\n      getNetworkStatus();\n    }\n  };\n\n  const fetchUsersNumber = () => {\n    if (!usersNumber.data) {\n      getUsersNumber();\n    }\n  };\n\n  const fetchTotalNetworkStake = () => {\n    if (!totalNetworkStake.data) {\n      getTotalNetworkStake();\n    }\n  };\n\n  useEffect(fetchUsersNumber, [usersNumber.data]);\n  useEffect(fetchNetworkStatus, [networkStatus.data]);\n  useEffect(fetchTotalNetworkStake, [totalNetworkStake.data]);\n\n  return (\n    <div className={styles.cards}>\n      {cards.map((card) => {\n        const [alpha, beta] = card.colors;\n        const background = `linear-gradient(180deg, ${alpha} 0%, ${beta} 100%)`;\n        const interactive = card.modal && location.pathname === '/admin';\n\n        return (\n          <div key={card.label} className={styles.card} style={{ background }}>\n            <div className={styles.heading}>\n              <span>{card.label}</span>\n              <div\n                style={{ fill: interactive ? beta : 'white' }}\n                className={modifiable('icon', [interactive && 'fill'], styles)}\n              >\n                {interactive ? (\n                  <Action\n                    render={card.modal}\n                    title={card.title}\n                    description={card.description}\n                    trigger={\n                      <span className={styles.trigger}>\n                        <FontAwesomeIcon icon={faCog} size='lg' />\n                      </span>\n                    }\n                  />\n                ) : (\n                  card.icon\n                )}\n              </div>\n            </div>\n\n            <div className={styles.value}>{card.data.value}</div>\n\n            {card.data.percentage && <span>{card.data.percentage}</span>}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Cards;\n"]},"metadata":{},"sourceType":"module"}