{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/src/pages/Race/Track/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Track() {\n  _s();\n\n  const loc = useLocation().pathname.replace('/race/track/', '');\n  const navigate = useNavigate();\n  const {\n    address\n  } = useGetAccountInfo();\n  const nftFetchUrl = `https://api.elrond.com/accounts/${address}/nfts?collection=EQUISTAR-3f393f`;\n\n  const nftWalletFetch = () => fetch(nftFetchUrl).then(res => res.json());\n\n  const [nft, setNft] = useState([]);\n  const [slots, setSlots] = useState([]);\n  const [exist, setExist] = useState(false);\n\n  const getSlotsAvailable = async () => {\n    axios.get(`http://localhost:4000/backend/race/${loc}`).then(res => {\n      setSlots(res.data);\n\n      if (res.data != []) {\n        setExist(true);\n      }\n    }).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    getSlotsAvailable();\n    nftWalletFetch().then(data => setNft(data));\n  }, []);\n\n  function createRace(e) {\n    getSlotsAvailable();\n\n    if (slots != null) {\n      getClass();\n\n      if (clasa) {\n        axios.post('http://localhost:4000/race/enter', {\n          address: address,\n          horse: e.name,\n          track: {\n            name: loc,\n            class: clasa\n          },\n          fee: {\n            paid: true,\n            pwith: 'EGLD'\n          }\n        });\n        navigate('/race/view');\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.title,\n      children: \"Select your horse!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.nftGrid,\n      children: nft ? nft.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.nftContent,\n        onClick: () => createRace(item),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.url,\n          className: styles.img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)\n      }, item.identifier, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You don't have EquiStar Nfts.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Track, \"eCHWO5s0A3E4jsZbHvst4UZqXGQ=\", false, function () {\n  return [useLocation, useNavigate, useGetAccountInfo];\n});\n\n_c = Track;\nexport default Track;\n\nvar _c;\n\n$RefreshReg$(_c, \"Track\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/pages/Race/Track/index.js"],"names":["React","useState","useEffect","useGetAccountInfo","useLocation","useNavigate","axios","styles","Track","loc","pathname","replace","navigate","address","nftFetchUrl","nftWalletFetch","fetch","then","res","json","nft","setNft","slots","setSlots","exist","setExist","getSlotsAvailable","get","data","catch","err","console","log","createRace","e","getClass","clasa","post","horse","name","track","class","fee","paid","pwith","title","nftGrid","map","item","nftContent","url","img","identifier"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\n\nimport styles from './styles.module.scss';\n\nfunction Track() {\n  const loc = useLocation().pathname.replace('/race/track/', '');\n  const navigate = useNavigate();\n  const { address } = useGetAccountInfo();\n  const nftFetchUrl = `https://api.elrond.com/accounts/${address}/nfts?collection=EQUISTAR-3f393f`;\n  const nftWalletFetch = () => fetch(nftFetchUrl).then((res) => res.json());\n  const [nft, setNft] = useState([]);\n  const [slots, setSlots] = useState([]);\n  const [exist, setExist] = useState(false);\n\n  const getSlotsAvailable = async () => {\n    axios\n      .get(`http://localhost:4000/backend/race/${loc}`)\n      .then((res) => {\n        setSlots(res.data);\n        if (res.data != []) {\n          setExist(true);\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    getSlotsAvailable();\n    nftWalletFetch().then((data) => setNft(data));\n  }, []);\n\n  function createRace(e) {\n    getSlotsAvailable();\n    if (slots != null) {\n      getClass();\n      if (clasa) {\n        axios.post('http://localhost:4000/race/enter', {\n          address: address,\n          horse: e.name,\n          track: {\n            name: loc,\n            class: clasa\n          },\n          fee: {\n            paid: true,\n            pwith: 'EGLD'\n          }\n        });\n        navigate('/race/view');\n      }\n    }\n  }\n\n  return (\n    <div>\n      <h1 className={styles.title}>Select your horse!</h1>\n      <div className={styles.nftGrid}>\n        {nft ? (\n          nft.map((item) => (\n            <div\n              key={item.identifier}\n              className={styles.nftContent}\n              onClick={() => createRace(item)}\n            >\n              <img src={item.url} className={styles.img} />\n            </div>\n          ))\n        ) : (\n          <p>You don&apos;t have EquiStar Nfts.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Track;\n"]},"metadata":{},"sourceType":"module"}