{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScArgumentsParser = void 0;\n\nvar errors_1 = require(\"./errors\");\n/**\n * Class with static methods useful for fetching and checking arguments from a transaction's data field that should trigger\n * a smart contract call\n */\n\n\nvar ScArgumentsParser = /*#__PURE__*/function () {\n  function ScArgumentsParser() {\n    _classCallCheck(this, ScArgumentsParser);\n  }\n\n  _createClass(ScArgumentsParser, null, [{\n    key: \"parseSmartContractCallDataField\",\n    value:\n    /**\n     * Returns an array containing all the arguments from a data field representing a smart contract call\n     * @param dataField this field represents the data filed to extract arguments from\n     * @return {functionName, args} returns the function name and an array containing all the smart contract call arguments\n     * @throws ErrInvalidScCallDataField the function returns an ErrInvalidScCallDataField exception if the input isn't a smart contract call valid input\n     */\n    function parseSmartContractCallDataField(dataField) {\n      if (!this.isValidSmartContractCallDataField(dataField)) {\n        throw new errors_1.ErrInvalidScCallDataField(dataField);\n      }\n\n      var args = new Array();\n      var items = dataField.split(\"@\");\n\n      if (items.length === 0) {\n        return {\n          functionName: dataField,\n          args: new Array()\n        };\n      }\n\n      for (var i = 1; i < items.length; i++) {\n        args.push(items[i]);\n      }\n\n      return {\n        functionName: items[0],\n        args: args\n      };\n    }\n    /**\n     * Returns a Boolean value representing if the input data field is a valid smart contract call input\n     * @param dataField this field represents the input to check\n     */\n\n  }, {\n    key: \"isValidSmartContractCallDataField\",\n    value: function isValidSmartContractCallDataField(dataField) {\n      var items = dataField.split(\"@\");\n\n      if (items.length === 0) {\n        return true; // only function call, no arguments\n      }\n\n      for (var i = 1; i < items.length; i++) {\n        if (!this.isValidScArgument(items[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     *\n     * @param input input represents the input argument to check\n     * @return true if the provided argument resembles a valid smart contract call argument\n     */\n\n  }, {\n    key: \"isValidScArgument\",\n    value: function isValidScArgument(input) {\n      if (input.length % 2 != 0) {\n        return false;\n      }\n\n      for (var i = 0; i < input.length; i++) {\n        if (!this.validHexChars.includes(input[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }]);\n\n  return ScArgumentsParser;\n}();\n\nexports.ScArgumentsParser = ScArgumentsParser;\nScArgumentsParser.validHexChars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];","map":{"version":3,"sources":["../src/scArgumentsParser.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAEA;;;AAGG;;;IACU,iB;;;;;;;;AAIT;;;;;AAKG;AACI,6CAAuC,SAAvC,EAAwD;AAC3D,UAAI,CAAC,KAAK,iCAAL,CAAuC,SAAvC,CAAL,EAAwD;AACpD,cAAM,IAAI,QAAA,CAAA,yBAAJ,CAA8B,SAA9B,CAAN;AACH;;AAED,UAAI,IAAI,GAAG,IAAI,KAAJ,EAAX;AACA,UAAI,KAAK,GAAG,SAAS,CAAC,KAAV,CAAgB,GAAhB,CAAZ;;AACA,UAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACpB,eAAO;AACH,UAAA,YAAY,EAAE,SADX;AAEH,UAAA,IAAI,EAAE,IAAI,KAAJ;AAFH,SAAP;AAIH;;AAED,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACnC,QAAA,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,CAAD,CAAf;AACH;;AAED,aAAO;AACH,QAAA,YAAY,EAAE,KAAK,CAAC,CAAD,CADhB;AAEH,QAAA,IAAI,EAAE;AAFH,OAAP;AAIH;AAED;;;AAGG;;;;WACI,2CAAyC,SAAzC,EAA0D;AAC7D,UAAI,KAAK,GAAG,SAAS,CAAC,KAAV,CAAgB,GAAhB,CAAZ;;AACA,UAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACpB,eAAO,IAAP,CADoB,CACP;AAChB;;AAED,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACnC,YAAI,CAAC,KAAK,iBAAL,CAAuB,KAAK,CAAC,CAAD,CAA5B,CAAL,EAAuC;AACnC,iBAAO,KAAP;AACH;AACJ;;AAED,aAAO,IAAP;AACH;AAED;;;;AAIG;;;;WACI,2BAAyB,KAAzB,EAAsC;AACzC,UAAI,KAAK,CAAC,MAAN,GAAe,CAAf,IAAoB,CAAxB,EAA2B;AACvB,eAAO,KAAP;AACH;;AAED,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACnC,YAAI,CAAC,KAAK,aAAL,CAAmB,QAAnB,CAA4B,KAAK,CAAC,CAAD,CAAjC,CAAL,EAA4C;AACxC,iBAAO,KAAP;AACH;AACJ;;AAED,aAAO,IAAP;AACH;;;;;;AAtEL,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAEmB,iBAAA,CAAA,aAAA,GAAgB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,CAAhB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ScArgumentsParser = void 0;\nconst errors_1 = require(\"./errors\");\n/**\n * Class with static methods useful for fetching and checking arguments from a transaction's data field that should trigger\n * a smart contract call\n */\nclass ScArgumentsParser {\n    /**\n     * Returns an array containing all the arguments from a data field representing a smart contract call\n     * @param dataField this field represents the data filed to extract arguments from\n     * @return {functionName, args} returns the function name and an array containing all the smart contract call arguments\n     * @throws ErrInvalidScCallDataField the function returns an ErrInvalidScCallDataField exception if the input isn't a smart contract call valid input\n     */\n    static parseSmartContractCallDataField(dataField) {\n        if (!this.isValidSmartContractCallDataField(dataField)) {\n            throw new errors_1.ErrInvalidScCallDataField(dataField);\n        }\n        let args = new Array();\n        let items = dataField.split(\"@\");\n        if (items.length === 0) {\n            return {\n                functionName: dataField,\n                args: new Array(),\n            };\n        }\n        for (let i = 1; i < items.length; i++) {\n            args.push(items[i]);\n        }\n        return {\n            functionName: items[0],\n            args: args,\n        };\n    }\n    /**\n     * Returns a Boolean value representing if the input data field is a valid smart contract call input\n     * @param dataField this field represents the input to check\n     */\n    static isValidSmartContractCallDataField(dataField) {\n        let items = dataField.split(\"@\");\n        if (items.length === 0) {\n            return true; // only function call, no arguments\n        }\n        for (let i = 1; i < items.length; i++) {\n            if (!this.isValidScArgument(items[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     *\n     * @param input input represents the input argument to check\n     * @return true if the provided argument resembles a valid smart contract call argument\n     */\n    static isValidScArgument(input) {\n        if (input.length % 2 != 0) {\n            return false;\n        }\n        for (let i = 0; i < input.length; i++) {\n            if (!this.validHexChars.includes(input[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.ScArgumentsParser = ScArgumentsParser;\nScArgumentsParser.validHexChars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n//# sourceMappingURL=scArgumentsParser.js.map"]},"metadata":{},"sourceType":"script"}