{"ast":null,"code":"import { decodeString } from '@elrondnetwork/erdjs';\nimport { denomination, decimals, feesInEpoch, stakePerNode, protocolSustainabilityRewards, yearSettings, genesisTokenSupply } from 'config';\nimport denominate from 'helpers/denominate';\n\nconst denominateValue = value => {\n  const denominatedValueString = denominate({\n    input: value,\n    denomination,\n    decimals\n  });\n  const valueWithoutComma = denominatedValueString.replace(/,/g, '');\n  return valueWithoutComma;\n};\n\nconst calculateAnnualPercentage = ({\n  activeStake,\n  blsKeys,\n  networkStatus,\n  networkStake,\n  networkConfig,\n  serviceFee\n}) => {\n  var _yearSettings$find;\n\n  const allNodes = blsKeys.filter(key => decodeString(key) === 'staked' || decodeString(key) === 'jailed' || decodeString(key) === 'queued').length;\n  const allActiveNodes = blsKeys.filter(key => decodeString(key) === 'staked').length;\n\n  if (allActiveNodes <= 0) {\n    return '0.00';\n  }\n\n  const epochDurationInSeconds = networkConfig.RoundDuration / 1000 * networkConfig.RoundsPerEpoch;\n  const secondsInYear = 365 * 24 * 3600;\n  const epochsInYear = secondsInYear / epochDurationInSeconds;\n  const inflationRate = ((_yearSettings$find = yearSettings.find(x => x.year === Math.floor(networkStatus.EpochNumber / epochsInYear) + 1)) === null || _yearSettings$find === void 0 ? void 0 : _yearSettings$find.maximumInflation) || 0;\n  const rewardsPerEpoch = Math.max(inflationRate * genesisTokenSupply / epochsInYear, feesInEpoch);\n  const rewardsPerEpochWithoutProtocolSustainability = (1 - protocolSustainabilityRewards) * rewardsPerEpoch;\n  const topUpRewardsLimit = networkConfig.TopUpFactor * rewardsPerEpochWithoutProtocolSustainability;\n  const networkBaseStake = networkStake.ActiveValidators * stakePerNode;\n  const networkTotalStake = parseInt(denominateValue(networkStatus.Balance));\n  const networkTopUpStake = networkTotalStake - networkStake.TotalValidators * stakePerNode - networkStake.QueueSize * stakePerNode;\n  const topUpReward = 2 * topUpRewardsLimit / Math.PI * Math.atan(networkTopUpStake / (2 * parseInt(denominateValue(networkConfig.TopUpRewardsGradientPoint.toFixed()))));\n  const baseReward = rewardsPerEpochWithoutProtocolSustainability - topUpReward;\n  const validatorTotalStake = parseInt(denominateValue(activeStake));\n  const actualNumberOfNodes = Math.min(Math.floor(validatorTotalStake / stakePerNode), allActiveNodes);\n  const validatorBaseStake = actualNumberOfNodes * stakePerNode;\n  const validatorTopUpStake = (validatorTotalStake - allNodes * stakePerNode) / allNodes * allActiveNodes;\n  const validatorTopUpReward = networkTopUpStake > 0 ? validatorTopUpStake / networkTopUpStake * topUpReward : 0;\n  const validatorBaseReward = validatorBaseStake / networkBaseStake * baseReward;\n  const anualPercentageRate = epochsInYear * (validatorTopUpReward + validatorBaseReward) / validatorTotalStake;\n  const annuallPercentageRateTotal = anualPercentageRate * 100 - anualPercentageRate * 100 * (serviceFee / 100);\n  return annuallPercentageRateTotal.toFixed(2).toString();\n};\n\nexport default calculateAnnualPercentage;","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Cards/helpers/calculateAnnualPercentage.ts"],"names":["decodeString","denomination","decimals","feesInEpoch","stakePerNode","protocolSustainabilityRewards","yearSettings","genesisTokenSupply","denominate","denominateValue","value","denominatedValueString","input","valueWithoutComma","replace","calculateAnnualPercentage","activeStake","blsKeys","networkStatus","networkStake","networkConfig","serviceFee","allNodes","filter","key","length","allActiveNodes","epochDurationInSeconds","RoundDuration","RoundsPerEpoch","secondsInYear","epochsInYear","inflationRate","find","x","year","Math","floor","EpochNumber","maximumInflation","rewardsPerEpoch","max","rewardsPerEpochWithoutProtocolSustainability","topUpRewardsLimit","TopUpFactor","networkBaseStake","ActiveValidators","networkTotalStake","parseInt","Balance","networkTopUpStake","TotalValidators","QueueSize","topUpReward","PI","atan","TopUpRewardsGradientPoint","toFixed","baseReward","validatorTotalStake","actualNumberOfNodes","min","validatorBaseStake","validatorTopUpStake","validatorTopUpReward","validatorBaseReward","anualPercentageRate","annuallPercentageRateTotal","toString"],"mappings":"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","sourcesContent":["import { decodeString } from '@elrondnetwork/erdjs';\nimport {\n  denomination,\n  decimals,\n  feesInEpoch,\n  stakePerNode,\n  protocolSustainabilityRewards,\n  yearSettings,\n  genesisTokenSupply\n} from 'config';\nimport denominate from 'helpers/denominate';\n\nconst denominateValue = (value: string) => {\n  const denominatedValueString = denominate({\n    input: value,\n    denomination,\n    decimals\n  });\n  const valueWithoutComma = denominatedValueString.replace(/,/g, '');\n  return valueWithoutComma;\n};\n\nconst calculateAnnualPercentage = ({\n  activeStake,\n  blsKeys,\n  networkStatus,\n  networkStake,\n  networkConfig,\n  serviceFee\n}: any) => {\n  const allNodes = blsKeys.filter(\n    (key: any) =>\n      decodeString(key) === 'staked' ||\n      decodeString(key) === 'jailed' ||\n      decodeString(key) === 'queued'\n  ).length;\n  const allActiveNodes = blsKeys.filter(\n    (key: any) => decodeString(key) === 'staked'\n  ).length;\n  if (allActiveNodes <= 0) {\n    return '0.00';\n  }\n\n  const epochDurationInSeconds =\n    (networkConfig.RoundDuration / 1000) * networkConfig.RoundsPerEpoch;\n  const secondsInYear = 365 * 24 * 3600;\n  const epochsInYear = secondsInYear / epochDurationInSeconds;\n  const inflationRate =\n    yearSettings.find(\n      (x) => x.year === Math.floor(networkStatus.EpochNumber / epochsInYear) + 1\n    )?.maximumInflation || 0;\n  const rewardsPerEpoch = Math.max(\n    (inflationRate * genesisTokenSupply) / epochsInYear,\n    feesInEpoch\n  );\n  const rewardsPerEpochWithoutProtocolSustainability =\n    (1 - protocolSustainabilityRewards) * rewardsPerEpoch;\n  const topUpRewardsLimit =\n    networkConfig.TopUpFactor * rewardsPerEpochWithoutProtocolSustainability;\n\n  const networkBaseStake = networkStake.ActiveValidators * stakePerNode;\n  const networkTotalStake = parseInt(denominateValue(networkStatus.Balance));\n  const networkTopUpStake =\n    networkTotalStake -\n    networkStake.TotalValidators * stakePerNode -\n    networkStake.QueueSize * stakePerNode;\n  const topUpReward =\n    ((2 * topUpRewardsLimit) / Math.PI) *\n    Math.atan(\n      networkTopUpStake /\n        (2 *\n          parseInt(\n            denominateValue(networkConfig.TopUpRewardsGradientPoint.toFixed())\n          ))\n    );\n\n  const baseReward = rewardsPerEpochWithoutProtocolSustainability - topUpReward;\n  const validatorTotalStake = parseInt(denominateValue(activeStake));\n  const actualNumberOfNodes = Math.min(\n    Math.floor(validatorTotalStake / stakePerNode),\n    allActiveNodes\n  );\n  const validatorBaseStake = actualNumberOfNodes * stakePerNode;\n\n  const validatorTopUpStake =\n    ((validatorTotalStake - allNodes * stakePerNode) / allNodes) *\n    allActiveNodes;\n  const validatorTopUpReward =\n    networkTopUpStake > 0\n      ? (validatorTopUpStake / networkTopUpStake) * topUpReward\n      : 0;\n  const validatorBaseReward =\n    (validatorBaseStake / networkBaseStake) * baseReward;\n  const anualPercentageRate =\n    (epochsInYear * (validatorTopUpReward + validatorBaseReward)) /\n    validatorTotalStake;\n  const annuallPercentageRateTotal =\n    anualPercentageRate * 100 - anualPercentageRate * 100 * (serviceFee / 100);\n\n  return annuallPercentageRateTotal.toFixed(2).toString();\n};\n\nexport default calculateAnnualPercentage;\n"]},"metadata":{},"sourceType":"module"}