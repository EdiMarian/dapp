{"ast":null,"code":"import React from'react';import{useGetAccountInfo}from'@elrondnetwork/dapp-core';import{Formik}from'formik';import{object}from'yup';import Action,{Submit}from'components/Action';import{delegateValidator}from'components/Stake//helpers/delegationValidators';import useStakeData from'components/Stake/hooks';import{network}from'config';import{denominated}from'helpers/denominate';import modifiable from'helpers/modifiable';import styles from'./styles.module.scss';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Delegate=function Delegate(){var _useGetAccountInfo=useGetAccountInfo(),account=_useGetAccountInfo.account;var _useStakeData=useStakeData(),onDelegate=_useStakeData.onDelegate,getStakingLimits=_useStakeData.getStakingLimits;var _getStakingLimits=getStakingLimits(),limit=_getStakingLimits.limit,balance=_getStakingLimits.balance;return/*#__PURE__*/_jsx(\"div\",{className:styles.wrapper,children:/*#__PURE__*/_jsx(Action,{title:\"Delegate Now\",description:\"Select the amount of \".concat(network.egldLabel,\" you want to delegate.\"),trigger:/*#__PURE__*/_jsx(\"div\",{className:styles.trigger,children:\"Delegate\"}),render:/*#__PURE__*/_jsx(\"div\",{className:styles.delegate,children:/*#__PURE__*/_jsx(Formik,{validationSchema:object().shape({amount:delegateValidator(balance,String(limit))}),onSubmit:onDelegate,initialValues:{amount:'0'},children:function children(_ref){var errors=_ref.errors,values=_ref.values,touched=_ref.touched,handleChange=_ref.handleChange,handleBlur=_ref.handleBlur,handleSubmit=_ref.handleSubmit,setFieldValue=_ref.setFieldValue;var onMax=function onMax(event){event.preventDefault();setFieldValue('amount',limit);};return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.field,children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"amount\",children:[network.egldLabel,\" Amount\"]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.group,children:[/*#__PURE__*/_jsx(\"input\",{type:\"number\",name:\"amount\",step:\"any\",required:true,autoComplete:\"off\",min:0,className:modifiable('input',[errors.amount&&touched.amount&&'invalid'],styles),value:values.amount,onBlur:handleBlur,onChange:handleChange}),/*#__PURE__*/_jsx(\"a\",{href:\"/#\",onClick:onMax,className:styles.max,children:\"Max\"})]}),/*#__PURE__*/_jsxs(\"span\",{className:styles.description,children:[/*#__PURE__*/_jsx(\"span\",{children:\"Balance:\"}),\" \",denominated(account.balance),' ',network.egldLabel]}),errors.amount&&touched.amount&&/*#__PURE__*/_jsx(\"span\",{className:styles.error,children:errors.amount})]}),/*#__PURE__*/_jsx(Submit,{save:\"Continue\"})]});}})})})});};export default Delegate;","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/delegation-dashboard.elrond.com/src/components/Stake/components/Delegate/index.tsx"],"names":["React","useGetAccountInfo","Formik","object","Action","Submit","delegateValidator","useStakeData","network","denominated","modifiable","styles","Delegate","account","onDelegate","getStakingLimits","limit","balance","wrapper","egldLabel","trigger","delegate","shape","amount","String","errors","values","touched","handleChange","handleBlur","handleSubmit","setFieldValue","onMax","event","preventDefault","field","group","max","description","error"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,iBAAT,KAAkC,0BAAlC,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,OAASC,MAAT,KAAuB,KAAvB,CAEA,MAAOC,CAAAA,MAAP,EAAiBC,MAAjB,KAA+B,mBAA/B,CACA,OAASC,iBAAT,KAAkC,gDAAlC,CACA,MAAOC,CAAAA,YAAP,KAAyB,wBAAzB,CACA,OAASC,OAAT,KAAwB,QAAxB,CAEA,OAASC,WAAT,KAA4B,oBAA5B,CACA,MAAOC,CAAAA,UAAP,KAAuB,oBAAvB,CAEA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,C,wFAEA,GAAMC,CAAAA,QAAkB,CAAG,QAArBA,CAAAA,QAAqB,EAAM,CAC/B,uBAAoBX,iBAAiB,EAArC,CAAQY,OAAR,oBAAQA,OAAR,CACA,kBAAyCN,YAAY,EAArD,CAAQO,UAAR,eAAQA,UAAR,CAAoBC,gBAApB,eAAoBA,gBAApB,CACA,sBAA2BA,gBAAgB,EAA3C,CAAQC,KAAR,mBAAQA,KAAR,CAAeC,OAAf,mBAAeA,OAAf,CAEA,mBACE,YAAK,SAAS,CAAEN,MAAM,CAACO,OAAvB,uBACE,KAAC,MAAD,EACE,KAAK,CAAC,cADR,CAEE,WAAW,gCAA0BV,OAAO,CAACW,SAAlC,0BAFb,CAGE,OAAO,cAAE,YAAK,SAAS,CAAER,MAAM,CAACS,OAAvB,sBAHX,CAIE,MAAM,cACJ,YAAK,SAAS,CAAET,MAAM,CAACU,QAAvB,uBACE,KAAC,MAAD,EACE,gBAAgB,CAAElB,MAAM,GAAGmB,KAAT,CAAe,CAC/BC,MAAM,CAAEjB,iBAAiB,CAACW,OAAD,CAAUO,MAAM,CAACR,KAAD,CAAhB,CADM,CAAf,CADpB,CAIE,QAAQ,CAAEF,UAJZ,CAKE,aAAa,CAAE,CACbS,MAAM,CAAE,GADK,CALjB,UASG,uBAQK,IAPJE,CAAAA,MAOI,MAPJA,MAOI,CANJC,MAMI,MANJA,MAMI,CALJC,OAKI,MALJA,OAKI,CAJJC,YAII,MAJJA,YAII,CAHJC,UAGI,MAHJA,UAGI,CAFJC,YAEI,MAFJA,YAEI,CADJC,aACI,MADJA,aACI,CACJ,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,KAAD,CAAsB,CAClCA,KAAK,CAACC,cAAN,GACAH,aAAa,CAAC,QAAD,CAAWf,KAAX,CAAb,CACD,CAHD,CAKA,mBACE,cAAM,QAAQ,CAAEc,YAAhB,wBACE,aAAK,SAAS,CAAEnB,MAAM,CAACwB,KAAvB,wBACE,eAAO,OAAO,CAAC,QAAf,WAAyB3B,OAAO,CAACW,SAAjC,aADF,cAEE,aAAK,SAAS,CAAER,MAAM,CAACyB,KAAvB,wBACE,cACE,IAAI,CAAC,QADP,CAEE,IAAI,CAAC,QAFP,CAGE,IAAI,CAAC,KAHP,CAIE,QAAQ,CAAE,IAJZ,CAKE,YAAY,CAAC,KALf,CAME,GAAG,CAAE,CANP,CAOE,SAAS,CAAE1B,UAAU,CACnB,OADmB,CAEnB,CAACe,MAAM,CAACF,MAAP,EAAiBI,OAAO,CAACJ,MAAzB,EAAmC,SAApC,CAFmB,CAGnBZ,MAHmB,CAPvB,CAYE,KAAK,CAAEe,MAAM,CAACH,MAZhB,CAaE,MAAM,CAAEM,UAbV,CAcE,QAAQ,CAAED,YAdZ,EADF,cAkBE,UAAG,IAAI,CAAC,IAAR,CAAa,OAAO,CAAEI,KAAtB,CAA6B,SAAS,CAAErB,MAAM,CAAC0B,GAA/C,iBAlBF,GAFF,cAyBE,cAAM,SAAS,CAAE1B,MAAM,CAAC2B,WAAxB,wBACE,kCADF,KACyB7B,WAAW,CAACI,OAAO,CAACI,OAAT,CADpC,CACuD,GADvD,CAEGT,OAAO,CAACW,SAFX,GAzBF,CA8BGM,MAAM,CAACF,MAAP,EAAiBI,OAAO,CAACJ,MAAzB,eACC,aAAM,SAAS,CAAEZ,MAAM,CAAC4B,KAAxB,UAAgCd,MAAM,CAACF,MAAvC,EA/BJ,GADF,cAoCE,KAAC,MAAD,EAAQ,IAAI,CAAC,UAAb,EApCF,GADF,CAwCD,CA/DH,EADF,EALJ,EADF,EADF,CA8ED,CAnFD,CAqFA,cAAeX,CAAAA,QAAf","sourcesContent":["import React from 'react';\n\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { Formik } from 'formik';\nimport { object } from 'yup';\n\nimport Action, { Submit } from 'components/Action';\nimport { delegateValidator } from 'components/Stake//helpers/delegationValidators';\nimport useStakeData from 'components/Stake/hooks';\nimport { network } from 'config';\n\nimport { denominated } from 'helpers/denominate';\nimport modifiable from 'helpers/modifiable';\n\nimport styles from './styles.module.scss';\n\nconst Delegate: React.FC = () => {\n  const { account } = useGetAccountInfo();\n  const { onDelegate, getStakingLimits } = useStakeData();\n  const { limit, balance } = getStakingLimits();\n\n  return (\n    <div className={styles.wrapper}>\n      <Action\n        title='Delegate Now'\n        description={`Select the amount of ${network.egldLabel} you want to delegate.`}\n        trigger={<div className={styles.trigger}>Delegate</div>}\n        render={\n          <div className={styles.delegate}>\n            <Formik\n              validationSchema={object().shape({\n                amount: delegateValidator(balance, String(limit))\n              })}\n              onSubmit={onDelegate}\n              initialValues={{\n                amount: '0'\n              }}\n            >\n              {({\n                errors,\n                values,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                setFieldValue\n              }) => {\n                const onMax = (event: any): void => {\n                  event.preventDefault();\n                  setFieldValue('amount', limit);\n                };\n\n                return (\n                  <form onSubmit={handleSubmit}>\n                    <div className={styles.field}>\n                      <label htmlFor='amount'>{network.egldLabel} Amount</label>\n                      <div className={styles.group}>\n                        <input\n                          type='number'\n                          name='amount'\n                          step='any'\n                          required={true}\n                          autoComplete='off'\n                          min={0}\n                          className={modifiable(\n                            'input',\n                            [errors.amount && touched.amount && 'invalid'],\n                            styles\n                          )}\n                          value={values.amount}\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                        />\n\n                        <a href='/#' onClick={onMax} className={styles.max}>\n                          Max\n                        </a>\n                      </div>\n\n                      <span className={styles.description}>\n                        <span>Balance:</span> {denominated(account.balance)}{' '}\n                        {network.egldLabel}\n                      </span>\n\n                      {errors.amount && touched.amount && (\n                        <span className={styles.error}>{errors.amount}</span>\n                      )}\n                    </div>\n\n                    <Submit save='Continue' />\n                  </form>\n                );\n              }}\n            </Formik>\n          </div>\n        }\n      />\n    </div>\n  );\n};\n\nexport default Delegate;\n"]},"metadata":{},"sourceType":"module"}