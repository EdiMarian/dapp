{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Interaction = void 0;\n\nvar balance_1 = require(\"../balance\");\n\nvar networkParams_1 = require(\"../networkParams\");\n\nvar query_1 = require(\"./query\");\n\nvar function_1 = require(\"./function\");\n\nvar address_1 = require(\"../address\");\n\nvar typesystem_1 = require(\"./typesystem\");\n\nvar nonce_1 = require(\"../nonce\");\n\nvar networkConfig_1 = require(\"../networkConfig\");\n\nvar constants_1 = require(\"../constants\");\n/**\n * Interactions can be seen as mutable transaction & query builders.\n *\n * Aside from building transactions and queries, the interactors are also responsible for interpreting\n * the execution outcome for the objects they've built.\n */\n\n\nvar Interaction = /*#__PURE__*/function () {\n  function Interaction(contract, executingFunction, interpretingFunction, args, receiver) {\n    _classCallCheck(this, Interaction);\n\n    this.nonce = new nonce_1.Nonce(0);\n    this.value = balance_1.Balance.Zero();\n    this.gasLimit = networkParams_1.GasLimit.min();\n    this.isWithSingleESDTTransfer = false;\n    this.isWithSingleESDTNFTTransfer = false;\n    this.isWithMultiESDTNFTTransfer = false;\n    this.tokenTransfersSender = new address_1.Address();\n    this.contract = contract;\n    this.executingFunction = executingFunction;\n    this.interpretingFunction = interpretingFunction;\n    this.args = args;\n    this.receiver = receiver;\n    this.tokenTransfers = new TokenTransfersWithinInteraction([], this);\n  }\n\n  _createClass(Interaction, [{\n    key: \"getContract\",\n    value: function getContract() {\n      return this.contract;\n    }\n  }, {\n    key: \"getInterpretingFunction\",\n    value: function getInterpretingFunction() {\n      return this.interpretingFunction;\n    }\n  }, {\n    key: \"getExecutingFunction\",\n    value: function getExecutingFunction() {\n      return this.executingFunction;\n    }\n  }, {\n    key: \"getArguments\",\n    value: function getArguments() {\n      return this.args;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.value;\n    }\n  }, {\n    key: \"getTokenTransfers\",\n    value: function getTokenTransfers() {\n      return this.tokenTransfers.getTransfers();\n    }\n  }, {\n    key: \"getGasLimit\",\n    value: function getGasLimit() {\n      return this.gasLimit;\n    }\n  }, {\n    key: \"buildTransaction\",\n    value: function buildTransaction() {\n      var receiver = this.receiver;\n      var func = this.executingFunction;\n      var args = this.args;\n\n      if (this.isWithSingleESDTTransfer) {\n        func = new function_1.ContractFunction(constants_1.ESDT_TRANSFER_FUNCTION_NAME);\n        args = this.tokenTransfers.buildArgsForSingleESDTTransfer();\n      } else if (this.isWithSingleESDTNFTTransfer) {\n        // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n        receiver = this.tokenTransfersSender;\n        func = new function_1.ContractFunction(constants_1.ESDTNFT_TRANSFER_FUNCTION_NAME);\n        args = this.tokenTransfers.buildArgsForSingleESDTNFTTransfer();\n      } else if (this.isWithMultiESDTNFTTransfer) {\n        // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n        receiver = this.tokenTransfersSender;\n        func = new function_1.ContractFunction(constants_1.MULTI_ESDTNFT_TRANSFER_FUNCTION_NAME);\n        args = this.tokenTransfers.buildArgsForMultiESDTNFTTransfer();\n      } // TODO: create as \"deploy\" transaction if the function is \"init\" (or find a better pattern for deployments).\n\n\n      var transaction = this.contract.call({\n        func: func,\n        // GasLimit will be set using \"withGasLimit()\".\n        gasLimit: this.gasLimit,\n        args: args,\n        // Value will be set using \"withValue()\".\n        value: this.value,\n        receiver: receiver\n      });\n      transaction.setNonce(this.nonce);\n      return transaction;\n    }\n  }, {\n    key: \"buildQuery\",\n    value: function buildQuery() {\n      return new query_1.Query({\n        address: this.contract.getAddress(),\n        func: this.executingFunction,\n        args: this.args,\n        // Value will be set using \"withValue()\".\n        value: this.value,\n        // Caller will be set by the InteractionRunner.\n        caller: new address_1.Address()\n      });\n    }\n    /**\n     * Interprets the results of a previously broadcasted (and fully executed) smart contract transaction.\n     * The outcome is structured such that it allows quick access to each level of detail.\n     */\n\n  }, {\n    key: \"interpretExecutionResults\",\n    value: function interpretExecutionResults(transactionOnNetwork) {\n      return _interpretExecutionResults(this.getEndpoint(), transactionOnNetwork);\n    }\n    /**\n     * Interprets the raw outcome of a Smart Contract query.\n     * The outcome is structured such that it allows quick access to each level of detail.\n     */\n\n  }, {\n    key: \"interpretQueryResponse\",\n    value: function interpretQueryResponse(queryResponse) {\n      var endpoint = this.getEndpoint();\n      queryResponse.setEndpointDefinition(endpoint);\n      var values = queryResponse.outputTyped();\n      var returnCode = queryResponse.returnCode;\n      return {\n        queryResponse: queryResponse,\n        values: values,\n        firstValue: values[0],\n        returnCode: returnCode\n      };\n    }\n  }, {\n    key: \"withValue\",\n    value: function withValue(value) {\n      this.value = value;\n      return this;\n    }\n  }, {\n    key: \"withSingleESDTTransfer\",\n    value: function withSingleESDTTransfer(transfer) {\n      this.isWithSingleESDTTransfer = true;\n      this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n      return this;\n    }\n  }, {\n    key: \"withSingleESDTNFTTransfer\",\n    value: function withSingleESDTNFTTransfer(transfer, sender) {\n      this.isWithSingleESDTNFTTransfer = true;\n      this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n      this.tokenTransfersSender = sender;\n      return this;\n    }\n  }, {\n    key: \"withMultiESDTNFTTransfer\",\n    value: function withMultiESDTNFTTransfer(transfers, sender) {\n      this.isWithMultiESDTNFTTransfer = true;\n      this.tokenTransfers = new TokenTransfersWithinInteraction(transfers, this);\n      this.tokenTransfersSender = sender;\n      return this;\n    }\n  }, {\n    key: \"withGasLimit\",\n    value: function withGasLimit(gasLimit) {\n      this.gasLimit = gasLimit;\n      return this;\n    }\n  }, {\n    key: \"withGasLimitComponents\",\n    value: function withGasLimitComponents(args) {\n      var minGasLimit = args.minGasLimit || networkConfig_1.NetworkConfig.getDefault().MinGasLimit.valueOf();\n      var gasPerDataByte = args.gasPerDataByte || networkConfig_1.NetworkConfig.getDefault().GasPerDataByte;\n      var transaction = this.buildTransaction();\n      var dataLength = transaction.getData().length();\n      var movementComponent = new networkParams_1.GasLimit(minGasLimit + gasPerDataByte * dataLength);\n      var executionComponent = new networkParams_1.GasLimit(args.estimatedExecutionComponent);\n      var gasLimit = movementComponent.add(executionComponent);\n      return this.withGasLimit(gasLimit);\n    }\n  }, {\n    key: \"withNonce\",\n    value: function withNonce(nonce) {\n      this.nonce = nonce;\n      return this;\n    }\n  }, {\n    key: \"getEndpoint\",\n    value: function getEndpoint() {\n      return this.getContract().getAbi().getEndpoint(this.getInterpretingFunction());\n    }\n  }]);\n\n  return Interaction;\n}();\n\nexports.Interaction = Interaction;\n\nfunction _interpretExecutionResults(endpoint, transactionOnNetwork) {\n  var smartContractResults = transactionOnNetwork.getSmartContractResults();\n  var immediateResult = smartContractResults.getImmediate();\n  var resultingCalls = smartContractResults.getResultingCalls();\n  immediateResult.setEndpointDefinition(endpoint);\n  var values = immediateResult.outputTyped();\n  var returnCode = immediateResult.getReturnCode();\n  return {\n    transactionOnNetwork: transactionOnNetwork,\n    smartContractResults: smartContractResults,\n    immediateResult: immediateResult,\n    resultingCalls: resultingCalls,\n    values: values,\n    firstValue: values[0],\n    returnCode: returnCode\n  };\n}\n\nvar TokenTransfersWithinInteraction = /*#__PURE__*/function () {\n  function TokenTransfersWithinInteraction(transfers, interaction) {\n    _classCallCheck(this, TokenTransfersWithinInteraction);\n\n    this.transfers = transfers;\n    this.interaction = interaction;\n  }\n\n  _createClass(TokenTransfersWithinInteraction, [{\n    key: \"getTransfers\",\n    value: function getTransfers() {\n      return this.transfers;\n    }\n  }, {\n    key: \"buildArgsForSingleESDTTransfer\",\n    value: function buildArgsForSingleESDTTransfer() {\n      var singleTransfer = this.transfers[0];\n      return [this.getTypedTokenIdentifier(singleTransfer), this.getTypedTokenQuantity(singleTransfer), this.getTypedInteractionFunction()].concat(_toConsumableArray(this.getInteractionArguments()));\n    }\n  }, {\n    key: \"buildArgsForSingleESDTNFTTransfer\",\n    value: function buildArgsForSingleESDTNFTTransfer() {\n      var singleTransfer = this.transfers[0];\n      return [this.getTypedTokenIdentifier(singleTransfer), this.getTypedTokenNonce(singleTransfer), this.getTypedTokenQuantity(singleTransfer), this.getTypedTokensReceiver(), this.getTypedInteractionFunction()].concat(_toConsumableArray(this.getInteractionArguments()));\n    }\n  }, {\n    key: \"buildArgsForMultiESDTNFTTransfer\",\n    value: function buildArgsForMultiESDTNFTTransfer() {\n      var result = [];\n      result.push(this.getTypedTokensReceiver());\n      result.push(this.getTypedNumberOfTransfers());\n\n      var _iterator = _createForOfIteratorHelper(this.transfers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var transfer = _step.value;\n          result.push(this.getTypedTokenIdentifier(transfer));\n          result.push(this.getTypedTokenNonce(transfer));\n          result.push(this.getTypedTokenQuantity(transfer));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      result.push(this.getTypedInteractionFunction());\n      result.push.apply(result, _toConsumableArray(this.getInteractionArguments()));\n      return result;\n    }\n  }, {\n    key: \"getTypedNumberOfTransfers\",\n    value: function getTypedNumberOfTransfers() {\n      return new typesystem_1.U8Value(this.transfers.length);\n    }\n  }, {\n    key: \"getTypedTokenIdentifier\",\n    value: function getTypedTokenIdentifier(transfer) {\n      // Important: for NFTs, this has to be the \"collection\" name, actually.\n      // We will reconsider adding the field \"collection\" on \"Token\" upon merging \"ApiProvider\" and \"ProxyProvider\".\n      return typesystem_1.BytesValue.fromUTF8(transfer.token.identifier);\n    }\n  }, {\n    key: \"getTypedTokenNonce\",\n    value: function getTypedTokenNonce(transfer) {\n      // The token nonce (creation nonce)\n      return new typesystem_1.U64Value(transfer.getNonce());\n    }\n  }, {\n    key: \"getTypedTokenQuantity\",\n    value: function getTypedTokenQuantity(transfer) {\n      // For NFTs, this will be 1.\n      return new typesystem_1.BigUIntValue(transfer.valueOf());\n    }\n  }, {\n    key: \"getTypedTokensReceiver\",\n    value: function getTypedTokensReceiver() {\n      // The actual receiver of the token(s): the contract\n      return new typesystem_1.AddressValue(this.interaction.getContract().getAddress());\n    }\n  }, {\n    key: \"getTypedInteractionFunction\",\n    value: function getTypedInteractionFunction() {\n      return typesystem_1.BytesValue.fromUTF8(this.interaction.getExecutingFunction().valueOf());\n    }\n  }, {\n    key: \"getInteractionArguments\",\n    value: function getInteractionArguments() {\n      return this.interaction.getArguments();\n    }\n  }]);\n\n  return TokenTransfersWithinInteraction;\n}();","map":{"version":3,"sources":["../../src/smartcontracts/interaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Interaction = void 0;\nconst balance_1 = require(\"../balance\");\nconst networkParams_1 = require(\"../networkParams\");\nconst query_1 = require(\"./query\");\nconst function_1 = require(\"./function\");\nconst address_1 = require(\"../address\");\nconst typesystem_1 = require(\"./typesystem\");\nconst nonce_1 = require(\"../nonce\");\nconst networkConfig_1 = require(\"../networkConfig\");\nconst constants_1 = require(\"../constants\");\n/**\n * Interactions can be seen as mutable transaction & query builders.\n *\n * Aside from building transactions and queries, the interactors are also responsible for interpreting\n * the execution outcome for the objects they've built.\n */\nclass Interaction {\n    constructor(contract, executingFunction, interpretingFunction, args, receiver) {\n        this.nonce = new nonce_1.Nonce(0);\n        this.value = balance_1.Balance.Zero();\n        this.gasLimit = networkParams_1.GasLimit.min();\n        this.isWithSingleESDTTransfer = false;\n        this.isWithSingleESDTNFTTransfer = false;\n        this.isWithMultiESDTNFTTransfer = false;\n        this.tokenTransfersSender = new address_1.Address();\n        this.contract = contract;\n        this.executingFunction = executingFunction;\n        this.interpretingFunction = interpretingFunction;\n        this.args = args;\n        this.receiver = receiver;\n        this.tokenTransfers = new TokenTransfersWithinInteraction([], this);\n    }\n    getContract() {\n        return this.contract;\n    }\n    getInterpretingFunction() {\n        return this.interpretingFunction;\n    }\n    getExecutingFunction() {\n        return this.executingFunction;\n    }\n    getArguments() {\n        return this.args;\n    }\n    getValue() {\n        return this.value;\n    }\n    getTokenTransfers() {\n        return this.tokenTransfers.getTransfers();\n    }\n    getGasLimit() {\n        return this.gasLimit;\n    }\n    buildTransaction() {\n        let receiver = this.receiver;\n        let func = this.executingFunction;\n        let args = this.args;\n        if (this.isWithSingleESDTTransfer) {\n            func = new function_1.ContractFunction(constants_1.ESDT_TRANSFER_FUNCTION_NAME);\n            args = this.tokenTransfers.buildArgsForSingleESDTTransfer();\n        }\n        else if (this.isWithSingleESDTNFTTransfer) {\n            // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n            receiver = this.tokenTransfersSender;\n            func = new function_1.ContractFunction(constants_1.ESDTNFT_TRANSFER_FUNCTION_NAME);\n            args = this.tokenTransfers.buildArgsForSingleESDTNFTTransfer();\n        }\n        else if (this.isWithMultiESDTNFTTransfer) {\n            // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n            receiver = this.tokenTransfersSender;\n            func = new function_1.ContractFunction(constants_1.MULTI_ESDTNFT_TRANSFER_FUNCTION_NAME);\n            args = this.tokenTransfers.buildArgsForMultiESDTNFTTransfer();\n        }\n        // TODO: create as \"deploy\" transaction if the function is \"init\" (or find a better pattern for deployments).\n        let transaction = this.contract.call({\n            func: func,\n            // GasLimit will be set using \"withGasLimit()\".\n            gasLimit: this.gasLimit,\n            args: args,\n            // Value will be set using \"withValue()\".\n            value: this.value,\n            receiver: receiver,\n        });\n        transaction.setNonce(this.nonce);\n        return transaction;\n    }\n    buildQuery() {\n        return new query_1.Query({\n            address: this.contract.getAddress(),\n            func: this.executingFunction,\n            args: this.args,\n            // Value will be set using \"withValue()\".\n            value: this.value,\n            // Caller will be set by the InteractionRunner.\n            caller: new address_1.Address()\n        });\n    }\n    /**\n     * Interprets the results of a previously broadcasted (and fully executed) smart contract transaction.\n     * The outcome is structured such that it allows quick access to each level of detail.\n     */\n    interpretExecutionResults(transactionOnNetwork) {\n        return interpretExecutionResults(this.getEndpoint(), transactionOnNetwork);\n    }\n    /**\n     * Interprets the raw outcome of a Smart Contract query.\n     * The outcome is structured such that it allows quick access to each level of detail.\n     */\n    interpretQueryResponse(queryResponse) {\n        let endpoint = this.getEndpoint();\n        queryResponse.setEndpointDefinition(endpoint);\n        let values = queryResponse.outputTyped();\n        let returnCode = queryResponse.returnCode;\n        return {\n            queryResponse: queryResponse,\n            values: values,\n            firstValue: values[0],\n            returnCode: returnCode\n        };\n    }\n    withValue(value) {\n        this.value = value;\n        return this;\n    }\n    withSingleESDTTransfer(transfer) {\n        this.isWithSingleESDTTransfer = true;\n        this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n        return this;\n    }\n    withSingleESDTNFTTransfer(transfer, sender) {\n        this.isWithSingleESDTNFTTransfer = true;\n        this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n        this.tokenTransfersSender = sender;\n        return this;\n    }\n    withMultiESDTNFTTransfer(transfers, sender) {\n        this.isWithMultiESDTNFTTransfer = true;\n        this.tokenTransfers = new TokenTransfersWithinInteraction(transfers, this);\n        this.tokenTransfersSender = sender;\n        return this;\n    }\n    withGasLimit(gasLimit) {\n        this.gasLimit = gasLimit;\n        return this;\n    }\n    withGasLimitComponents(args) {\n        let minGasLimit = args.minGasLimit || networkConfig_1.NetworkConfig.getDefault().MinGasLimit.valueOf();\n        let gasPerDataByte = args.gasPerDataByte || networkConfig_1.NetworkConfig.getDefault().GasPerDataByte;\n        let transaction = this.buildTransaction();\n        let dataLength = transaction.getData().length();\n        let movementComponent = new networkParams_1.GasLimit(minGasLimit + gasPerDataByte * dataLength);\n        let executionComponent = new networkParams_1.GasLimit(args.estimatedExecutionComponent);\n        let gasLimit = movementComponent.add(executionComponent);\n        return this.withGasLimit(gasLimit);\n    }\n    withNonce(nonce) {\n        this.nonce = nonce;\n        return this;\n    }\n    getEndpoint() {\n        return this.getContract().getAbi().getEndpoint(this.getInterpretingFunction());\n    }\n}\nexports.Interaction = Interaction;\nfunction interpretExecutionResults(endpoint, transactionOnNetwork) {\n    let smartContractResults = transactionOnNetwork.getSmartContractResults();\n    let immediateResult = smartContractResults.getImmediate();\n    let resultingCalls = smartContractResults.getResultingCalls();\n    immediateResult.setEndpointDefinition(endpoint);\n    let values = immediateResult.outputTyped();\n    let returnCode = immediateResult.getReturnCode();\n    return {\n        transactionOnNetwork: transactionOnNetwork,\n        smartContractResults: smartContractResults,\n        immediateResult,\n        resultingCalls,\n        values,\n        firstValue: values[0],\n        returnCode: returnCode\n    };\n}\nclass TokenTransfersWithinInteraction {\n    constructor(transfers, interaction) {\n        this.transfers = transfers;\n        this.interaction = interaction;\n    }\n    getTransfers() {\n        return this.transfers;\n    }\n    buildArgsForSingleESDTTransfer() {\n        let singleTransfer = this.transfers[0];\n        return [\n            this.getTypedTokenIdentifier(singleTransfer),\n            this.getTypedTokenQuantity(singleTransfer),\n            this.getTypedInteractionFunction(),\n            ...this.getInteractionArguments()\n        ];\n    }\n    buildArgsForSingleESDTNFTTransfer() {\n        let singleTransfer = this.transfers[0];\n        return [\n            this.getTypedTokenIdentifier(singleTransfer),\n            this.getTypedTokenNonce(singleTransfer),\n            this.getTypedTokenQuantity(singleTransfer),\n            this.getTypedTokensReceiver(),\n            this.getTypedInteractionFunction(),\n            ...this.getInteractionArguments()\n        ];\n    }\n    buildArgsForMultiESDTNFTTransfer() {\n        let result = [];\n        result.push(this.getTypedTokensReceiver());\n        result.push(this.getTypedNumberOfTransfers());\n        for (const transfer of this.transfers) {\n            result.push(this.getTypedTokenIdentifier(transfer));\n            result.push(this.getTypedTokenNonce(transfer));\n            result.push(this.getTypedTokenQuantity(transfer));\n        }\n        result.push(this.getTypedInteractionFunction());\n        result.push(...this.getInteractionArguments());\n        return result;\n    }\n    getTypedNumberOfTransfers() {\n        return new typesystem_1.U8Value(this.transfers.length);\n    }\n    getTypedTokenIdentifier(transfer) {\n        // Important: for NFTs, this has to be the \"collection\" name, actually.\n        // We will reconsider adding the field \"collection\" on \"Token\" upon merging \"ApiProvider\" and \"ProxyProvider\".\n        return typesystem_1.BytesValue.fromUTF8(transfer.token.identifier);\n    }\n    getTypedTokenNonce(transfer) {\n        // The token nonce (creation nonce)\n        return new typesystem_1.U64Value(transfer.getNonce());\n    }\n    getTypedTokenQuantity(transfer) {\n        // For NFTs, this will be 1.\n        return new typesystem_1.BigUIntValue(transfer.valueOf());\n    }\n    getTypedTokensReceiver() {\n        // The actual receiver of the token(s): the contract\n        return new typesystem_1.AddressValue(this.interaction.getContract().getAddress());\n    }\n    getTypedInteractionFunction() {\n        return typesystem_1.BytesValue.fromUTF8(this.interaction.getExecutingFunction().valueOf());\n    }\n    getInteractionArguments() {\n        return this.interaction.getArguments();\n    }\n}\n//# sourceMappingURL=interaction.js.map"]},"metadata":{},"sourceType":"script"}