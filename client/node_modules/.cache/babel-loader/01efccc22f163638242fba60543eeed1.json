{"ast":null,"code":"import { Address, ValidatorSecretKey } from '@elrondnetwork/erdjs';\n\nfunction hexStringToByte(str) {\n  if (!str) {\n    return new Uint8Array();\n  }\n\n  const a = [];\n\n  for (let i = 0, len = str.length; i < len; i += 2) {\n    a.push(parseInt(str.substr(i, 2), 16));\n  }\n\n  return new Uint8Array(a);\n}\n\nfunction getPubKey(file, indices) {\n  const headerParts = file.toString().substring(indices[0], indices[1]).split(' ');\n  return headerParts[4] ? headerParts[4] : '';\n}\n\nexport default function decodeFile(file, delegationContract) {\n  const myKey = ValidatorSecretKey.fromPem(file);\n  const dsc = new Address(delegationContract);\n  const signature = myKey.sign(Buffer.from(dsc.pubkey())).toString('hex');\n  const regex = /-----/gi;\n  let result;\n  const indices = [];\n\n  while (result = regex.exec(file.toString())) {\n    indices.push(result.index);\n  }\n\n  const key = file.toString().substring(indices[1] + 6, indices[2] - 1);\n  const decoded = window.atob(key);\n  const value = hexStringToByte(decoded);\n  const pubKey = getPubKey(file, indices);\n  return {\n    value,\n    pubKey,\n    signature\n  };\n}","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/Nodes/components/Dropzone/helpers.ts"],"names":["Address","ValidatorSecretKey","hexStringToByte","str","Uint8Array","a","i","len","length","push","parseInt","substr","getPubKey","file","indices","headerParts","toString","substring","split","decodeFile","delegationContract","myKey","fromPem","dsc","signature","sign","Buffer","from","pubkey","regex","result","exec","index","key","decoded","window","atob","value","pubKey"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,kBAAlB,QAA4C,sBAA5C;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAAsC;AACpC,MAAI,CAACA,GAAL,EAAU;AACR,WAAO,IAAIC,UAAJ,EAAP;AACD;;AACD,QAAMC,CAAC,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGJ,GAAG,CAACK,MAA1B,EAAkCF,CAAC,GAAGC,GAAtC,EAA2CD,CAAC,IAAI,CAAhD,EAAmD;AACjDD,IAAAA,CAAC,CAACI,IAAF,CAAOC,QAAQ,CAACP,GAAG,CAACQ,MAAJ,CAAWL,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAAf;AACD;;AACD,SAAO,IAAIF,UAAJ,CAAeC,CAAf,CAAP;AACD;;AAED,SAASO,SAAT,CAAmBC,IAAnB,EAAiCC,OAAjC,EAAiD;AAC/C,QAAMC,WAAW,GAAGF,IAAI,CACrBG,QADiB,GAEjBC,SAFiB,CAEPH,OAAO,CAAC,CAAD,CAFA,EAEKA,OAAO,CAAC,CAAD,CAFZ,EAGjBI,KAHiB,CAGX,GAHW,CAApB;AAIA,SAAOH,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAA5B,GAAkC,EAAzC;AACD;;AAED,eAAe,SAASI,UAAT,CAAoBN,IAApB,EAAkCO,kBAAlC,EAA+D;AAC5E,QAAMC,KAAK,GAAGpB,kBAAkB,CAACqB,OAAnB,CAA2BT,IAA3B,CAAd;AACA,QAAMU,GAAG,GAAG,IAAIvB,OAAJ,CAAYoB,kBAAZ,CAAZ;AACA,QAAMI,SAAS,GAAGH,KAAK,CAACI,IAAN,CAAWC,MAAM,CAACC,IAAP,CAAYJ,GAAG,CAACK,MAAJ,EAAZ,CAAX,EAAsCZ,QAAtC,CAA+C,KAA/C,CAAlB;AAEA,QAAMa,KAAK,GAAG,SAAd;AACA,MAAIC,MAAJ;AACA,QAAMhB,OAAO,GAAG,EAAhB;;AACA,SAAQgB,MAAM,GAAGD,KAAK,CAACE,IAAN,CAAWlB,IAAI,CAACG,QAAL,EAAX,CAAjB,EAA+C;AAC7CF,IAAAA,OAAO,CAACL,IAAR,CAAaqB,MAAM,CAACE,KAApB;AACD;;AAED,QAAMC,GAAG,GAAGpB,IAAI,CAACG,QAAL,GAAgBC,SAAhB,CAA0BH,OAAO,CAAC,CAAD,CAAP,GAAa,CAAvC,EAA0CA,OAAO,CAAC,CAAD,CAAP,GAAa,CAAvD,CAAZ;AACA,QAAMoB,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAhB;AAEA,QAAMI,KAAK,GAAGnC,eAAe,CAACgC,OAAD,CAA7B;AACA,QAAMI,MAAM,GAAG1B,SAAS,CAACC,IAAD,EAAOC,OAAP,CAAxB;AAEA,SAAO;AAAEuB,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBd,IAAAA;AAAjB,GAAP;AACD","sourcesContent":["import { Address, ValidatorSecretKey } from '@elrondnetwork/erdjs';\n\nfunction hexStringToByte(str: string) {\n  if (!str) {\n    return new Uint8Array();\n  }\n  const a = [];\n  for (let i = 0, len = str.length; i < len; i += 2) {\n    a.push(parseInt(str.substr(i, 2), 16));\n  }\n  return new Uint8Array(a);\n}\n\nfunction getPubKey(file: string, indices: any[]) {\n  const headerParts = file\n    .toString()\n    .substring(indices[0], indices[1])\n    .split(' ');\n  return headerParts[4] ? headerParts[4] : '';\n}\n\nexport default function decodeFile(file: string, delegationContract?: string) {\n  const myKey = ValidatorSecretKey.fromPem(file);\n  const dsc = new Address(delegationContract);\n  const signature = myKey.sign(Buffer.from(dsc.pubkey())).toString('hex');\n\n  const regex = /-----/gi;\n  let result;\n  const indices = [];\n  while ((result = regex.exec(file.toString()))) {\n    indices.push(result.index);\n  }\n\n  const key = file.toString().substring(indices[1] + 6, indices[2] - 1);\n  const decoded = window.atob(key);\n\n  const value = hexStringToByte(decoded);\n  const pubKey = getPubKey(file, indices);\n\n  return { value, pubKey, signature };\n}\n"]},"metadata":{},"sourceType":"module"}