{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldsBinaryCodec = void 0;\n\nvar typesystem_1 = require(\"../typesystem\");\n\nvar FieldsBinaryCodec = /*#__PURE__*/function () {\n  function FieldsBinaryCodec(binaryCodec) {\n    _classCallCheck(this, FieldsBinaryCodec);\n\n    this.binaryCodec = binaryCodec;\n  }\n\n  _createClass(FieldsBinaryCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, fieldDefinitions) {\n      var fields = [];\n      var totalLength = 0;\n\n      var _iterator = _createForOfIteratorHelper(fieldDefinitions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var fieldDefinition = _step.value;\n\n          var _this$binaryCodec$dec = this.binaryCodec.decodeNested(buffer, fieldDefinition.type),\n              _this$binaryCodec$dec2 = _slicedToArray(_this$binaryCodec$dec, 2),\n              decoded = _this$binaryCodec$dec2[0],\n              decodedLength = _this$binaryCodec$dec2[1];\n\n          buffer = buffer.slice(decodedLength);\n          totalLength += decodedLength;\n          var field = new typesystem_1.Field(decoded, fieldDefinition.name);\n          fields.push(field);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return [fields, totalLength];\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(fields) {\n      var buffers = [];\n\n      var _iterator2 = _createForOfIteratorHelper(fields),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var field = _step2.value;\n          var fieldBuffer = this.binaryCodec.encodeNested(field.value);\n          buffers.push(fieldBuffer);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return Buffer.concat(buffers);\n    }\n  }]);\n\n  return FieldsBinaryCodec;\n}();\n\nexports.FieldsBinaryCodec = FieldsBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/fields.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;IAGa,iB;AAGT,6BAAY,WAAZ,EAAoC;AAAA;;AAChC,SAAK,WAAL,GAAmB,WAAnB;AACH;;;;WAED,sBAAa,MAAb,EAA6B,gBAA7B,EAAgE;AAC5D,UAAI,MAAM,GAAY,EAAtB;AACA,UAAI,WAAW,GAAG,CAAlB;;AAF4D,iDAI9B,gBAJ8B;AAAA;;AAAA;AAI5D,4DAAgD;AAAA,cAArC,eAAqC;;AAC5C,sCAA+B,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAA9B,EAAsC,eAAe,CAAC,IAAtD,CAA/B;AAAA;AAAA,cAAK,OAAL;AAAA,cAAc,aAAd;;AACA,UAAA,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,aAAb,CAAT;AACA,UAAA,WAAW,IAAI,aAAf;AAEA,cAAI,KAAK,GAAG,IAAI,YAAA,CAAA,KAAJ,CAAU,OAAV,EAAmB,eAAe,CAAC,IAAnC,CAAZ;AACA,UAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACH;AAX2D;AAAA;AAAA;AAAA;AAAA;;AAa5D,aAAO,CAAC,MAAD,EAAS,WAAT,CAAP;AACH;;;WAED,sBAAa,MAAb,EAAyC;AACrC,UAAI,OAAO,GAAa,EAAxB;;AADqC,kDAGjB,MAHiB;AAAA;;AAAA;AAGrC,+DAA4B;AAAA,cAAjB,KAAiB;AACxB,cAAI,WAAW,GAAG,KAAK,WAAL,CAAiB,YAAjB,CAA8B,KAAK,CAAC,KAApC,CAAlB;AACA,UAAA,OAAO,CAAC,IAAR,CAAa,WAAb;AACH;AANoC;AAAA;AAAA;AAAA;AAAA;;AAQrC,aAAO,MAAM,CAAC,MAAP,CAAc,OAAd,CAAP;AACH;;;;;;AAhCL,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FieldsBinaryCodec = void 0;\nconst typesystem_1 = require(\"../typesystem\");\nclass FieldsBinaryCodec {\n    constructor(binaryCodec) {\n        this.binaryCodec = binaryCodec;\n    }\n    decodeNested(buffer, fieldDefinitions) {\n        let fields = [];\n        let totalLength = 0;\n        for (const fieldDefinition of fieldDefinitions) {\n            let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, fieldDefinition.type);\n            buffer = buffer.slice(decodedLength);\n            totalLength += decodedLength;\n            let field = new typesystem_1.Field(decoded, fieldDefinition.name);\n            fields.push(field);\n        }\n        return [fields, totalLength];\n    }\n    encodeNested(fields) {\n        let buffers = [];\n        for (const field of fields) {\n            let fieldBuffer = this.binaryCodec.encodeNested(field.value);\n            buffers.push(fieldBuffer);\n        }\n        return Buffer.concat(buffers);\n    }\n}\nexports.FieldsBinaryCodec = FieldsBinaryCodec;\n//# sourceMappingURL=fields.js.map"]},"metadata":{},"sourceType":"script"}