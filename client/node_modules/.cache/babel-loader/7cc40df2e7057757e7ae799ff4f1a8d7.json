{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeMapper = void 0;\n\nconst errors = __importStar(require(\"../../errors\"));\n\nconst address_1 = require(\"./address\");\n\nconst boolean_1 = require(\"./boolean\");\n\nconst bytes_1 = require(\"./bytes\");\n\nconst composite_1 = require(\"./composite\");\n\nconst enum_1 = require(\"./enum\");\n\nconst generic_1 = require(\"./generic\");\n\nconst h256_1 = require(\"./h256\");\n\nconst numerical_1 = require(\"./numerical\");\n\nconst struct_1 = require(\"./struct\");\n\nconst fields_1 = require(\"./fields\");\n\nconst tokenIdentifier_1 = require(\"./tokenIdentifier\");\n\nconst variadic_1 = require(\"./variadic\");\n\nconst algebraic_1 = require(\"./algebraic\");\n\nconst genericArray_1 = require(\"./genericArray\");\n\nconst string_1 = require(\"./string\");\n\nconst tuple_1 = require(\"./tuple\");\n\nconst codeMetadata_1 = require(\"./codeMetadata\");\n\nconst nothing_1 = require(\"./nothing\");\n\nclass TypeMapper {\n  constructor(customTypes = []) {\n    this.openTypesFactories = new Map([[\"Option\", (...typeParameters) => new generic_1.OptionType(typeParameters[0])], [\"List\", (...typeParameters) => new generic_1.ListType(typeParameters[0])], // For the following open generics, we use a slightly different typing than the one defined by elrond-wasm-rs (temporary workaround).\n    [\"VarArgs\", (...typeParameters) => new variadic_1.VariadicType(typeParameters[0])], [\"MultiResultVec\", (...typeParameters) => new variadic_1.VariadicType(typeParameters[0])], [\"variadic\", (...typeParameters) => new variadic_1.VariadicType(typeParameters[0])], [\"OptionalArg\", (...typeParameters) => new algebraic_1.OptionalType(typeParameters[0])], [\"optional\", (...typeParameters) => new algebraic_1.OptionalType(typeParameters[0])], [\"OptionalResult\", (...typeParameters) => new algebraic_1.OptionalType(typeParameters[0])], [\"multi\", (...typeParameters) => new composite_1.CompositeType(...typeParameters)], [\"MultiArg\", (...typeParameters) => new composite_1.CompositeType(...typeParameters)], [\"MultiResult\", (...typeParameters) => new composite_1.CompositeType(...typeParameters)], [\"multi\", (...typeParameters) => new composite_1.CompositeType(...typeParameters)], // Perhaps we can adjust the ABI generator to only output \"tuple\", instead of \"tupleN\"?\n    [\"tuple\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)], [\"tuple2\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)], [\"tuple3\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)], [\"tuple4\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)], [\"tuple5\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)], [\"tuple6\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)], [\"tuple7\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)], [\"tuple8\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)], // Known-length arrays.\n    // TODO: Handle these in typeExpressionParser, perhaps?\n    [\"array20\", (...typeParameters) => new genericArray_1.ArrayVecType(20, typeParameters[0])], [\"array32\", (...typeParameters) => new genericArray_1.ArrayVecType(32, typeParameters[0])], [\"array64\", (...typeParameters) => new genericArray_1.ArrayVecType(64, typeParameters[0])]]); // For closed types, we hold actual type instances instead of type constructors / factories (no type parameters needed).\n\n    this.closedTypesMap = new Map([[\"u8\", new numerical_1.U8Type()], [\"u16\", new numerical_1.U16Type()], [\"u32\", new numerical_1.U32Type()], [\"u64\", new numerical_1.U64Type()], [\"U64\", new numerical_1.U64Type()], [\"BigUint\", new numerical_1.BigUIntType()], [\"i8\", new numerical_1.I8Type()], [\"i16\", new numerical_1.I16Type()], [\"i32\", new numerical_1.I32Type()], [\"i64\", new numerical_1.I64Type()], [\"Bigint\", new numerical_1.BigIntType()], [\"BigInt\", new numerical_1.BigIntType()], [\"bool\", new boolean_1.BooleanType()], [\"bytes\", new bytes_1.BytesType()], [\"Address\", new address_1.AddressType()], [\"H256\", new h256_1.H256Type()], [\"utf-8 string\", new string_1.StringType()], [\"TokenIdentifier\", new tokenIdentifier_1.TokenIdentifierType()], [\"CodeMetadata\", new codeMetadata_1.CodeMetadataType()], [\"nothing\", new nothing_1.NothingType()], [\"AsyncCall\", new nothing_1.NothingType()]]);\n\n    for (const customType of customTypes) {\n      this.closedTypesMap.set(customType.getName(), customType);\n    }\n  }\n\n  mapRecursiveType(type) {\n    let isGeneric = type.isGenericType();\n\n    if (type instanceof enum_1.EnumType) {\n      // This will call mapType() recursively, for all the enum variant fields.\n      return this.mapEnumType(type);\n    }\n\n    if (type instanceof struct_1.StructType) {\n      // This will call mapType() recursively, for all the struct's fields.\n      return this.mapStructType(type);\n    }\n\n    if (isGeneric) {\n      // This will call mapType() recursively, for all the type parameters.\n      return this.mapGenericType(type);\n    }\n\n    return null;\n  }\n\n  mapType(type) {\n    var _a;\n\n    let mappedType = this.mapRecursiveType(type);\n\n    if (mappedType !== null) {\n      return mappedType;\n    }\n\n    let knownClosedType = this.closedTypesMap.get(type.getName());\n\n    if (!knownClosedType) {\n      throw new errors.ErrTypingSystem(`Cannot map the type \"${type.getName()}\" to a known type`);\n    }\n\n    return (_a = this.mapRecursiveType(knownClosedType)) !== null && _a !== void 0 ? _a : knownClosedType;\n  }\n\n  feedCustomType(type) {\n    this.closedTypesMap.delete(type.getName());\n    this.closedTypesMap.set(type.getName(), type);\n  }\n\n  mapStructType(type) {\n    let mappedFields = this.mappedFields(type.getFieldsDefinitions());\n    let mappedStruct = new struct_1.StructType(type.getName(), mappedFields);\n    return mappedStruct;\n  }\n\n  mapEnumType(type) {\n    let variants = type.variants.map(variant => new enum_1.EnumVariantDefinition(variant.name, variant.discriminant, this.mappedFields(variant.getFieldsDefinitions())));\n    let mappedEnum = new enum_1.EnumType(type.getName(), variants);\n    return mappedEnum;\n  }\n\n  mappedFields(definitions) {\n    return definitions.map(definition => new fields_1.FieldDefinition(definition.name, definition.description, this.mapType(definition.type)));\n  }\n\n  mapGenericType(type) {\n    let typeParameters = type.getTypeParameters();\n    let mappedTypeParameters = typeParameters.map(item => this.mapType(item));\n    let factory = this.openTypesFactories.get(type.getName());\n\n    if (!factory) {\n      throw new errors.ErrTypingSystem(`Cannot map the generic type \"${type.getName()}\" to a known type`);\n    }\n\n    return factory(...mappedTypeParameters);\n  }\n\n}\n\nexports.TypeMapper = TypeMapper;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/typeMapper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeMapper = void 0;\nconst errors = __importStar(require(\"../../errors\"));\nconst address_1 = require(\"./address\");\nconst boolean_1 = require(\"./boolean\");\nconst bytes_1 = require(\"./bytes\");\nconst composite_1 = require(\"./composite\");\nconst enum_1 = require(\"./enum\");\nconst generic_1 = require(\"./generic\");\nconst h256_1 = require(\"./h256\");\nconst numerical_1 = require(\"./numerical\");\nconst struct_1 = require(\"./struct\");\nconst fields_1 = require(\"./fields\");\nconst tokenIdentifier_1 = require(\"./tokenIdentifier\");\nconst variadic_1 = require(\"./variadic\");\nconst algebraic_1 = require(\"./algebraic\");\nconst genericArray_1 = require(\"./genericArray\");\nconst string_1 = require(\"./string\");\nconst tuple_1 = require(\"./tuple\");\nconst codeMetadata_1 = require(\"./codeMetadata\");\nconst nothing_1 = require(\"./nothing\");\nclass TypeMapper {\n    constructor(customTypes = []) {\n        this.openTypesFactories = new Map([\n            [\"Option\", (...typeParameters) => new generic_1.OptionType(typeParameters[0])],\n            [\"List\", (...typeParameters) => new generic_1.ListType(typeParameters[0])],\n            // For the following open generics, we use a slightly different typing than the one defined by elrond-wasm-rs (temporary workaround).\n            [\"VarArgs\", (...typeParameters) => new variadic_1.VariadicType(typeParameters[0])],\n            [\"MultiResultVec\", (...typeParameters) => new variadic_1.VariadicType(typeParameters[0])],\n            [\"variadic\", (...typeParameters) => new variadic_1.VariadicType(typeParameters[0])],\n            [\"OptionalArg\", (...typeParameters) => new algebraic_1.OptionalType(typeParameters[0])],\n            [\"optional\", (...typeParameters) => new algebraic_1.OptionalType(typeParameters[0])],\n            [\"OptionalResult\", (...typeParameters) => new algebraic_1.OptionalType(typeParameters[0])],\n            [\"multi\", (...typeParameters) => new composite_1.CompositeType(...typeParameters)],\n            [\"MultiArg\", (...typeParameters) => new composite_1.CompositeType(...typeParameters)],\n            [\"MultiResult\", (...typeParameters) => new composite_1.CompositeType(...typeParameters)],\n            [\"multi\", (...typeParameters) => new composite_1.CompositeType(...typeParameters)],\n            // Perhaps we can adjust the ABI generator to only output \"tuple\", instead of \"tupleN\"?\n            [\"tuple\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],\n            [\"tuple2\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],\n            [\"tuple3\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],\n            [\"tuple4\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],\n            [\"tuple5\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],\n            [\"tuple6\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],\n            [\"tuple7\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],\n            [\"tuple8\", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],\n            // Known-length arrays.\n            // TODO: Handle these in typeExpressionParser, perhaps?\n            [\"array20\", (...typeParameters) => new genericArray_1.ArrayVecType(20, typeParameters[0])],\n            [\"array32\", (...typeParameters) => new genericArray_1.ArrayVecType(32, typeParameters[0])],\n            [\"array64\", (...typeParameters) => new genericArray_1.ArrayVecType(64, typeParameters[0])],\n        ]);\n        // For closed types, we hold actual type instances instead of type constructors / factories (no type parameters needed).\n        this.closedTypesMap = new Map([\n            [\"u8\", new numerical_1.U8Type()],\n            [\"u16\", new numerical_1.U16Type()],\n            [\"u32\", new numerical_1.U32Type()],\n            [\"u64\", new numerical_1.U64Type()],\n            [\"U64\", new numerical_1.U64Type()],\n            [\"BigUint\", new numerical_1.BigUIntType()],\n            [\"i8\", new numerical_1.I8Type()],\n            [\"i16\", new numerical_1.I16Type()],\n            [\"i32\", new numerical_1.I32Type()],\n            [\"i64\", new numerical_1.I64Type()],\n            [\"Bigint\", new numerical_1.BigIntType()],\n            [\"BigInt\", new numerical_1.BigIntType()],\n            [\"bool\", new boolean_1.BooleanType()],\n            [\"bytes\", new bytes_1.BytesType()],\n            [\"Address\", new address_1.AddressType()],\n            [\"H256\", new h256_1.H256Type()],\n            [\"utf-8 string\", new string_1.StringType()],\n            [\"TokenIdentifier\", new tokenIdentifier_1.TokenIdentifierType()],\n            [\"CodeMetadata\", new codeMetadata_1.CodeMetadataType()],\n            [\"nothing\", new nothing_1.NothingType()],\n            [\"AsyncCall\", new nothing_1.NothingType()]\n        ]);\n        for (const customType of customTypes) {\n            this.closedTypesMap.set(customType.getName(), customType);\n        }\n    }\n    mapRecursiveType(type) {\n        let isGeneric = type.isGenericType();\n        if (type instanceof enum_1.EnumType) {\n            // This will call mapType() recursively, for all the enum variant fields.\n            return this.mapEnumType(type);\n        }\n        if (type instanceof struct_1.StructType) {\n            // This will call mapType() recursively, for all the struct's fields.\n            return this.mapStructType(type);\n        }\n        if (isGeneric) {\n            // This will call mapType() recursively, for all the type parameters.\n            return this.mapGenericType(type);\n        }\n        return null;\n    }\n    mapType(type) {\n        var _a;\n        let mappedType = this.mapRecursiveType(type);\n        if (mappedType !== null) {\n            return mappedType;\n        }\n        let knownClosedType = this.closedTypesMap.get(type.getName());\n        if (!knownClosedType) {\n            throw new errors.ErrTypingSystem(`Cannot map the type \"${type.getName()}\" to a known type`);\n        }\n        return (_a = this.mapRecursiveType(knownClosedType)) !== null && _a !== void 0 ? _a : knownClosedType;\n    }\n    feedCustomType(type) {\n        this.closedTypesMap.delete(type.getName());\n        this.closedTypesMap.set(type.getName(), type);\n    }\n    mapStructType(type) {\n        let mappedFields = this.mappedFields(type.getFieldsDefinitions());\n        let mappedStruct = new struct_1.StructType(type.getName(), mappedFields);\n        return mappedStruct;\n    }\n    mapEnumType(type) {\n        let variants = type.variants.map((variant) => new enum_1.EnumVariantDefinition(variant.name, variant.discriminant, this.mappedFields(variant.getFieldsDefinitions())));\n        let mappedEnum = new enum_1.EnumType(type.getName(), variants);\n        return mappedEnum;\n    }\n    mappedFields(definitions) {\n        return definitions.map((definition) => new fields_1.FieldDefinition(definition.name, definition.description, this.mapType(definition.type)));\n    }\n    mapGenericType(type) {\n        let typeParameters = type.getTypeParameters();\n        let mappedTypeParameters = typeParameters.map((item) => this.mapType(item));\n        let factory = this.openTypesFactories.get(type.getName());\n        if (!factory) {\n            throw new errors.ErrTypingSystem(`Cannot map the generic type \"${type.getName()}\" to a known type`);\n        }\n        return factory(...mappedTypeParameters);\n    }\n}\nexports.TypeMapper = TypeMapper;\n//# sourceMappingURL=typeMapper.js.map"]},"metadata":{},"sourceType":"script"}