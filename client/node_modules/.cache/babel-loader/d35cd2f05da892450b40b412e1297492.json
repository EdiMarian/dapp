{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/SelectHorse/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { getNftsWallet, getSlots, checkExistRace } from '../../apiRequests';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectHorse = props => {\n  _s();\n\n  const {\n    address\n  } = useGetAccountInfo();\n  const [exist, setExist] = useState(false);\n  const [nft, setNft] = useState([]);\n  const bonus = ['SPEED', 'EDURANCE', 'AGILITY'];\n  const [slots, setSlots] = useState(0);\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await getNftsWallet(address).then(res => res.data);\n      setNft(data);\n      const nbSlots = await getSlots(props.id).then(res => res.data);\n      setSlots(nbSlots);\n      const check = await checkExistRace(props.id).then(res => res.exist);\n      setExist(check);\n    };\n\n    fetch();\n  }, []);\n\n  const create = async () => {\n    console.log(exist);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.nftGrid,\n    style: props.col ? {\n      gridTemplateColumns: `repeat(${props.col}, 1fr)`\n    } : {\n      gridTemplateColumns: 'repeat(4, 1fr)'\n    },\n    children: nft ? nft.map(({\n      identifier,\n      name,\n      url\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.nftContent,\n      onClick: create,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        className: styles.img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: props.color ? {\n          color: props.color\n        } : {\n          color: 'white'\n        },\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, identifier, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You don't have EquiStar Nfts.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectHorse, \"+a0OdXC0/1UsFUtkfMFl7vQhqR8=\", false, function () {\n  return [useGetAccountInfo];\n});\n\n_c = SelectHorse;\nexport default SelectHorse;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectHorse\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/components/SelectHorse/index.tsx"],"names":["React","useState","useEffect","getNftsWallet","getSlots","checkExistRace","useGetAccountInfo","styles","SelectHorse","props","address","exist","setExist","nft","setNft","bonus","slots","setSlots","fetch","data","then","res","nbSlots","id","check","create","console","log","nftGrid","col","gridTemplateColumns","map","identifier","name","url","nftContent","img","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,cAAlC,QAAwD,mBAAxD;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAgB;AAAA;;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,iBAAiB,EAArC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACY,GAAD,EAAMC,MAAN,IAAgBb,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAMc,KAAK,GAAG,CAAC,OAAD,EAAU,UAAV,EAAsB,SAAtB,CAAd;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,CAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,KAAK,GAAG,YAAY;AACxB,YAAMC,IAAI,GAAG,MAAMhB,aAAa,CAACO,OAAD,CAAb,CAAuBU,IAAvB,CAA6BC,GAAD,IAASA,GAAG,CAACF,IAAzC,CAAnB;AACAL,MAAAA,MAAM,CAACK,IAAD,CAAN;AACA,YAAMG,OAAO,GAAG,MAAMlB,QAAQ,CAACK,KAAK,CAACc,EAAP,CAAR,CAAmBH,IAAnB,CAAyBC,GAAD,IAASA,GAAG,CAACF,IAArC,CAAtB;AACAF,MAAAA,QAAQ,CAACK,OAAD,CAAR;AACA,YAAME,KAAK,GAAG,MAAMnB,cAAc,CAACI,KAAK,CAACc,EAAP,CAAd,CAAyBH,IAAzB,CAA+BC,GAAD,IAASA,GAAG,CAACV,KAA3C,CAApB;AACAC,MAAAA,QAAQ,CAACY,KAAD,CAAR;AACD,KAPD;;AAQAN,IAAAA,KAAK;AACN,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAMO,MAAM,GAAG,YAAY;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AACD,GAFD;;AAIA,sBACE;AACE,IAAA,SAAS,EAAEJ,MAAM,CAACqB,OADpB;AAEE,IAAA,KAAK,EACHnB,KAAK,CAACoB,GAAN,GACI;AACEC,MAAAA,mBAAmB,EAAG,UAASrB,KAAK,CAACoB,GAAI;AAD3C,KADJ,GAII;AACEC,MAAAA,mBAAmB,EAAE;AADvB,KAPR;AAAA,cAYGjB,GAAG,GACFA,GAAG,CAACkB,GAAJ,CAAQ,CAAC;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,IAAd;AAAoBC,MAAAA;AAApB,KAAD,kBACN;AAAsB,MAAA,SAAS,EAAE3B,MAAM,CAAC4B,UAAxC;AAAoD,MAAA,OAAO,EAAEV,MAA7D;AAAA,8BACE;AAAK,QAAA,GAAG,EAAES,GAAV;AAAe,QAAA,SAAS,EAAE3B,MAAM,CAAC6B;AAAjC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,KAAK,EAAE3B,KAAK,CAAC4B,KAAN,GAAc;AAAEA,UAAAA,KAAK,EAAE5B,KAAK,CAAC4B;AAAf,SAAd,GAAuC;AAAEA,UAAAA,KAAK,EAAE;AAAT,SADhD;AAAA,kBAGGJ;AAHH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAUD,UAAV;AAAA;AAAA;AAAA;AAAA,YADF,CADE,gBAYF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxBJ;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAnDD;;GAAMxB,W;UACgBF,iB;;;KADhBE,W;AAqDN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getNftsWallet, getSlots, checkExistRace } from '../../apiRequests';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport styles from './styles.module.scss';\n\nconst SelectHorse = (props: any) => {\n  const { address } = useGetAccountInfo();\n  const [exist, setExist] = useState(false);\n  const [nft, setNft] = useState([]);\n  const bonus = ['SPEED', 'EDURANCE', 'AGILITY'];\n  const [slots, setSlots] = useState(0);\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await getNftsWallet(address).then((res) => res.data);\n      setNft(data);\n      const nbSlots = await getSlots(props.id).then((res) => res.data);\n      setSlots(nbSlots);\n      const check = await checkExistRace(props.id).then((res) => res.exist);\n      setExist(check);\n    };\n    fetch();\n  }, []);\n\n  const create = async () => {\n    console.log(exist);\n  };\n\n  return (\n    <div\n      className={styles.nftGrid}\n      style={\n        props.col\n          ? {\n              gridTemplateColumns: `repeat(${props.col}, 1fr)`\n            }\n          : {\n              gridTemplateColumns: 'repeat(4, 1fr)'\n            }\n      }\n    >\n      {nft ? (\n        nft.map(({ identifier, name, url }) => (\n          <div key={identifier} className={styles.nftContent} onClick={create}>\n            <img src={url} className={styles.img} />\n            <p\n              style={props.color ? { color: props.color } : { color: 'white' }}\n            >\n              {name}\n            </p>\n          </div>\n        ))\n      ) : (\n        <p>You don&apos;t have EquiStar Nfts.</p>\n      )}\n    </div>\n  );\n};\n\nexport default SelectHorse;\n"]},"metadata":{},"sourceType":"module"}