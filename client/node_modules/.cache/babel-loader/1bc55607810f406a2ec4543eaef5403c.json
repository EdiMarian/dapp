{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractCallPayloadBuilder = exports.ContractUpgradePayloadBuilder = exports.ContractDeployPayloadBuilder = exports.ArwenVirtualMachine = void 0;\n\nvar transactionPayload_1 = require(\"../transactionPayload\");\n\nvar utils_1 = require(\"../utils\");\n\nvar codeMetadata_1 = require(\"./codeMetadata\");\n\nvar argSerializer_1 = require(\"./argSerializer\");\n\nexports.ArwenVirtualMachine = \"0500\";\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract deployment transactions.\n */\n\nvar ContractDeployPayloadBuilder = /*#__PURE__*/function () {\n  function ContractDeployPayloadBuilder() {\n    _classCallCheck(this, ContractDeployPayloadBuilder);\n\n    this.code = null;\n    this.codeMetadata = new codeMetadata_1.CodeMetadata();\n    this.arguments = [];\n  }\n  /**\n   * Sets the code of the Smart Contract.\n   */\n\n\n  _createClass(ContractDeployPayloadBuilder, [{\n    key: \"setCode\",\n    value: function setCode(code) {\n      this.code = code;\n      return this;\n    }\n    /**\n     * Sets the code metadata of the Smart Contract.\n     */\n\n  }, {\n    key: \"setCodeMetadata\",\n    value: function setCodeMetadata(codeMetadata) {\n      this.codeMetadata = codeMetadata;\n      return this;\n    }\n    /**\n     * Adds constructor (`init`) arguments.\n     */\n\n  }, {\n    key: \"addInitArg\",\n    value: function addInitArg(arg) {\n      this.arguments.push(arg);\n      return this;\n    }\n    /**\n     * Sets constructor (`init`) arguments.\n     */\n\n  }, {\n    key: \"setInitArgs\",\n    value: function setInitArgs(args) {\n      this.arguments = args;\n      return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      utils_1.guardValueIsSet(\"code\", this.code);\n      var code = this.code.toString();\n      var codeMetadata = this.codeMetadata.toString();\n      var data = \"\".concat(code, \"@\").concat(exports.ArwenVirtualMachine, \"@\").concat(codeMetadata);\n      data = appendArgumentsToString(data, this.arguments);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n\n  return ContractDeployPayloadBuilder;\n}();\n\nexports.ContractDeployPayloadBuilder = ContractDeployPayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract upgrade transactions.\n */\n\nvar ContractUpgradePayloadBuilder = /*#__PURE__*/function () {\n  function ContractUpgradePayloadBuilder() {\n    _classCallCheck(this, ContractUpgradePayloadBuilder);\n\n    this.code = null;\n    this.codeMetadata = new codeMetadata_1.CodeMetadata();\n    this.arguments = [];\n  }\n  /**\n   * Sets the code of the Smart Contract.\n   */\n\n\n  _createClass(ContractUpgradePayloadBuilder, [{\n    key: \"setCode\",\n    value: function setCode(code) {\n      this.code = code;\n      return this;\n    }\n    /**\n     * Sets the code metadata of the Smart Contract.\n     */\n\n  }, {\n    key: \"setCodeMetadata\",\n    value: function setCodeMetadata(codeMetadata) {\n      this.codeMetadata = codeMetadata;\n      return this;\n    }\n    /**\n     * Adds upgrade (`init`) arguments.\n     */\n\n  }, {\n    key: \"addInitArg\",\n    value: function addInitArg(arg) {\n      this.arguments.push(arg);\n      return this;\n    }\n    /**\n     * Sets upgrade (`init`) arguments.\n     */\n\n  }, {\n    key: \"setInitArgs\",\n    value: function setInitArgs(args) {\n      this.arguments = args;\n      return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      utils_1.guardValueIsSet(\"code\", this.code);\n      var code = this.code.toString();\n      var codeMetadata = this.codeMetadata.toString();\n      var data = \"upgradeContract@\".concat(code, \"@\").concat(codeMetadata);\n      data = appendArgumentsToString(data, this.arguments);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n\n  return ContractUpgradePayloadBuilder;\n}();\n\nexports.ContractUpgradePayloadBuilder = ContractUpgradePayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract execution transactions.\n */\n\nvar ContractCallPayloadBuilder = /*#__PURE__*/function () {\n  function ContractCallPayloadBuilder() {\n    _classCallCheck(this, ContractCallPayloadBuilder);\n\n    this.contractFunction = null;\n    this.arguments = [];\n  }\n  /**\n   * Sets the function to be called (executed).\n   */\n\n\n  _createClass(ContractCallPayloadBuilder, [{\n    key: \"setFunction\",\n    value: function setFunction(contractFunction) {\n      this.contractFunction = contractFunction;\n      return this;\n    }\n    /**\n     * Adds a function argument.\n     */\n\n  }, {\n    key: \"addArg\",\n    value: function addArg(arg) {\n      this.arguments.push(arg);\n      return this;\n    }\n    /**\n     * Sets the function arguments.\n     */\n\n  }, {\n    key: \"setArgs\",\n    value: function setArgs(args) {\n      this.arguments = args;\n      return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      utils_1.guardValueIsSet(\"calledFunction\", this.contractFunction);\n      var data = this.contractFunction.name;\n      data = appendArgumentsToString(data, this.arguments);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n\n  return ContractCallPayloadBuilder;\n}();\n\nexports.ContractCallPayloadBuilder = ContractCallPayloadBuilder;\n\nfunction appendArgumentsToString(to, values) {\n  var _argSerializer_1$ArgS = new argSerializer_1.ArgSerializer().valuesToString(values),\n      argumentsString = _argSerializer_1$ArgS.argumentsString,\n      count = _argSerializer_1$ArgS.count;\n\n  if (count == 0) {\n    return to;\n  }\n\n  return \"\".concat(to, \"@\").concat(argumentsString);\n}","map":{"version":3,"sources":["../../src/smartcontracts/transactionPayloadBuilders.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContractCallPayloadBuilder = exports.ContractUpgradePayloadBuilder = exports.ContractDeployPayloadBuilder = exports.ArwenVirtualMachine = void 0;\nconst transactionPayload_1 = require(\"../transactionPayload\");\nconst utils_1 = require(\"../utils\");\nconst codeMetadata_1 = require(\"./codeMetadata\");\nconst argSerializer_1 = require(\"./argSerializer\");\nexports.ArwenVirtualMachine = \"0500\";\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract deployment transactions.\n */\nclass ContractDeployPayloadBuilder {\n    constructor() {\n        this.code = null;\n        this.codeMetadata = new codeMetadata_1.CodeMetadata();\n        this.arguments = [];\n    }\n    /**\n     * Sets the code of the Smart Contract.\n     */\n    setCode(code) {\n        this.code = code;\n        return this;\n    }\n    /**\n     * Sets the code metadata of the Smart Contract.\n     */\n    setCodeMetadata(codeMetadata) {\n        this.codeMetadata = codeMetadata;\n        return this;\n    }\n    /**\n     * Adds constructor (`init`) arguments.\n     */\n    addInitArg(arg) {\n        this.arguments.push(arg);\n        return this;\n    }\n    /**\n     * Sets constructor (`init`) arguments.\n     */\n    setInitArgs(args) {\n        this.arguments = args;\n        return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n    build() {\n        utils_1.guardValueIsSet(\"code\", this.code);\n        let code = this.code.toString();\n        let codeMetadata = this.codeMetadata.toString();\n        let data = `${code}@${exports.ArwenVirtualMachine}@${codeMetadata}`;\n        data = appendArgumentsToString(data, this.arguments);\n        return new transactionPayload_1.TransactionPayload(data);\n    }\n}\nexports.ContractDeployPayloadBuilder = ContractDeployPayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract upgrade transactions.\n */\nclass ContractUpgradePayloadBuilder {\n    constructor() {\n        this.code = null;\n        this.codeMetadata = new codeMetadata_1.CodeMetadata();\n        this.arguments = [];\n    }\n    /**\n     * Sets the code of the Smart Contract.\n     */\n    setCode(code) {\n        this.code = code;\n        return this;\n    }\n    /**\n     * Sets the code metadata of the Smart Contract.\n     */\n    setCodeMetadata(codeMetadata) {\n        this.codeMetadata = codeMetadata;\n        return this;\n    }\n    /**\n     * Adds upgrade (`init`) arguments.\n     */\n    addInitArg(arg) {\n        this.arguments.push(arg);\n        return this;\n    }\n    /**\n     * Sets upgrade (`init`) arguments.\n     */\n    setInitArgs(args) {\n        this.arguments = args;\n        return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n    build() {\n        utils_1.guardValueIsSet(\"code\", this.code);\n        let code = this.code.toString();\n        let codeMetadata = this.codeMetadata.toString();\n        let data = `upgradeContract@${code}@${codeMetadata}`;\n        data = appendArgumentsToString(data, this.arguments);\n        return new transactionPayload_1.TransactionPayload(data);\n    }\n}\nexports.ContractUpgradePayloadBuilder = ContractUpgradePayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract execution transactions.\n */\nclass ContractCallPayloadBuilder {\n    constructor() {\n        this.contractFunction = null;\n        this.arguments = [];\n    }\n    /**\n     * Sets the function to be called (executed).\n     */\n    setFunction(contractFunction) {\n        this.contractFunction = contractFunction;\n        return this;\n    }\n    /**\n     * Adds a function argument.\n     */\n    addArg(arg) {\n        this.arguments.push(arg);\n        return this;\n    }\n    /**\n     * Sets the function arguments.\n     */\n    setArgs(args) {\n        this.arguments = args;\n        return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n    build() {\n        utils_1.guardValueIsSet(\"calledFunction\", this.contractFunction);\n        let data = this.contractFunction.name;\n        data = appendArgumentsToString(data, this.arguments);\n        return new transactionPayload_1.TransactionPayload(data);\n    }\n}\nexports.ContractCallPayloadBuilder = ContractCallPayloadBuilder;\nfunction appendArgumentsToString(to, values) {\n    let { argumentsString, count } = new argSerializer_1.ArgSerializer().valuesToString(values);\n    if (count == 0) {\n        return to;\n    }\n    return `${to}@${argumentsString}`;\n}\n//# sourceMappingURL=transactionPayloadBuilders.js.map"]},"metadata":{},"sourceType":"script"}