{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useGetAccountInfo, getNetworkProxy, transactionServices } from '@elrondnetwork/dapp-core';\nimport { Query, ProxyProvider, ContractFunction, Address, decodeBigNumber, decodeUnsignedNumber, decodeString, AddressValue } from '@elrondnetwork/erdjs';\nimport { network, decimals, auctionContract, denomination } from 'config';\nimport { useDispatch } from 'context';\nimport denominate from 'helpers/denominate';\n\nconst useGlobalData = () => {\n  _s();\n\n  const {\n    address\n  } = useGetAccountInfo();\n  const {\n    successfulTransactionsArray\n  } = transactionServices.useGetSuccessfulTransactions();\n  const dispatch = useDispatch();\n  const provider = new ProxyProvider(network.gatewayAddress);\n  const criticalFetches = {\n    getContractDetails: {\n      key: 'contractDetails',\n      handler: async () => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getContractConfig')\n          });\n          const data = await provider.queryContract(query);\n          const response = data.outputUntyped();\n          const ownerAddressIndex = 0;\n          const serviceFeeIndex = 1;\n          const delegationCapIndex = 2;\n          const automaticActivationIndex = 4;\n          const withDelegationCapIndex = 5;\n          const redelegationCapIndex = 7;\n          const ownerAddress = response[ownerAddressIndex];\n          const serviceFee = response[serviceFeeIndex];\n          const delegationCap = response[delegationCapIndex];\n          const activationStatus = response[automaticActivationIndex];\n          const withDelegationCap = response[withDelegationCapIndex];\n          const redelegationCap = response[redelegationCapIndex];\n          return {\n            withDelegationCap: String(withDelegationCap),\n            owner: new Address(address).hex() === ownerAddress.toString('hex'),\n            delegationCap: decodeBigNumber(delegationCap).toFixed(),\n            redelegationCap: decodeString(redelegationCap) === 'true' ? 'ON' : 'OFF',\n            serviceFee: (decodeUnsignedNumber(serviceFee) / 100).toString() + '%',\n            automaticActivation: decodeString(activationStatus) === 'true' ? 'ON' : 'OFF'\n          };\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getNodesNumber: {\n      key: 'nodesNumber',\n      handler: async () => {\n        try {\n          const query = new Query({\n            address: new Address(auctionContract),\n            func: new ContractFunction('getBlsKeysStatus'),\n            args: [new AddressValue(new Address(network.delegationContract))]\n          });\n          const data = await provider.queryContract(query);\n          const response = data.outputUntyped();\n          return response;\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getTotalActiveStake: {\n      key: 'totalActiveStake',\n      handler: async () => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getTotalActiveStake')\n          });\n          const data = await provider.queryContract(query);\n          const [totalNodes] = data.outputUntyped();\n          return decodeBigNumber(totalNodes).toFixed();\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getUserActiveStake: {\n      key: 'userActiveStake',\n      handler: async () => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getUserActiveStake'),\n            args: [new AddressValue(new Address(address))]\n          });\n          const data = await provider.queryContract(query);\n          const [userStake] = data.outputUntyped();\n          return denominate({\n            input: decodeBigNumber(userStake).toFixed(),\n            decimals,\n            denomination,\n            addCommas: false\n          });\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getNetworkConfig: {\n      key: 'networkConfig',\n      handler: async () => {\n        try {\n          return await getNetworkProxy().getNetworkConfig();\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  };\n\n  const fetchCriticalData = () => {\n    const fetchData = async () => {\n      const keys = Object.keys(criticalFetches);\n      keys.forEach(key => {\n        dispatch({\n          type: key,\n          [criticalFetches[key].key]: {\n            status: 'loading',\n            data: null,\n            error: null\n          }\n        });\n      });\n      const data = await Promise.allSettled(keys.map(key => criticalFetches[key].handler()));\n      data.forEach((item, index) => {\n        dispatch({\n          type: keys[index],\n          [criticalFetches[keys[index]].key]: {\n            status: item.status === 'rejected' ? 'error' : 'loaded',\n            error: item.reason || null,\n            data: item.value || null\n          }\n        });\n      });\n    };\n\n    fetchData();\n  };\n\n  useEffect(fetchCriticalData, [successfulTransactionsArray.length]);\n};\n\n_s(useGlobalData, \"Wc+8ZGrWP2bibvLn5AU/am7JIvM=\", false, function () {\n  return [useGetAccountInfo, transactionServices.useGetSuccessfulTransactions, useDispatch];\n});\n\nexport default useGlobalData;","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/src/hooks/useGlobalData.ts"],"names":["useEffect","useGetAccountInfo","getNetworkProxy","transactionServices","Query","ProxyProvider","ContractFunction","Address","decodeBigNumber","decodeUnsignedNumber","decodeString","AddressValue","network","decimals","auctionContract","denomination","useDispatch","denominate","useGlobalData","address","successfulTransactionsArray","useGetSuccessfulTransactions","dispatch","provider","gatewayAddress","criticalFetches","getContractDetails","key","handler","query","delegationContract","func","data","queryContract","response","outputUntyped","ownerAddressIndex","serviceFeeIndex","delegationCapIndex","automaticActivationIndex","withDelegationCapIndex","redelegationCapIndex","ownerAddress","serviceFee","delegationCap","activationStatus","withDelegationCap","redelegationCap","String","owner","hex","toString","toFixed","automaticActivation","error","Promise","reject","getNodesNumber","args","getTotalActiveStake","totalNodes","getUserActiveStake","userStake","input","addCommas","getNetworkConfig","fetchCriticalData","fetchData","keys","Object","forEach","type","status","allSettled","map","item","index","reason","value","length"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,SACEC,iBADF,EAEEC,eAFF,EAGEC,mBAHF,QAIO,0BAJP;AAKA,SACEC,KADF,EAEEC,aAFF,EAGEC,gBAHF,EAIEC,OAJF,EAKEC,eALF,EAMEC,oBANF,EAOEC,YAPF,EAQEC,YARF,QASO,sBATP;AAWA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,eAA5B,EAA6CC,YAA7C,QAAiE,QAAjE;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;;AAmCA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM;AAAEC,IAAAA;AAAF,MAAclB,iBAAiB,EAArC;AACA,QAAM;AAAEmB,IAAAA;AAAF,MACJjB,mBAAmB,CAACkB,4BAApB,EADF;AAGA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,QAAQ,GAAG,IAAIlB,aAAJ,CAAkBO,OAAO,CAACY,cAA1B,CAAjB;AACA,QAAMC,eAAkC,GAAG;AACzCC,IAAAA,kBAAkB,EAAE;AAClBC,MAAAA,GAAG,EAAE,iBADa;AAElBC,MAAAA,OAAO,EAAE,YAAmD;AAC1D,YAAI;AACF,gBAAMC,KAAK,GAAG,IAAIzB,KAAJ,CAAU;AACtBe,YAAAA,OAAO,EAAE,IAAIZ,OAAJ,CAAYK,OAAO,CAACkB,kBAApB,CADa;AAEtBC,YAAAA,IAAI,EAAE,IAAIzB,gBAAJ,CAAqB,mBAArB;AAFgB,WAAV,CAAd;AAKA,gBAAM0B,IAAI,GAAG,MAAMT,QAAQ,CAACU,aAAT,CAAuBJ,KAAvB,CAAnB;AACA,gBAAMK,QAAQ,GAAGF,IAAI,CAACG,aAAL,EAAjB;AAEA,gBAAMC,iBAAiB,GAAG,CAA1B;AACA,gBAAMC,eAAe,GAAG,CAAxB;AACA,gBAAMC,kBAAkB,GAAG,CAA3B;AACA,gBAAMC,wBAAwB,GAAG,CAAjC;AACA,gBAAMC,sBAAsB,GAAG,CAA/B;AACA,gBAAMC,oBAAoB,GAAG,CAA7B;AAEA,gBAAMC,YAAY,GAAGR,QAAQ,CAACE,iBAAD,CAA7B;AACA,gBAAMO,UAAU,GAAGT,QAAQ,CAACG,eAAD,CAA3B;AACA,gBAAMO,aAAa,GAAGV,QAAQ,CAACI,kBAAD,CAA9B;AACA,gBAAMO,gBAAgB,GAAGX,QAAQ,CAACK,wBAAD,CAAjC;AACA,gBAAMO,iBAAiB,GAAGZ,QAAQ,CAACM,sBAAD,CAAlC;AACA,gBAAMO,eAAe,GAAGb,QAAQ,CAACO,oBAAD,CAAhC;AAEA,iBAAO;AACLK,YAAAA,iBAAiB,EAAEE,MAAM,CAACF,iBAAD,CADpB;AAELG,YAAAA,KAAK,EAAE,IAAI1C,OAAJ,CAAYY,OAAZ,EAAqB+B,GAArB,OAA+BR,YAAY,CAACS,QAAb,CAAsB,KAAtB,CAFjC;AAGLP,YAAAA,aAAa,EAAEpC,eAAe,CAACoC,aAAD,CAAf,CAA+BQ,OAA/B,EAHV;AAILL,YAAAA,eAAe,EACbrC,YAAY,CAACqC,eAAD,CAAZ,KAAkC,MAAlC,GAA2C,IAA3C,GAAkD,KAL/C;AAMLJ,YAAAA,UAAU,EACR,CAAClC,oBAAoB,CAACkC,UAAD,CAApB,GAAmC,GAApC,EAAyCQ,QAAzC,KAAsD,GAPnD;AAQLE,YAAAA,mBAAmB,EACjB3C,YAAY,CAACmC,gBAAD,CAAZ,KAAmC,MAAnC,GAA4C,IAA5C,GAAmD;AAThD,WAAP;AAWD,SAlCD,CAkCE,OAAOS,KAAP,EAAc;AACd,iBAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;AACF;AAxCiB,KADqB;AA2CzCG,IAAAA,cAAc,EAAE;AACd9B,MAAAA,GAAG,EAAE,aADS;AAEdC,MAAAA,OAAO,EAAE,YAA6C;AACpD,YAAI;AACF,gBAAMC,KAAK,GAAG,IAAIzB,KAAJ,CAAU;AACtBe,YAAAA,OAAO,EAAE,IAAIZ,OAAJ,CAAYO,eAAZ,CADa;AAEtBiB,YAAAA,IAAI,EAAE,IAAIzB,gBAAJ,CAAqB,kBAArB,CAFgB;AAGtBoD,YAAAA,IAAI,EAAE,CAAC,IAAI/C,YAAJ,CAAiB,IAAIJ,OAAJ,CAAYK,OAAO,CAACkB,kBAApB,CAAjB,CAAD;AAHgB,WAAV,CAAd;AAMA,gBAAME,IAAI,GAAG,MAAMT,QAAQ,CAACU,aAAT,CAAuBJ,KAAvB,CAAnB;AACA,gBAAMK,QAAQ,GAAGF,IAAI,CAACG,aAAL,EAAjB;AAEA,iBAAOD,QAAP;AACD,SAXD,CAWE,OAAOoB,KAAP,EAAc;AACd,iBAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;AACF;AAjBa,KA3CyB;AA8DzCK,IAAAA,mBAAmB,EAAE;AACnBhC,MAAAA,GAAG,EAAE,kBADc;AAEnBC,MAAAA,OAAO,EAAE,YAA6B;AACpC,YAAI;AACF,gBAAMC,KAAK,GAAG,IAAIzB,KAAJ,CAAU;AACtBe,YAAAA,OAAO,EAAE,IAAIZ,OAAJ,CAAYK,OAAO,CAACkB,kBAApB,CADa;AAEtBC,YAAAA,IAAI,EAAE,IAAIzB,gBAAJ,CAAqB,qBAArB;AAFgB,WAAV,CAAd;AAKA,gBAAM0B,IAAI,GAAG,MAAMT,QAAQ,CAACU,aAAT,CAAuBJ,KAAvB,CAAnB;AACA,gBAAM,CAAC+B,UAAD,IAAe5B,IAAI,CAACG,aAAL,EAArB;AAEA,iBAAO3B,eAAe,CAACoD,UAAD,CAAf,CAA4BR,OAA5B,EAAP;AACD,SAVD,CAUE,OAAOE,KAAP,EAAc;AACd,iBAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;AACF;AAhBkB,KA9DoB;AAgFzCO,IAAAA,kBAAkB,EAAE;AAClBlC,MAAAA,GAAG,EAAE,iBADa;AAElBC,MAAAA,OAAO,EAAE,YAA6B;AACpC,YAAI;AACF,gBAAMC,KAAK,GAAG,IAAIzB,KAAJ,CAAU;AACtBe,YAAAA,OAAO,EAAE,IAAIZ,OAAJ,CAAYK,OAAO,CAACkB,kBAApB,CADa;AAEtBC,YAAAA,IAAI,EAAE,IAAIzB,gBAAJ,CAAqB,oBAArB,CAFgB;AAGtBoD,YAAAA,IAAI,EAAE,CAAC,IAAI/C,YAAJ,CAAiB,IAAIJ,OAAJ,CAAYY,OAAZ,CAAjB,CAAD;AAHgB,WAAV,CAAd;AAMA,gBAAMa,IAAI,GAAG,MAAMT,QAAQ,CAACU,aAAT,CAAuBJ,KAAvB,CAAnB;AACA,gBAAM,CAACiC,SAAD,IAAc9B,IAAI,CAACG,aAAL,EAApB;AAEA,iBAAOlB,UAAU,CAAC;AAChB8C,YAAAA,KAAK,EAAEvD,eAAe,CAACsD,SAAD,CAAf,CAA2BV,OAA3B,EADS;AAEhBvC,YAAAA,QAFgB;AAGhBE,YAAAA,YAHgB;AAIhBiD,YAAAA,SAAS,EAAE;AAJK,WAAD,CAAjB;AAMD,SAhBD,CAgBE,OAAOV,KAAP,EAAc;AACd,iBAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;AACF;AAtBiB,KAhFqB;AAwGzCW,IAAAA,gBAAgB,EAAE;AAChBtC,MAAAA,GAAG,EAAE,eADW;AAEhBC,MAAAA,OAAO,EAAE,YAA0B;AACjC,YAAI;AACF,iBAAO,MAAM1B,eAAe,GAAG+D,gBAAlB,EAAb;AACD,SAFD,CAEE,OAAOX,KAAP,EAAc;AACd,iBAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;AACF;AARe;AAxGuB,GAA3C;;AAoHA,QAAMY,iBAAiB,GAAG,MAAY;AACpC,UAAMC,SAAS,GAAG,YAAY;AAC5B,YAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAY3C,eAAZ,CAAb;AAEA2C,MAAAA,IAAI,CAACE,OAAL,CAAc3C,GAAD,IAAS;AACpBL,QAAAA,QAAQ,CAAC;AACPiD,UAAAA,IAAI,EAAE5C,GADC;AAEP,WAACF,eAAe,CAACE,GAAD,CAAf,CAAqBA,GAAtB,GAA4B;AAC1B6C,YAAAA,MAAM,EAAE,SADkB;AAE1BxC,YAAAA,IAAI,EAAE,IAFoB;AAG1BsB,YAAAA,KAAK,EAAE;AAHmB;AAFrB,SAAD,CAAR;AAQD,OATD;AAWA,YAAMtB,IAAI,GAAG,MAAMuB,OAAO,CAACkB,UAAR,CACjBL,IAAI,CAACM,GAAL,CAAU/C,GAAD,IAAiBF,eAAe,CAACE,GAAD,CAAf,CAAqBC,OAArB,EAA1B,CADiB,CAAnB;AAIAI,MAAAA,IAAI,CAACsC,OAAL,CAAa,CAACK,IAAD,EAAYC,KAAZ,KAA2B;AACtCtD,QAAAA,QAAQ,CAAC;AACPiD,UAAAA,IAAI,EAAEH,IAAI,CAACQ,KAAD,CADH;AAEP,WAACnD,eAAe,CAAC2C,IAAI,CAACQ,KAAD,CAAL,CAAf,CAA6BjD,GAA9B,GAAoC;AAClC6C,YAAAA,MAAM,EAAEG,IAAI,CAACH,MAAL,KAAgB,UAAhB,GAA6B,OAA7B,GAAuC,QADb;AAElClB,YAAAA,KAAK,EAAEqB,IAAI,CAACE,MAAL,IAAe,IAFY;AAGlC7C,YAAAA,IAAI,EAAE2C,IAAI,CAACG,KAAL,IAAc;AAHc;AAF7B,SAAD,CAAR;AAQD,OATD;AAUD,KA5BD;;AA8BAX,IAAAA,SAAS;AACV,GAhCD;;AAkCAnE,EAAAA,SAAS,CAACkE,iBAAD,EAAoB,CAAC9C,2BAA2B,CAAC2D,MAA7B,CAApB,CAAT;AACD,CA9JD;;GAAM7D,a;UACgBjB,iB,EAElBE,mBAAmB,CAACkB,4B,EAELL,W;;;AA2JnB,eAAeE,aAAf","sourcesContent":["import { useEffect } from 'react';\n\nimport {\n  useGetAccountInfo,\n  getNetworkProxy,\n  transactionServices\n} from '@elrondnetwork/dapp-core';\nimport {\n  Query,\n  ProxyProvider,\n  ContractFunction,\n  Address,\n  decodeBigNumber,\n  decodeUnsignedNumber,\n  decodeString,\n  AddressValue\n} from '@elrondnetwork/erdjs';\n\nimport { network, decimals, auctionContract, denomination } from 'config';\nimport { useDispatch } from 'context';\nimport denominate from 'helpers/denominate';\n\ninterface ContractDetailsType {\n  automaticActivation: string;\n  redelegationCap: string;\n  serviceFee: string;\n  delegationCap: string;\n  owner: boolean;\n  withDelegationCap: string;\n}\n\ninterface globalFetchesType {\n  [key: string]: any;\n  getContractDetails: {\n    key: string;\n    handler: () => Promise<ContractDetailsType | string>;\n  };\n  getNodesNumber: {\n    key: string;\n    handler: () => Promise<Array<Buffer> | string>;\n  };\n  getTotalActiveStake: {\n    key: string;\n    handler: () => Promise<string>;\n  };\n  getUserActiveStake: {\n    key: string;\n    handler: () => Promise<string>;\n  };\n  getNetworkConfig: {\n    key: string;\n    handler: () => Promise<any>;\n  };\n}\n\nconst useGlobalData = () => {\n  const { address } = useGetAccountInfo();\n  const { successfulTransactionsArray } =\n    transactionServices.useGetSuccessfulTransactions();\n\n  const dispatch = useDispatch();\n  const provider = new ProxyProvider(network.gatewayAddress);\n  const criticalFetches: globalFetchesType = {\n    getContractDetails: {\n      key: 'contractDetails',\n      handler: async (): Promise<ContractDetailsType | string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getContractConfig')\n          });\n\n          const data = await provider.queryContract(query);\n          const response = data.outputUntyped();\n\n          const ownerAddressIndex = 0;\n          const serviceFeeIndex = 1;\n          const delegationCapIndex = 2;\n          const automaticActivationIndex = 4;\n          const withDelegationCapIndex = 5;\n          const redelegationCapIndex = 7;\n\n          const ownerAddress = response[ownerAddressIndex];\n          const serviceFee = response[serviceFeeIndex];\n          const delegationCap = response[delegationCapIndex];\n          const activationStatus = response[automaticActivationIndex];\n          const withDelegationCap = response[withDelegationCapIndex];\n          const redelegationCap = response[redelegationCapIndex];\n\n          return {\n            withDelegationCap: String(withDelegationCap),\n            owner: new Address(address).hex() === ownerAddress.toString('hex'),\n            delegationCap: decodeBigNumber(delegationCap).toFixed(),\n            redelegationCap:\n              decodeString(redelegationCap) === 'true' ? 'ON' : 'OFF',\n            serviceFee:\n              (decodeUnsignedNumber(serviceFee) / 100).toString() + '%',\n            automaticActivation:\n              decodeString(activationStatus) === 'true' ? 'ON' : 'OFF'\n          };\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getNodesNumber: {\n      key: 'nodesNumber',\n      handler: async (): Promise<Array<Buffer> | string> => {\n        try {\n          const query = new Query({\n            address: new Address(auctionContract),\n            func: new ContractFunction('getBlsKeysStatus'),\n            args: [new AddressValue(new Address(network.delegationContract))]\n          });\n\n          const data = await provider.queryContract(query);\n          const response = data.outputUntyped();\n\n          return response;\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getTotalActiveStake: {\n      key: 'totalActiveStake',\n      handler: async (): Promise<string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getTotalActiveStake')\n          });\n\n          const data = await provider.queryContract(query);\n          const [totalNodes] = data.outputUntyped();\n\n          return decodeBigNumber(totalNodes).toFixed();\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getUserActiveStake: {\n      key: 'userActiveStake',\n      handler: async (): Promise<string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getUserActiveStake'),\n            args: [new AddressValue(new Address(address))]\n          });\n\n          const data = await provider.queryContract(query);\n          const [userStake] = data.outputUntyped();\n\n          return denominate({\n            input: decodeBigNumber(userStake).toFixed(),\n            decimals,\n            denomination,\n            addCommas: false\n          });\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getNetworkConfig: {\n      key: 'networkConfig',\n      handler: async (): Promise<any> => {\n        try {\n          return await getNetworkProxy().getNetworkConfig();\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  };\n\n  const fetchCriticalData = (): void => {\n    const fetchData = async () => {\n      const keys = Object.keys(criticalFetches);\n\n      keys.forEach((key) => {\n        dispatch({\n          type: key,\n          [criticalFetches[key].key]: {\n            status: 'loading',\n            data: null,\n            error: null\n          }\n        });\n      });\n\n      const data = await Promise.allSettled(\n        keys.map((key: string) => criticalFetches[key].handler())\n      );\n\n      data.forEach((item: any, index: any) => {\n        dispatch({\n          type: keys[index],\n          [criticalFetches[keys[index]].key]: {\n            status: item.status === 'rejected' ? 'error' : 'loaded',\n            error: item.reason || null,\n            data: item.value || null\n          }\n        });\n      });\n    };\n\n    fetchData();\n  };\n\n  useEffect(fetchCriticalData, [successfulTransactionsArray.length]);\n};\n\nexport default useGlobalData;\n"]},"metadata":{},"sourceType":"module"}