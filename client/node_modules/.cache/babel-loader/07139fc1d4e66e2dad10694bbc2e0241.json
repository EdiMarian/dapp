{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ediichim/Documents/workspace/temp/estar dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encryptor = void 0;\n\nvar crypto_1 = __importDefault(require(\"crypto\"));\n\nvar randomness_1 = require(\"./randomness\");\n\nvar derivationParams_1 = require(\"./derivationParams\");\n\nvar constants_1 = require(\"./constants\");\n\nvar encryptedData_1 = require(\"./encryptedData\");\n\nvar Encryptor = /*#__PURE__*/function () {\n  function Encryptor() {\n    _classCallCheck(this, Encryptor);\n  }\n\n  _createClass(Encryptor, null, [{\n    key: \"encrypt\",\n    value: function encrypt(data, password) {\n      var randomness = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new randomness_1.Randomness();\n      var kdParams = new derivationParams_1.ScryptKeyDerivationParams();\n      var derivedKey = kdParams.generateDerivedKey(Buffer.from(password), randomness.salt);\n      var derivedKeyFirstHalf = derivedKey.slice(0, 16);\n      var derivedKeySecondHalf = derivedKey.slice(16, 32);\n      var cipher = crypto_1.default.createCipheriv(constants_1.CipherAlgorithm, derivedKeyFirstHalf, randomness.iv);\n      var ciphertext = Buffer.concat([cipher.update(data), cipher.final()]);\n      var mac = crypto_1.default.createHmac(constants_1.DigestAlgorithm, derivedKeySecondHalf).update(ciphertext).digest();\n      return new encryptedData_1.EncryptedData({\n        version: constants_1.Version,\n        id: randomness.id,\n        ciphertext: ciphertext.toString('hex'),\n        iv: randomness.iv.toString('hex'),\n        cipher: constants_1.CipherAlgorithm,\n        kdf: constants_1.KeyDerivationFunction,\n        kdfparams: kdParams,\n        mac: mac.toString('hex'),\n        salt: randomness.salt.toString('hex')\n      });\n    }\n  }]);\n\n  return Encryptor;\n}();\n\nexports.Encryptor = Encryptor;","map":{"version":3,"sources":["../../src/crypto/encryptor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;IAEa,S;;;;;;;WACJ,iBAAe,IAAf,EAA6B,QAA7B,EAAwF;AAAA,UAAzC,UAAyC,uEAAhB,IAAI,YAAA,CAAA,UAAJ,EAAgB;AAC7F,UAAM,QAAQ,GAAG,IAAI,kBAAA,CAAA,yBAAJ,EAAjB;AACA,UAAM,UAAU,GAAG,QAAQ,CAAC,kBAAT,CAA4B,MAAM,CAAC,IAAP,CAAY,QAAZ,CAA5B,EAAmD,UAAU,CAAC,IAA9D,CAAnB;AACA,UAAM,mBAAmB,GAAG,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,EAApB,CAA5B;AACA,UAAM,oBAAoB,GAAG,UAAU,CAAC,KAAX,CAAiB,EAAjB,EAAqB,EAArB,CAA7B;AACA,UAAM,MAAM,GAAG,QAAA,CAAA,OAAA,CAAO,cAAP,CAAsB,WAAA,CAAA,eAAtB,EAAuC,mBAAvC,EAA4D,UAAU,CAAC,EAAvE,CAAf;AAEA,UAAM,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,MAAM,CAAC,MAAP,CAAc,IAAd,CAAD,EAAsB,MAAM,CAAC,KAAP,EAAtB,CAAd,CAAnB;AACA,UAAM,GAAG,GAAG,QAAA,CAAA,OAAA,CAAO,UAAP,CAAkB,WAAA,CAAA,eAAlB,EAAmC,oBAAnC,EAAyD,MAAzD,CAAgE,UAAhE,EAA4E,MAA5E,EAAZ;AAEA,aAAO,IAAI,eAAA,CAAA,aAAJ,CAAkB;AACvB,QAAA,OAAO,EAAE,WAAA,CAAA,OADc;AAEvB,QAAA,EAAE,EAAE,UAAU,CAAC,EAFQ;AAGvB,QAAA,UAAU,EAAE,UAAU,CAAC,QAAX,CAAoB,KAApB,CAHW;AAIvB,QAAA,EAAE,EAAE,UAAU,CAAC,EAAX,CAAc,QAAd,CAAuB,KAAvB,CAJmB;AAKvB,QAAA,MAAM,EAAE,WAAA,CAAA,eALe;AAMvB,QAAA,GAAG,EAAE,WAAA,CAAA,qBANkB;AAOvB,QAAA,SAAS,EAAE,QAPY;AAQvB,QAAA,GAAG,EAAE,GAAG,CAAC,QAAJ,CAAa,KAAb,CARkB;AASvB,QAAA,IAAI,EAAE,UAAU,CAAC,IAAX,CAAgB,QAAhB,CAAyB,KAAzB;AATiB,OAAlB,CAAP;AAWD;;;;;;AAtBH,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Encryptor = void 0;\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst randomness_1 = require(\"./randomness\");\nconst derivationParams_1 = require(\"./derivationParams\");\nconst constants_1 = require(\"./constants\");\nconst encryptedData_1 = require(\"./encryptedData\");\nclass Encryptor {\n    static encrypt(data, password, randomness = new randomness_1.Randomness()) {\n        const kdParams = new derivationParams_1.ScryptKeyDerivationParams();\n        const derivedKey = kdParams.generateDerivedKey(Buffer.from(password), randomness.salt);\n        const derivedKeyFirstHalf = derivedKey.slice(0, 16);\n        const derivedKeySecondHalf = derivedKey.slice(16, 32);\n        const cipher = crypto_1.default.createCipheriv(constants_1.CipherAlgorithm, derivedKeyFirstHalf, randomness.iv);\n        const ciphertext = Buffer.concat([cipher.update(data), cipher.final()]);\n        const mac = crypto_1.default.createHmac(constants_1.DigestAlgorithm, derivedKeySecondHalf).update(ciphertext).digest();\n        return new encryptedData_1.EncryptedData({\n            version: constants_1.Version,\n            id: randomness.id,\n            ciphertext: ciphertext.toString('hex'),\n            iv: randomness.iv.toString('hex'),\n            cipher: constants_1.CipherAlgorithm,\n            kdf: constants_1.KeyDerivationFunction,\n            kdfparams: kdParams,\n            mac: mac.toString('hex'),\n            salt: randomness.salt.toString('hex')\n        });\n    }\n}\nexports.Encryptor = Encryptor;\n//# sourceMappingURL=encryptor.js.map"]},"metadata":{},"sourceType":"script"}