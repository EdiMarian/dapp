{"ast":null,"code":"var _jsxFileName = \"/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/components/Button/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { transactionServices, refreshAccount } from '@elrondnetwork/dapp-core';\nimport styles from './styles.module.scss';\nimport TxTracking from '../Layout/TxTracking';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { getNfts } from '../../apiRequests';\nimport { Modal } from 'react-bootstrap';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = props => {\n  _s();\n\n  const {\n    address\n  } = useGetAccountInfo();\n  const {\n    successfulTransactionsArray\n  } = TxTracking();\n  const [, setTransactionSessionId] = useState('');\n  const [session, setSession] = useState('');\n  const [paid, setPaid] = useState(false);\n  const {\n    sendTransactions\n  } = transactionServices;\n  const [estar, setEstar] = useState(0);\n  const [egld, setEgld] = useState(0);\n  const [nft, setNft] = useState([]);\n  const [socket, setSocket] = useState();\n  const [show, setShow] = useState(false);\n  const [showSelect, setShowSelect] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [message, setMessage] = useState('');\n  const [raceIsAv, setRaceIsAv] = useState(false);\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await getNfts(address).then(res => res.data);\n      setNft(data);\n    };\n\n    fetch(); // Connect socket.io\n\n    const s = io('http://localhost:4000');\n    setSocket(s); // Fee\n\n    if (props.fee > 0) {\n      setEstar(props.fee * 100);\n      setEgld(props.fee / 200);\n    } // Disconnect socket.io\n\n\n    return () => {\n      s.disconnect();\n    };\n  }, []);\n\n  async function available() {\n    const handler = isAvailable => {\n      setRaceIsAv(isAvailable);\n    };\n\n    await socket.emit('get-available', props.id);\n    await socket.on('recive-available', handler);\n    setShow(true);\n  }\n\n  ;\n  useEffect(() => {\n    for (let i = 0; i < successfulTransactionsArray.length; i++) {\n      if (successfulTransactionsArray[i][0] == session) {\n        setPaid(true);\n      }\n    }\n  }, [successfulTransactionsArray]);\n  useEffect(() => {\n    if (paid) setShowSelect(true);\n  }, [paid]);\n\n  const encrypt = () => {\n    return (estar * 100).toString(16);\n  };\n\n  const sendEstarTransaction = async () => {\n    const estarTransaction = {\n      value: 0,\n      gasLimit: '500000',\n      data: estar >= 50 && estar <= 656 ? btoa('ESDTTransfer@45535441522d616661616630@' + encrypt()) : btoa('ESDTTransfer@45535441522d616661616630@0' + encrypt()),\n      receiver: 'erd1q07w9xm8avd7kwj3cgn3xrnhzg5da7e3vg7dv6gs3npyql0jpq9ss35a20'\n    };\n    await refreshAccount();\n    const {\n      sessionId\n    } = await sendTransactions({\n      transactions: estarTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: false\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n      setSession(sessionId);\n    }\n  };\n\n  const sendEgldTransaction = async () => {\n    const egldTransaction = {\n      value: egld ? egld * 1000000000000000000 : 0,\n      gasLimit: '70000',\n      data: 'QG9r',\n      receiver: 'erd1q07w9xm8avd7kwj3cgn3xrnhzg5da7e3vg7dv6gs3npyql0jpq9ss35a20'\n    };\n    await refreshAccount();\n    const {\n      sessionId\n    } = await sendTransactions({\n      transactions: egldTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: true\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n      setSession(sessionId);\n    }\n  };\n\n  const enter = async horse => {\n    const data = await {\n      address: address,\n      horse: horse,\n      feePaid: true,\n      raceId: props.id\n    };\n    socket.emit('enter-race', data);\n\n    const test = response => {\n      setSuccess(true);\n      setShowSelect(response.showb);\n      setMessage(response.message);\n    };\n\n    socket.on('recive-response', test);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.btn,\n      style: {\n        backgroundColor: props.color\n      },\n      onClick: available,\n      children: props.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      dialogClassName: \"custom-dialog\",\n      show: show,\n      onHide: () => setShow(!show),\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        className: \"bg-white\",\n        children: raceIsAv ? /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Pay with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Slots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"bg-white w-100\",\n        children: raceIsAv ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"d-block mx-auto btn btn-primary\",\n            onClick: () => {\n              setShow(false);\n              sendEstarTransaction();\n            },\n            children: [estar, \" eStar\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"d-block mx-auto btn btn-primary ml-2\",\n            onClick: () => {\n              sendEgldTransaction();\n              setShow(false);\n            },\n            children: [egld, \" eGld\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"No more slots are available in this race!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showSelect,\n      size: \"xl\",\n      onHide: () => setShowSelect(false),\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        className: \"bg-white\",\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"contained-modal-title-vcenter\",\n          children: \"Select Horse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"bg-white px-0\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.nftGrid,\n          style: {\n            gridTemplateColumns: 'repeat(2, 1fr)'\n          },\n          children: nft ? nft.map(({\n            identifier,\n            name,\n            url\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.nftContent,\n            onClick: () => enter(name),\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: url,\n              className: styles.img\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: props.color ? {\n                color: props.color\n              } : {\n                color: 'white'\n              },\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 25\n            }, this)]\n          }, identifier, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 21\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You don't have EquiStar Nfts.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: success,\n      size: \"xl\",\n      onHide: () => setSuccess(false),\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"bg-white\",\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"contained-modal-title-vcenter\",\n          children: \"Congratulations!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"bg-white px-0\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.nftGrid,\n          style: {\n            gridTemplateColumns: 'repeat(2, 1fr)'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: message == 'FULL' ? 'Ops' : message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Button, \"2ehGPk/QhpV9J/Ei1UEG1k1H1Ns=\", false, function () {\n  return [useGetAccountInfo];\n});\n\n_c = Button;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/ediichim/Documents/workspace/temp/estar dapp/client/src/components/Button/index.js"],"names":["React","useState","useEffect","transactionServices","refreshAccount","styles","TxTracking","useGetAccountInfo","getNfts","Modal","io","Button","props","address","successfulTransactionsArray","setTransactionSessionId","session","setSession","paid","setPaid","sendTransactions","estar","setEstar","egld","setEgld","nft","setNft","socket","setSocket","show","setShow","showSelect","setShowSelect","success","setSuccess","message","setMessage","raceIsAv","setRaceIsAv","fetch","data","then","res","s","fee","disconnect","available","handler","isAvailable","emit","id","on","i","length","encrypt","toString","sendEstarTransaction","estarTransaction","value","gasLimit","btoa","receiver","sessionId","transactions","transactionsDisplayInfo","processingMessage","errorMessage","successMessage","redirectAfterSign","sendEgldTransaction","egldTransaction","enter","horse","feePaid","raceId","test","response","showb","btn","backgroundColor","color","name","nftGrid","gridTemplateColumns","map","identifier","url","nftContent","img"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,mBAAT,EAA8BC,cAA9B,QAAoD,0BAApD;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,EAAT,QAAmB,kBAAnB;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAcN,iBAAiB,EAArC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAkCR,UAAU,EAAlD;AACA,QAAM,GAAGS,uBAAH,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACiB,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM;AAAEmB,IAAAA;AAAF,MAAuBjB,mBAA7B;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACsB,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACwB,GAAD,EAAMC,MAAN,IAAgBzB,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAAC0B,MAAD,EAASC,SAAT,IAAsB3B,QAAQ,EAApC;AACA,QAAM,CAAC4B,IAAD,EAAOC,OAAP,IAAkB7B,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAAC8B,UAAD,EAAaC,aAAb,IAA8B/B,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACgC,OAAD,EAAUC,UAAV,IAAwBjC,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACkC,OAAD,EAAUC,UAAV,IAAwBnC,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACoC,QAAD,EAAWC,WAAX,IAA0BrC,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqC,KAAK,GAAG,YAAY;AACxB,YAAMC,IAAI,GAAG,MAAMhC,OAAO,CAACK,OAAD,CAAP,CAAiB4B,IAAjB,CAAuBC,GAAD,IAASA,GAAG,CAACF,IAAnC,CAAnB;AACAd,MAAAA,MAAM,CAACc,IAAD,CAAN;AACD,KAHD;;AAIAD,IAAAA,KAAK,GALS,CAMd;;AACA,UAAMI,CAAC,GAAGjC,EAAE,CAAC,uBAAD,CAAZ;AACAkB,IAAAA,SAAS,CAACe,CAAD,CAAT,CARc,CAUd;;AACA,QAAI/B,KAAK,CAACgC,GAAN,GAAY,CAAhB,EAAmB;AACjBtB,MAAAA,QAAQ,CAACV,KAAK,CAACgC,GAAN,GAAY,GAAb,CAAR;AACApB,MAAAA,OAAO,CAACZ,KAAK,CAACgC,GAAN,GAAY,GAAb,CAAP;AACD,KAda,CAed;;;AACA,WAAO,MAAM;AACXD,MAAAA,CAAC,CAACE,UAAF;AACD,KAFD;AAGD,GAnBQ,EAmBN,EAnBM,CAAT;;AAqBA,iBAAeC,SAAf,GAA4B;AAC1B,UAAMC,OAAO,GAAIC,WAAD,IAAiB;AAC/BV,MAAAA,WAAW,CAACU,WAAD,CAAX;AACD,KAFD;;AAGA,UAAMrB,MAAM,CAACsB,IAAP,CAAY,eAAZ,EAA6BrC,KAAK,CAACsC,EAAnC,CAAN;AACA,UAAMvB,MAAM,CAACwB,EAAP,CAAU,kBAAV,EAA8BJ,OAA9B,CAAN;AACAjB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD;;AAAA;AAED5B,EAAAA,SAAS,CAAC,MAAM;AACd,SAAK,IAAIkD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtC,2BAA2B,CAACuC,MAAhD,EAAwDD,CAAC,EAAzD,EAA6D;AAC3D,UAAItC,2BAA2B,CAACsC,CAAD,CAA3B,CAA+B,CAA/B,KAAqCpC,OAAzC,EAAkD;AAChDG,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF;AACF,GANQ,EAMN,CAACL,2BAAD,CANM,CAAT;AAQAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGgB,IAAH,EAASc,aAAa,CAAC,IAAD,CAAb;AACV,GAFQ,EAEN,CAACd,IAAD,CAFM,CAAT;;AAIA,QAAMoC,OAAO,GAAG,MAAM;AACpB,WAAO,CAACjC,KAAK,GAAG,GAAT,EAAckC,QAAd,CAAuB,EAAvB,CAAP;AACD,GAFD;;AAIA,QAAMC,oBAAoB,GAAG,YAAY;AACvC,UAAMC,gBAAgB,GAAG;AACvBC,MAAAA,KAAK,EAAE,CADgB;AAEvBC,MAAAA,QAAQ,EAAE,QAFa;AAGvBnB,MAAAA,IAAI,EACFnB,KAAK,IAAI,EAAT,IAAeA,KAAK,IAAI,GAAxB,GACIuC,IAAI,CAAC,2CAA2CN,OAAO,EAAnD,CADR,GAEIM,IAAI,CAAC,4CAA4CN,OAAO,EAApD,CANa;AAOvBO,MAAAA,QAAQ,EAAE;AAPa,KAAzB;AASA,UAAMzD,cAAc,EAApB;AAEA,UAAM;AAAE0D,MAAAA;AAAF,QAAgB,MAAM1C,gBAAgB,CAAC;AAC3C2C,MAAAA,YAAY,EAAEN,gBAD6B;AAE3CO,MAAAA,uBAAuB,EAAE;AACvBC,QAAAA,iBAAiB,EAAE,wBADI;AAEvBC,QAAAA,YAAY,EAAE,6BAFS;AAGvBC,QAAAA,cAAc,EAAE;AAHO,OAFkB;AAO3CC,MAAAA,iBAAiB,EAAE;AAPwB,KAAD,CAA5C;;AASA,QAAIN,SAAS,IAAI,IAAjB,EAAuB;AACrB/C,MAAAA,uBAAuB,CAAC+C,SAAD,CAAvB;AACA7C,MAAAA,UAAU,CAAC6C,SAAD,CAAV;AACD;AACF,GAzBD;;AA2BA,QAAMO,mBAAmB,GAAG,YAAY;AACtC,UAAMC,eAAe,GAAG;AACtBZ,MAAAA,KAAK,EAAEnC,IAAI,GAAGA,IAAI,GAAG,mBAAV,GAAgC,CADrB;AAEtBoC,MAAAA,QAAQ,EAAE,OAFY;AAGtBnB,MAAAA,IAAI,EAAE,MAHgB;AAItBqB,MAAAA,QAAQ,EAAE;AAJY,KAAxB;AAMA,UAAMzD,cAAc,EAApB;AAEA,UAAM;AAAE0D,MAAAA;AAAF,QAAgB,MAAM1C,gBAAgB,CAAC;AAC3C2C,MAAAA,YAAY,EAAEO,eAD6B;AAE3CN,MAAAA,uBAAuB,EAAE;AACvBC,QAAAA,iBAAiB,EAAE,wBADI;AAEvBC,QAAAA,YAAY,EAAE,6BAFS;AAGvBC,QAAAA,cAAc,EAAE;AAHO,OAFkB;AAO3CC,MAAAA,iBAAiB,EAAE;AAPwB,KAAD,CAA5C;;AASA,QAAIN,SAAS,IAAI,IAAjB,EAAuB;AACrB/C,MAAAA,uBAAuB,CAAC+C,SAAD,CAAvB;AACA7C,MAAAA,UAAU,CAAC6C,SAAD,CAAV;AACD;AACF,GAtBD;;AAwBA,QAAMS,KAAK,GAAG,MAAOC,KAAP,IAAiB;AAC7B,UAAMhC,IAAI,GAAG,MAAM;AACf3B,MAAAA,OAAO,EAAEA,OADM;AAEf2D,MAAAA,KAAK,EAAEA,KAFQ;AAGfC,MAAAA,OAAO,EAAE,IAHM;AAIfC,MAAAA,MAAM,EAAE9D,KAAK,CAACsC;AAJC,KAAnB;AAMAvB,IAAAA,MAAM,CAACsB,IAAP,CAAY,YAAZ,EAA0BT,IAA1B;;AACA,UAAMmC,IAAI,GAAIC,QAAD,IAAc;AACvB1C,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,MAAAA,aAAa,CAAC4C,QAAQ,CAACC,KAAV,CAAb;AACAzC,MAAAA,UAAU,CAACwC,QAAQ,CAACzC,OAAV,CAAV;AACD,KAJH;;AAMER,IAAAA,MAAM,CAACwB,EAAP,CAAU,iBAAV,EAA6BwB,IAA7B;AACH,GAfD;;AAiBA,sBACE;AAAA,4BACE;AACE,MAAA,SAAS,EAAEtE,MAAM,CAACyE,GADpB;AAEE,MAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAEnE,KAAK,CAACoE;AAAzB,OAFT;AAGE,MAAA,OAAO,EAAElC,SAHX;AAAA,gBAKGlC,KAAK,CAACqE;AALT;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,KAAD;AACE,MAAA,eAAe,EAAC,eADlB;AAEE,MAAA,IAAI,EAAEpD,IAFR;AAGE,MAAA,MAAM,EAAE,MAAMC,OAAO,CAAC,CAACD,IAAF,CAHvB;AAIE,yBAAgB,+BAJlB;AAKE,MAAA,QAAQ,MALV;AAAA,8BAOE,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,SAAS,EAAC,UAAxB;AAAA,kBACGQ,QAAQ,gBACP,QAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADO,gBAGP,QAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cAPF,eAeE,QAAC,KAAD,CAAO,IAAP;AAAY,QAAA,SAAS,EAAC,gBAAtB;AAAA,kBACGA,QAAQ,gBACP;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,kCACE;AACE,YAAA,SAAS,EAAC,iCADZ;AAEE,YAAA,OAAO,EAAE,MAAM;AACbP,cAAAA,OAAO,CAAC,KAAD,CAAP;AACA0B,cAAAA,oBAAoB;AACrB,aALH;AAAA,uBAOGnC,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAUE;AACE,YAAA,SAAS,EAAC,sCADZ;AAEE,YAAA,OAAO,EAAE,MAAM;AACbgD,cAAAA,mBAAmB;AACnBvC,cAAAA,OAAO,CAAC,KAAD,CAAP;AACD,aALH;AAAA,uBAOGP,IAPH;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADO,gBAsBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvBJ;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAmDE,QAAC,KAAD;AACE,MAAA,IAAI,EAAEQ,UADR;AAEE,MAAA,IAAI,EAAC,IAFP;AAGE,MAAA,MAAM,EAAE,MAAMC,aAAa,CAAC,KAAD,CAH7B;AAIE,yBAAgB,+BAJlB;AAKE,MAAA,QAAQ,MALV;AAAA,8BAOE,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,SAAS,EAAC,UAAxB;AAAA,+BACE,QAAC,KAAD,CAAO,KAAP;AAAa,UAAA,EAAE,EAAC,+BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eAYE,QAAC,KAAD,CAAO,IAAP;AAAY,QAAA,SAAS,EAAC,eAAtB;AAAA,+BACE;AACE,UAAA,SAAS,EAAE3B,MAAM,CAAC6E,OADpB;AAEE,UAAA,KAAK,EAAE;AAAEC,YAAAA,mBAAmB,EAAE;AAAvB,WAFT;AAAA,oBAIG1D,GAAG,GACEA,GAAG,CAAC2D,GAAJ,CAAQ,CAAC;AAAEC,YAAAA,UAAF;AAAcJ,YAAAA,IAAd;AAAoBK,YAAAA;AAApB,WAAD,kBACN;AAEI,YAAA,SAAS,EAAEjF,MAAM,CAACkF,UAFtB;AAGI,YAAA,OAAO,EAAE,MAAMhB,KAAK,CAACU,IAAD,CAHxB;AAAA,oCAKI;AAAK,cAAA,GAAG,EAAEK,GAAV;AAAe,cAAA,SAAS,EAAEjF,MAAM,CAACmF;AAAjC;AAAA;AAAA;AAAA;AAAA,oBALJ,eAMI;AACA,cAAA,KAAK,EAAE5E,KAAK,CAACoE,KAAN,GAAc;AAAEA,gBAAAA,KAAK,EAAEpE,KAAK,CAACoE;AAAf,eAAd,GAAuC;AAAEA,gBAAAA,KAAK,EAAE;AAAT,eAD9C;AAAA,wBAGOC;AAHP;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA,aACSI,UADT;AAAA;AAAA;AAAA;AAAA,kBADF,CADF,gBAgBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YAnDF,eAyFE,QAAC,KAAD;AACE,MAAA,IAAI,EAAEpD,OADR;AAEE,MAAA,IAAI,EAAC,IAFP;AAGE,MAAA,MAAM,EAAE,MAAMC,UAAU,CAAC,KAAD,CAH1B;AAIE,yBAAgB,+BAJlB;AAKE,MAAA,QAAQ,MALV;AAAA,8BAOE,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,WAAW,MAAzB;AAA0B,QAAA,SAAS,EAAC,UAApC;AAAA,+BACE,QAAC,KAAD,CAAO,KAAP;AAAa,UAAA,EAAE,EAAC,+BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eAYE,QAAC,KAAD,CAAO,IAAP;AAAY,QAAA,SAAS,EAAC,eAAtB;AAAA,+BACE;AACE,UAAA,SAAS,EAAE7B,MAAM,CAAC6E,OADpB;AAEE,UAAA,KAAK,EAAE;AAAEC,YAAAA,mBAAmB,EAAE;AAAvB,WAFT;AAAA,iCAIE;AAAA,sBAAKhD,OAAO,IAAI,MAAX,GAAoB,KAApB,GAA4BA;AAAjC;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YAzFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiHD,CApPD;;GAAMxB,M;UACgBJ,iB;;;KADhBI,M;AAsPN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { transactionServices, refreshAccount } from '@elrondnetwork/dapp-core';\nimport styles from './styles.module.scss';\nimport TxTracking from '../Layout/TxTracking';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { getNfts } from '../../apiRequests';\nimport { Modal } from 'react-bootstrap';\nimport { io } from 'socket.io-client';\n\nconst Button = (props) => {\n  const { address } = useGetAccountInfo();\n  const { successfulTransactionsArray } = TxTracking();\n  const [, setTransactionSessionId] = useState('');\n  const [session, setSession] = useState('');\n  const [paid, setPaid] = useState(false);\n  const { sendTransactions } = transactionServices;\n  const [estar, setEstar] = useState(0);\n  const [egld, setEgld] = useState(0);\n  const [nft, setNft] = useState([]);\n  const [socket, setSocket] = useState();\n  const [show, setShow] = useState(false);\n  const [showSelect, setShowSelect] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [message, setMessage] = useState('');\n  const [raceIsAv, setRaceIsAv] = useState(false);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await getNfts(address).then((res) => res.data);\n      setNft(data);\n    };\n    fetch();\n    // Connect socket.io\n    const s = io('http://localhost:4000');\n    setSocket(s);\n\n    // Fee\n    if (props.fee > 0) {\n      setEstar(props.fee * 100);\n      setEgld(props.fee / 200);\n    }\n    // Disconnect socket.io\n    return () => {\n      s.disconnect();\n    };\n  }, []);\n\n  async function available () {\n    const handler = (isAvailable) => {\n      setRaceIsAv(isAvailable);\n    };\n    await socket.emit('get-available', props.id);\n    await socket.on('recive-available', handler);\n    setShow(true);\n  };\n\n  useEffect(() => {\n    for (let i = 0; i < successfulTransactionsArray.length; i++) {\n      if (successfulTransactionsArray[i][0] == session) {\n        setPaid(true);\n      }\n    }\n  }, [successfulTransactionsArray]);\n\n  useEffect(() => {\n    if(paid) setShowSelect(true);\n  }, [paid])\n\n  const encrypt = () => {\n    return (estar * 100).toString(16);\n  };\n\n  const sendEstarTransaction = async () => {\n    const estarTransaction = {\n      value: 0,\n      gasLimit: '500000',\n      data:\n        estar >= 50 && estar <= 656\n          ? btoa('ESDTTransfer@45535441522d616661616630@' + encrypt())\n          : btoa('ESDTTransfer@45535441522d616661616630@0' + encrypt()),\n      receiver: 'erd1q07w9xm8avd7kwj3cgn3xrnhzg5da7e3vg7dv6gs3npyql0jpq9ss35a20'\n    };\n    await refreshAccount();\n\n    const { sessionId } = await sendTransactions({\n      transactions: estarTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: false\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n      setSession(sessionId);\n    }\n  };\n\n  const sendEgldTransaction = async () => {\n    const egldTransaction = {\n      value: egld ? egld * 1000000000000000000 : 0,\n      gasLimit: '70000',\n      data: 'QG9r',\n      receiver: 'erd1q07w9xm8avd7kwj3cgn3xrnhzg5da7e3vg7dv6gs3npyql0jpq9ss35a20'\n    };\n    await refreshAccount();\n\n    const { sessionId } = await sendTransactions({\n      transactions: egldTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing transaction',\n        errorMessage: 'An error has occured during',\n        successMessage: 'Transaction successful'\n      },\n      redirectAfterSign: true\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n      setSession(sessionId);\n    }\n  };\n\n  const enter = async (horse) => {\n    const data = await {\n        address: address,\n        horse: horse,\n        feePaid: true,\n        raceId: props.id,\n      };\n    socket.emit('enter-race', data);\n    const test = (response) => {\n        setSuccess(true);\n        setShowSelect(response.showb);\n        setMessage(response.message);\n      }\n\n      socket.on('recive-response', test);\n  };\n\n  return (\n    <div>\n      <button\n        className={styles.btn}\n        style={{ backgroundColor: props.color }}\n        onClick={available}\n      >\n        {props.name}\n      </button>\n      {/* Enter race modal */}\n      <Modal\n        dialogClassName='custom-dialog'\n        show={show}\n        onHide={() => setShow(!show)}\n        aria-labelledby='contained-modal-title-vcenter'\n        centered\n      >\n        <Modal.Header className='bg-white'>\n          {raceIsAv ? (\n            <Modal.Title>Pay with</Modal.Title>\n          ) : (\n            <Modal.Title>Slots</Modal.Title>\n          )}\n        </Modal.Header>\n\n        <Modal.Body className='bg-white w-100'>\n          {raceIsAv ? (\n            <div className='d-flex'>\n              <button\n                className='d-block mx-auto btn btn-primary'\n                onClick={() => {\n                  setShow(false);\n                  sendEstarTransaction();\n                }}\n              >\n                {estar} eStar\n              </button>\n              <button\n                className='d-block mx-auto btn btn-primary ml-2'\n                onClick={() => {\n                  sendEgldTransaction();\n                  setShow(false);\n                }}\n              >\n                {egld} eGld\n              </button>\n            </div>\n          ) : (\n            <h5>No more slots are available in this race!</h5>\n          )}\n        </Modal.Body>\n      </Modal>\n      <Modal\n        show={showSelect}\n        size='xl'\n        onHide={() => setShowSelect(false)}\n        aria-labelledby='contained-modal-title-vcenter'\n        centered\n      >\n        <Modal.Header className='bg-white'>\n          <Modal.Title id='contained-modal-title-vcenter'>\n            Select Horse\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body className='bg-white px-0'>\n          <div\n            className={styles.nftGrid}\n            style={{ gridTemplateColumns: 'repeat(2, 1fr)' }}\n          >\n            {nft ? (\n                  nft.map(({ identifier, name, url }) => (\n                    <div\n                        key={identifier}\n                        className={styles.nftContent}\n                        onClick={() => enter(name)}\n                    >\n                        <img src={url} className={styles.img} />\n                        <p\n                        style={props.color ? { color: props.color } : { color: 'white' }}\n                        >\n                              {name}\n                        </p>\n                    </div>\n                  ))\n            ) : (\n        <p>You don&apos;t have EquiStar Nfts.</p>\n      )}\n    </div>\n        </Modal.Body>\n      </Modal>\n      <Modal\n        show={success}\n        size='xl'\n        onHide={() => setSuccess(false)}\n        aria-labelledby='contained-modal-title-vcenter'\n        centered\n      >\n        <Modal.Header closeButton className='bg-white'>\n          <Modal.Title id='contained-modal-title-vcenter'>\n            Congratulations!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body className='bg-white px-0'>\n          <div\n            className={styles.nftGrid}\n            style={{ gridTemplateColumns: 'repeat(2, 1fr)' }}\n          >\n            <h4>{message == 'FULL' ? 'Ops' : message}</h4>\n          </div>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}