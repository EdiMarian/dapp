{"version":3,"file":"index.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.mjs","../src/redux/commonActions.ts","../src/redux/selectors/helpers.ts","../src/redux/selectors/networkConfigSelectors.ts","../src/types/enums.ts","../src/redux/selectors/accountInfoSelectors.ts","../src/redux/selectors/loginInfoSelectors.ts","../src/utils/internal/getNewLoginExpiresTimestamp.ts","../src/utils/internal/optionalRedirect.ts","../src/utils/internal/getBridgeAddressFromNetwork.ts","../src/redux/slices/loginInfoSlice.ts","../src/redux/middlewares/loginSessionMiddleware.ts","../src/redux/slices/accountInfoSlice.ts","../src/utils/provider.ts","../src/redux/slices/extraActionsSlice.ts","../src/redux/slices/modalsSlice.ts","../src/redux/slices/networkConfigSlice.ts","../src/redux/slices/transactionsInfoSlice.ts","../src/types/transactions.ts","../src/utils/smartContracts.ts","../src/utils/transactions/transactionStateByStatus.ts","../src/utils/decoders/decodePart.ts","../src/utils/getAllStringOccurrences.ts","../src/utils/transactions/parseMultiEsdtTransferData.ts","../src/utils/transactions/getTokenFromData.ts","../src/utils/transactions/isTokenTransfer.ts","../src/utils/transactions/builtCallbackUrl.ts","../src/utils/transactions/parseTransactionAfterSigning.ts","../src/redux/slices/transactionsSlice.ts","../src/redux/reducers.ts","../src/redux/store.ts","../src/redux/selectors/extraActionsSelectors.ts","../src/models/newTransaction.ts","../src/redux/selectors/transactionsSelectors.ts","../src/redux/selectors/transactionsInfoSelectors.ts","../src/redux/selectors/modalsSelectors.ts","../src/utils/getIsLoggedIn.ts","../src/utils/logout.ts","../src/utils/buildUrlParams.ts","../src/utils/switchTrue.ts","../src/utils/account/addressIsValid.ts","../src/utils/network/getNetworkProxy.ts","../src/utils/network/getApiProvider.ts","../src/utils/network/getAccountProvider.ts","../src/utils/network/getAccountProviderType.ts","../src/utils/network/getChainID.ts","../src/utils/network/getNetworkConfig.ts","../src/utils/network/getEgldLabel.ts","../src/utils/network/getIsProviderEqualTo.ts","../src/utils/account/getAddress.tsx","../src/utils/account/getAccount.tsx","../src/utils/account/setNonce.tsx","../src/utils/account/getLatestNonce.tsx","../src/utils/account/getAccountBalance.tsx","../src/utils/account/refreshAccount.tsx","../src/utils/account/getShardOfAddress.ts","../src/utils/math.ts","../src/constants/errorsMessages.ts","../src/constants/network.ts","../src/constants/ledgerErrorCodes.ts","../src/constants/index.ts","../src/utils/operations/pipe.ts","../src/utils/operations/denominate.ts","../src/utils/operations/nominate.ts","../src/optionalPackages/classnames.ts","../src/utils/getGeneratedClasses.ts","../src/utils/wrapperClassName.ts","../src/optionalPackages/moment.ts","../src/utils/session.ts","../src/redux/DappProviderContext.ts","../src/services/login/useExtensionLogin.ts","../src/services/login/useWebWalletLogin.ts","../src/services/login/useLedgerLogin.ts","../src/hooks/useUpdateEffect.ts","../src/services/login/useWalletConnectLogin.ts","../src/services/transactions/clearTransactions.ts","../src/services/transactions/utils.ts","../src/services/transactions/signTransactions.tsx","../src/services/transactions/transformAndSignTransactions.ts","../src/services/transactions/sendTransactions.ts","../src/services/transactions/hooks/useTrackTransactionStatus.ts","../src/services/transactions/hooks/useGetPendingTransactions.ts","../src/services/transactions/hooks/useGetFailedTransactions.ts","../src/services/transactions/hooks/useGetSuccessfulTransactions.ts","../src/services/transactions/hooks/useParseMultiEsdtTransferData.ts","../src/services/transactions/hooks/useGetActiveTransactionsStatus.ts","../src/services/transactions/hooks/useGetCompletedTransactions.ts","../src/apiCalls/transactions/sendSignedTransactions.ts","../src/apiCalls/transactions/getTransactionsByHashes.ts","../src/components/ProviderInitializer.tsx","../src/contexts/OverrideDefaultBehaviourContext.tsx","../src/components/TransactionSender/index.ts","../src/components/TransactionsTracker/TransactionStatusTracker.tsx","../src/components/TransactionsTracker/index.tsx","../src/apiCalls/configuration/getServerConfigurationForEnvironment.ts","../src/hooks/useGetNetworkConfig.ts","../src/hooks/useGetNotification.ts","../src/hooks/transactions/useGetTransactionDisplayInfo.ts","../src/hooks/transactions/useParseSignedTransactions.tsx","../src/hooks/transactions/useSignTransactions.tsx","../src/hooks/transactions/useGetSignedTransactions.ts","../src/optionalPackages/swr.ts","../src/hooks/transactions/useGetTokenDetails.tsx","../src/hooks/transactions/useSignTransactionsWithLedger.tsx","../src/hooks/transactions/useGetSignTransactionsError.ts","../src/hooks/account/useGetAccountInfo.ts","../src/hooks/account/useGetLoginInfo.ts","../src/hooks/account/useGetAccountProvider.ts","../src/utils/account/getAccountShard.tsx","../src/wrappers/AppInitializer.tsx","../src/redux/DappProvider.tsx","../src/wrappers/AuthenticatedRoutesWrapper/index.tsx","../src/models/TransactionParameter.ts","../src/wrappers/withClassNameWrapper.tsx","../src/UI/Denominate/index.tsx","../src/optionalPackages/fortawesome-free-solid-svg-icons.ts","../src/optionalPackages/react-fontawesome.ts","../src/UI/ExplorerLink/index.tsx","../src/UI/extension/LoginButton/index.tsx","../src/optionalPackages/react-bootstrap.tsx","../src/UI/ModalContainer/index.tsx","../node_modules/classnames/index.js","../src/UI/PageState/index.tsx","../src/UI/ledger/LoginModal/AddressRow.tsx","../src/UI/ledger/LoginModal/AddressTable.tsx","../src/UI/ledger/LoginModal/ConfirmAddress.tsx","../src/UI/ledger/LoginModal/LedgerConnect.tsx","../src/UI/ledger/LoginModal/index.tsx","../src/UI/ledger/LoginButton/index.tsx","../src/UI/NotificationModal/index.tsx","../src/hooks/useGetLoginInfo.ts","../src/UI/SignTransactionsModals/SignWithExtensionModal/index.tsx","../src/UI/TokenDetails/TokenSymbol/index.tsx","../src/UI/TokenDetails/index.tsx","../src/UI/TransactionData/index.tsx","../src/UI/SignTransactionsModals/SignWithLedgerModal/SignStep.tsx","../src/UI/SignTransactionsModals/SignWithLedgerModal/index.tsx","../src/UI/SignTransactionsModals/SignWithWalletConnectModal/index.tsx","../src/UI/SignTransactionsModals/index.tsx","../src/storage/session.ts","../src/services/transactions/isCrossShardTransaction.ts","../src/UI/IconState/index.tsx","../src/UI/Progress/index.tsx","../src/UI/CopyButton/helpers/copyToClipboard.tsx","../src/UI/CopyButton/index.tsx","../src/UI/Trim/index.tsx","../src/UI/TxDetails/index.tsx","../src/UI/TransactionToast/index.tsx","../src/UI/TransactionsToastList/index.tsx","../src/optionalPackages/platform.ts","../src/optionalPackages/qrcode.ts","../src/UI/walletConnect/WalletConnectLoginContainer/index.tsx","../src/UI/walletConnect/WalletConnectLoginButton/index.tsx","../src/UI/webWallet/LoginButton/index.tsx","../src/UI/pages/UnlockPage/index.tsx"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { createAction } from '@reduxjs/toolkit';\nimport { LoginMethodsEnum } from 'types/enums';\n\nexport interface LoginActionPayloadType {\n  address: string;\n  loginMethod: LoginMethodsEnum;\n}\n\nexport const logoutAction = createAction('logout');\n\nexport const loginAction = createAction(\n  'login',\n  (payload: LoginActionPayloadType) => ({ payload })\n);\n","import isEqual from 'lodash/isEqual';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\n\nexport const createDeepEqualSelector = createSelectorCreator(\n  defaultMemoize,\n  isEqual\n);\n","import { ChainID } from '@elrondnetwork/erdjs';\nimport { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const networkConfigSelector = (state: RootState) => state.networkConfig;\n\nexport const proxySelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.proxy\n);\n\nexport const providerSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.provider\n);\n\nexport const chainIDSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => new ChainID(state.chainID)\n);\n\nexport const apiProviderSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.apiProvider\n);\n\nexport const walletConnectBridgeAddressSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.network.walletConnectBridgeAddress\n);\n\nexport const walletConnectDeepLinkSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.network.walletConnectDeepLink\n);\n\nexport const networkSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.network\n);\n\nexport const apiNetworkSelector = createDeepEqualSelector(\n  networkSelector,\n  (state) => state.apiAddress\n);\n\nexport const explorerAddressSelector = createDeepEqualSelector(\n  networkSelector,\n  (state) => state.explorerAddress\n);\n\nexport const egldLabelSelector = createDeepEqualSelector(\n  networkSelector,\n  (state) => state.egldLabel\n);\n","export enum TransactionServerStatusesEnum {\n  'pending' = 'pending',\n  'fail' = 'fail',\n  'invalid' = 'invalid',\n  'success' = 'success',\n  'executed' = 'executed',\n  'completed' = 'completed'\n}\n\nexport enum TransactionBatchStatusesEnum {\n  'signed' = 'signed',\n  'cancelled' = 'cancelled',\n  'success' = 'success',\n  'sent' = 'sent',\n  'fail' = 'fail',\n  'timedOut' = 'timedOut'\n}\n\nexport enum LoginMethodsEnum {\n  ledger = 'ledger',\n  walletconnect = 'walletconnect',\n  wallet = 'wallet',\n  extension = 'extension',\n  extra = 'extra',\n  none = ''\n}\n\nexport enum NotificationTypesEnum {\n  warning = 'warning',\n  error = 'error',\n  success = 'success'\n}\n\nexport enum TypesOfSmartContractCallsEnum {\n  MultiESDTNFTTransfer = 'MultiESDTNFTTransfer',\n  ESDTNFTTransfer = 'ESDTNFTTransfer'\n}\n\nexport enum EnvironmentsEnum {\n  testnet = 'testnet',\n  devnet = 'devnet',\n  mainnet = 'mainnet'\n}\n","import { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const accountInfoSelector = (state: RootState) => state.account;\n\nexport const addressSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.address\n);\n\nexport const accountSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.account\n);\n\nexport const accountBalanceSelector = createDeepEqualSelector(\n  accountSelector,\n  (account) => account.balance\n);\n\nexport const accountNonceSelector = createDeepEqualSelector(\n  accountSelector,\n  (state) => state?.nonce?.valueOf() || 0\n);\n\nexport const shardSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.shard\n);\n\nexport const ledgerAccountSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.ledgerAccount\n);\n\nexport const walletConnectAccountSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.walletConnectAccount\n);\n\nexport const isAccountLoadingSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.isAccountLoading\n);\n\nexport const isAccountLoadingErrorSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.accountLoadingError\n);\n","import { LoginMethodsEnum } from 'types/enums';\nimport { RootState } from '../store';\nimport { addressSelector } from './accountInfoSelectors';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const loginInfoSelector = (state: RootState) => state.loginInfo;\n\nexport const loginMethodSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.loginMethod\n);\n\nexport const isLoggedInSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  addressSelector,\n  (state, address) =>\n    state.loginMethod != LoginMethodsEnum.none && Boolean(address)\n);\n\nexport const walletConnectLoginSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.walletConnectLogin\n);\n\nexport const ledgerLoginSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.ledgerLogin\n);\n\nexport const walletLoginSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.walletLogin\n);\n\nexport const loginExpiresAtSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.loginExpiresAt\n);\n","export function getNewLoginExpiresTimestamp() {\n  return new Date().setHours(new Date().getHours() + 24);\n}\n\nexport default getNewLoginExpiresTimestamp;\n","export function optionalRedirect(\n  callbackUrl?: string,\n  shouldRedirect?: boolean\n) {\n  if (shouldRedirect && callbackUrl != null) {\n    setTimeout(() => {\n      if (!window.location.pathname.includes(callbackUrl)) {\n        window.location.href = callbackUrl;\n      }\n    }, 200);\n  }\n}\n","export function getBridgeAddressFromNetwork(\n  walletConnectBridgeAddresses: string[]\n) {\n  return walletConnectBridgeAddresses[\n    Math.floor(Math.random() * walletConnectBridgeAddresses.length)\n  ];\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { getNewLoginExpiresTimestamp } from 'utils/internal';\nimport {\n  loginAction,\n  logoutAction,\n  LoginActionPayloadType\n} from '../commonActions';\n\nexport interface WalletConnectLoginType {\n  loginType: string;\n  callbackRoute: string;\n  logoutRoute: string;\n}\n\nexport interface LedgerLoginType {\n  index: number;\n  loginType: string;\n}\n\nexport interface LoginInfoType {\n  data: any;\n  expires: number;\n}\n\nexport interface TokenLoginType {\n  loginToken: string;\n  signature?: string;\n}\n\nexport interface LoginInfoStateType {\n  loginMethod: LoginMethodsEnum;\n  walletConnectLogin: WalletConnectLoginType | null;\n  ledgerLogin: LedgerLoginType | null;\n  tokenLogin: TokenLoginType | null;\n  walletLogin: LoginInfoType | null;\n  extensionLogin: LoginInfoType | null;\n  loginExpiresAt: number;\n}\n\nconst initialState: LoginInfoStateType = {\n  loginMethod: LoginMethodsEnum.none,\n  walletConnectLogin: null,\n  ledgerLogin: null,\n  tokenLogin: null,\n  walletLogin: null,\n  extensionLogin: null,\n  loginExpiresAt: getNewLoginExpiresTimestamp()\n};\n\nexport const loginInfoSlice = createSlice({\n  name: 'loginInfoSlice',\n  initialState: initialState,\n  reducers: {\n    setLoginMethod: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LoginMethodsEnum>\n    ) => {\n      state.loginMethod = action.payload;\n    },\n    setTokenLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<TokenLoginType>\n    ) => {\n      state.tokenLogin = action.payload;\n    },\n    setTokenLoginSignature: (\n      state: LoginInfoStateType,\n      action: PayloadAction<string>\n    ) => {\n      if (state?.tokenLogin != null) {\n        state.tokenLogin.signature = action.payload;\n      }\n    },\n    setWalletLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LoginInfoType | null>\n    ) => {\n      state.walletLogin = action.payload;\n    },\n    setWalletConnectLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<WalletConnectLoginType | null>\n    ) => {\n      state.walletConnectLogin = action.payload;\n    },\n    setLedgerLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LedgerLoginType | null>\n    ) => {\n      state.ledgerLogin = action.payload;\n    },\n    setLoginExpiresAt: (\n      state: LoginInfoStateType,\n      action: PayloadAction<number>\n    ) => {\n      state.loginExpiresAt = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n    builder.addCase(\n      loginAction,\n      (\n        state: LoginInfoStateType,\n        action: PayloadAction<LoginActionPayloadType>\n      ) => {\n        state.loginMethod = action.payload.loginMethod;\n        state.loginExpiresAt = getNewLoginExpiresTimestamp();\n      }\n    );\n  }\n});\n\nexport const {\n  setLoginMethod,\n  setWalletConnectLogin,\n  setLedgerLogin,\n  setTokenLogin,\n  setTokenLoginSignature,\n  setWalletLogin,\n  setLoginExpiresAt\n} = loginInfoSlice.actions;\n\nexport default loginInfoSlice.reducer;\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport throttle from 'lodash/throttle';\nimport { logoutAction } from 'redux/commonActions';\nimport {\n  isLoggedInSelector,\n  loginExpiresAtSelector\n} from 'redux/selectors/loginInfoSelectors';\nimport { providerSelector } from 'redux/selectors/networkConfigSelectors';\nimport { setLoginExpiresAt } from 'redux/slices/loginInfoSlice';\nimport { StoreType } from 'redux/store';\nimport { getNewLoginExpiresTimestamp } from 'utils/internal';\n\nconst whitelistedActions = ['loginInfoSlice/setLoginExpiresAt', 'logout'];\n\nconst throttledSetNewToken = throttle((store: StoreType) => {\n  store.dispatch(setLoginExpiresAt(getNewLoginExpiresTimestamp()));\n}, 5000);\n\nexport const loginSessionMiddleware: any =\n  (store: StoreType) =>\n  (next: (action: PayloadAction) => void) =>\n  (action: PayloadAction) => {\n    if (whitelistedActions.includes(action.type)) {\n      return next(action);\n    }\n    const appState = store.getState();\n    const loginTimestamp = loginExpiresAtSelector(appState);\n    const isLoggedIn = isLoggedInSelector(appState);\n    if (!isLoggedIn) {\n      return next(action);\n    }\n    if (loginTimestamp == null) {\n      return store.dispatch(setLoginExpiresAt(getNewLoginExpiresTimestamp()));\n    }\n    const now = Date.now();\n    const isExpired = loginTimestamp - now < 0;\n    if (isExpired) {\n      return setTimeout(async () => {\n        const provider = providerSelector(store.getState());\n        console.log('session expired');\n        store.dispatch(logoutAction());\n        try {\n          await provider.logout({ callbackUrl: '/' });\n        } catch (err) {\n          console.error('error logging out', err);\n        }\n      }, 1000);\n    } else {\n      throttledSetNewToken(store);\n    }\n    return next(action);\n  };\n\nexport default loginSessionMiddleware;\n","import { Address } from '@elrondnetwork/erdjs';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { REHYDRATE } from 'redux-persist';\n\nimport {\n  loginAction,\n  logoutAction,\n  LoginActionPayloadType\n} from '../commonActions';\n\nexport interface AccountType {\n  address: string;\n  balance: string;\n  nonce: number;\n  code?: string;\n  username?: string;\n}\nexport interface LedgerAccountType {\n  index: number;\n  address: string;\n}\n\nexport interface AccountInfoSliceType {\n  address: string;\n  shard?: number;\n  account: AccountType;\n  publicKey: string;\n  ledgerAccount: LedgerAccountType | null;\n  walletConnectAccount: string | null;\n  isAccountLoading: boolean;\n  accountLoadingError: string | null;\n}\n\nexport const emptyAccount: AccountType = {\n  balance: '...',\n  address: '',\n  nonce: 0\n};\n\nconst initialState: AccountInfoSliceType = {\n  address: '',\n  account: emptyAccount,\n  ledgerAccount: null,\n  publicKey: '',\n  walletConnectAccount: null,\n  isAccountLoading: true,\n  accountLoadingError: null\n};\n\nexport const accountInfoSlice = createSlice({\n  name: 'accountInfoSlice',\n  initialState: initialState,\n  reducers: {\n    setAddress: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<string>\n    ) => {\n      const address = action.payload;\n      state.address = address;\n      state.publicKey = new Address(address).hex();\n    },\n    setAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<AccountType>\n    ) => {\n      state.account = action.payload;\n      state.isAccountLoading = false;\n      state.accountLoadingError = null;\n    },\n    setAccountNonce: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<number>\n    ) => {\n      state.account.nonce = action.payload;\n    },\n    setAccountShard: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<number>\n    ) => {\n      state.shard = action.payload;\n    },\n    setLedgerAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<LedgerAccountType | null>\n    ) => {\n      state.ledgerAccount = action.payload;\n    },\n    setWalletConnectAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<string | null>\n    ) => {\n      state.walletConnectAccount = action.payload;\n    },\n    setIsAccountLoading: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<boolean>\n    ) => {\n      state.isAccountLoading = action.payload;\n      state.accountLoadingError = null;\n    },\n    setAccountLoadingError: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<string | null>\n    ) => {\n      state.accountLoadingError = action.payload;\n      state.isAccountLoading = false;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n    builder.addCase(\n      loginAction,\n      (\n        state: AccountInfoSliceType,\n        action: PayloadAction<LoginActionPayloadType>\n      ) => {\n        const { address } = action.payload;\n        state.address = address;\n        state.publicKey = new Address(address).hex();\n      }\n    );\n    builder.addCase(REHYDRATE, (state, action: any) => {\n      if (!action.payload?.account) {\n        return;\n      }\n\n      const { account: accountInfo } = action.payload;\n      const { address, shard, account, publicKey } = accountInfo;\n      state.address = address;\n      state.shard = shard;\n      state.account = account;\n      state.publicKey = publicKey;\n    });\n  }\n});\n\nexport const {\n  setAccount,\n  setAddress,\n  setAccountNonce,\n  setAccountShard,\n  setLedgerAccount,\n  setWalletConnectAccount,\n  setIsAccountLoading,\n  setAccountLoadingError\n} = accountInfoSlice.actions;\n\nexport default accountInfoSlice.reducer;\n","import {\n  ExtensionProvider,\n  HWProvider,\n  IDappProvider,\n  SignableMessage,\n  Transaction,\n  WalletConnectProvider,\n  WalletProvider\n} from '@elrondnetwork/erdjs';\nimport { LoginMethodsEnum } from 'types/enums';\n\nexport const DAPP_INIT_ROUTE = '/dapp/init';\n\nexport const getProviderType = (\n  provider: IDappProvider | undefined\n): LoginMethodsEnum => {\n  switch (provider?.constructor) {\n    case WalletProvider:\n      return LoginMethodsEnum.wallet;\n    case WalletConnectProvider:\n      return LoginMethodsEnum.walletconnect;\n    case HWProvider:\n      return LoginMethodsEnum.ledger;\n    case ExtensionProvider:\n      return LoginMethodsEnum.extension;\n    case EmptyProvider:\n      return LoginMethodsEnum.none;\n    default:\n      return LoginMethodsEnum.extra;\n  }\n};\n\nexport const newWalletProvider = (walletAddress: string) =>\n  new WalletProvider(`${walletAddress}${DAPP_INIT_ROUTE}`);\n\nconst notInitializedError = (caller: string) => {\n  return `Unable to perform ${caller}, Provider not initialized`;\n};\n\nexport class EmptyProvider implements IDappProvider {\n  async init() {\n    return false;\n  }\n  login(options?: { callbackUrl?: string; token?: string }): Promise<string> {\n    throw new Error(notInitializedError(`login with options: ${options}`));\n  }\n  async logout(options?: { callbackUrl?: string }): Promise<boolean> {\n    throw new Error(notInitializedError(`logout with options: ${options}`));\n  }\n  async getAddress(): Promise<string> {\n    throw new Error(notInitializedError('getAddress'));\n  }\n  isInitialized(): boolean {\n    return false;\n  }\n  async isConnected(): Promise<boolean> {\n    return false;\n  }\n  async sendTransaction(\n    transaction: Transaction,\n    options?: { callbackUrl?: string }\n  ): Promise<Transaction> {\n    throw new Error(\n      notInitializedError(\n        `sendTransaction with transactions: ${transaction} options: ${options}`\n      )\n    );\n  }\n  async signTransaction(\n    transaction: Transaction,\n    options?: { callbackUrl?: string }\n  ): Promise<Transaction> {\n    throw new Error(\n      notInitializedError(\n        `signTransaction with transactions: ${transaction} options: ${options}`\n      )\n    );\n  }\n  async signTransactions(\n    transactions: Transaction[],\n    options?: { callbackUrl?: string }\n  ): Promise<Transaction[]> {\n    throw new Error(\n      notInitializedError(\n        `signTransactions with transactions: ${transactions} options: ${options}`\n      )\n    );\n  }\n  async signMessage(message: SignableMessage): Promise<SignableMessage> {\n    throw new Error(notInitializedError(`signTransactions with ${message}`));\n  }\n}\n\nexport const emptyProvider = new EmptyProvider();\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { ExtraActionsType } from 'types';\nimport { emptyProvider } from 'utils/provider';\n\ntype ExtraActionsSliceState = ExtraActionsType;\n\nconst initialState: ExtraActionsSliceState = {\n  log: () => null,\n  getProvider: () => emptyProvider,\n  init: () => null\n};\n\nexport const extraActionsSlice = createSlice({\n  name: 'extraActionsSlice',\n  initialState,\n  reducers: {\n    initializeExtraActions: (\n      state: ExtraActionsSliceState,\n      action: PayloadAction<ExtraActionsSliceState>\n    ) => {\n      return { ...state, ...action.payload };\n    }\n  }\n});\n\nexport const { initializeExtraActions } = extraActionsSlice.actions;\n\nexport default extraActionsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { NotificationTypesEnum } from 'types';\nimport { logoutAction } from '../commonActions';\n\nexport interface TxSubmittedModal {\n  sessionId: string;\n  submittedMessage: string;\n}\n\nexport interface NotificationModal {\n  type: NotificationTypesEnum;\n  iconClassName: string;\n  title: string;\n  description: string;\n}\n\nexport interface ModalsSliceState {\n  txSubmittedModal?: TxSubmittedModal;\n  notificationModal?: NotificationModal;\n}\n\nconst initialState: ModalsSliceState = {};\n\nexport const modalsSlice = createSlice({\n  name: 'modalsSlice',\n  initialState,\n  reducers: {\n    setTxSubmittedModal: (\n      state: ModalsSliceState,\n      action: PayloadAction<TxSubmittedModal>\n    ) => {\n      state.txSubmittedModal = action.payload;\n    },\n    setNotificationModal: (\n      state: ModalsSliceState,\n      action: PayloadAction<NotificationModal>\n    ) => {\n      state.notificationModal = action.payload;\n    },\n    clearTxSubmittedModal: (state: ModalsSliceState) => {\n      state.txSubmittedModal = undefined;\n    },\n    clearNotificationModal: (state: ModalsSliceState) => {\n      state.notificationModal = undefined;\n    }\n  },\n\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n  }\n});\n\nexport const {\n  setTxSubmittedModal,\n  setNotificationModal,\n  clearTxSubmittedModal,\n  clearNotificationModal\n} = modalsSlice.actions;\n\nexport default modalsSlice.reducer;\n","import {\n  IDappProvider,\n  IProvider,\n  IApiProvider,\n  ProxyProvider,\n  ApiProvider\n} from '@elrondnetwork/erdjs';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport omit from 'lodash/omit';\nimport {\n  AccountInfoSliceNetworkType,\n  BaseNetworkType,\n  NetworkType\n} from 'types';\nimport { getBridgeAddressFromNetwork } from 'utils/internal';\nimport { emptyProvider } from 'utils/provider';\nimport { logoutAction } from '../commonActions';\n\nexport const defaultNetwork: AccountInfoSliceNetworkType = {\n  id: 'not-configured',\n  name: 'NOT CONFIGURED',\n  egldLabel: '',\n  egldDenomination: '18',\n  decimals: '4',\n  gasPerDataByte: '1500',\n  walletConnectDeepLink: '',\n  walletConnectBridgeAddress: '',\n  walletAddress: '',\n\n  apiAddress: '',\n  explorerAddress: '',\n  apiTimeout: '4000'\n};\n\nexport interface NetworkConfigStateType {\n  provider: IDappProvider;\n  proxy: IProvider;\n  apiProvider: IApiProvider;\n  network: AccountInfoSliceNetworkType;\n  chainID: string;\n}\n\nconst initialState: NetworkConfigStateType = {\n  network: defaultNetwork,\n  proxy: new ProxyProvider(defaultNetwork.apiAddress, {\n    timeout: Number(defaultNetwork.apiTimeout)\n  }),\n  apiProvider: new ApiProvider(defaultNetwork.apiAddress, {\n    timeout: Number(defaultNetwork.apiTimeout)\n  }),\n  provider: emptyProvider,\n  chainID: '-1'\n};\n\nexport const networkConfigSlice = createSlice({\n  name: 'appConfig',\n  initialState: initialState,\n  reducers: {\n    initializeNetworkConfig: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<NetworkType>\n    ) => {\n      const walletConnectBridgeAddress = getBridgeAddressFromNetwork(\n        action.payload.walletConnectBridgeAddresses\n      );\n      const network: BaseNetworkType = omit(\n        action.payload,\n        'walletConnectBridgeAddresses'\n      );\n      const { apiAddress } = network;\n\n      if (apiAddress) {\n        state.proxy = new ProxyProvider(apiAddress, {\n          timeout: Number(network.apiTimeout || defaultNetwork.apiTimeout)\n        });\n        state.apiProvider = new ApiProvider(apiAddress, {\n          timeout: Number(network.apiTimeout || defaultNetwork.apiTimeout)\n        });\n      }\n      state.network = {\n        ...state.network,\n        ...network,\n        walletConnectBridgeAddress\n      };\n    },\n    setChainID: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<string>\n    ) => {\n      state.chainID = action.payload;\n    },\n    setProvider: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<IDappProvider>\n    ) => {\n      state.provider = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, (state) => {\n      state.provider = initialState.provider;\n    });\n  }\n});\n\nexport const { initializeNetworkConfig, setChainID, setProvider } =\n  networkConfigSlice.actions;\n\nexport default networkConfigSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { TransactionsDisplayInfoType } from 'types/transactions';\nimport { logoutAction } from '../commonActions';\n\nexport interface StateType {\n  [sessionId: string]: TransactionsDisplayInfoType;\n}\n\nexport interface SetTransactionsInfoPayloadType {\n  sessionId: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n}\n\nexport const defaultTransactionErrorMessage = 'Transaction failed';\nexport const defaultTransactionSuccessMessage = 'Transaction successful';\nexport const defaultTransactionProcessingMessage = 'Processing transaction';\nexport const defaultTransactionSubmittedMessage = 'Transaction submitted';\n\nconst initialState: StateType = {};\n\nexport const signTransactionsSlice = createSlice({\n  name: 'transactionsInfo',\n  initialState,\n  reducers: {\n    setTransactionsDisplayInfo(\n      state: StateType,\n      action: PayloadAction<SetTransactionsInfoPayloadType>\n    ) {\n      const { sessionId, transactionsDisplayInfo } = action.payload;\n      if (sessionId != null) {\n        state[sessionId] = {\n          errorMessage:\n            transactionsDisplayInfo?.errorMessage ||\n            defaultTransactionErrorMessage,\n          successMessage:\n            transactionsDisplayInfo?.successMessage ||\n            defaultTransactionSuccessMessage,\n          processingMessage:\n            transactionsDisplayInfo?.processingMessage ||\n            defaultTransactionProcessingMessage,\n          submittedMessage:\n            transactionsDisplayInfo?.submittedMessage ||\n            defaultTransactionSubmittedMessage,\n          transactionDuration: transactionsDisplayInfo?.transactionDuration\n        };\n      }\n    },\n    clearTransactionsInfoForSessionId(\n      state: StateType,\n      action: PayloadAction<string | undefined>\n    ) {\n      if (action.payload != null) {\n        delete state[action.payload];\n      }\n    },\n    clearTransactionsInfo: () => initialState\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n  }\n});\n\nexport const {\n  clearTransactionsInfo,\n  setTransactionsDisplayInfo,\n  clearTransactionsInfoForSessionId\n} = signTransactionsSlice.actions;\n\nexport default signTransactionsSlice.reducer;\n","import { Address, Transaction } from '@elrondnetwork/erdjs';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from './enums';\n\nexport interface TransactionsToSignType {\n  transactions: RawTransactionType[];\n  callbackRoute?: string;\n  sessionId: string;\n  customTransactionInformation: CustomTransactionInformation;\n}\n\nexport interface SignedTransactionsBodyType {\n  transactions?: SignedTransactionType[];\n  status?: TransactionBatchStatusesEnum;\n  errorMessage?: string;\n  customTransactionInformation?: CustomTransactionInformation;\n}\n\nexport interface SignedTransactionsType {\n  [sessionId: string]: SignedTransactionsBodyType;\n}\n\nexport interface TransactionParameter {\n  sender: Address;\n  receiver: Address;\n  functionName: string;\n  inputParameters: string[];\n  outputParameters: string[];\n}\n\nexport interface RawTransactionType {\n  signature?: string;\n  value: string;\n  receiver: string;\n  gasPrice: number;\n  gasLimit: number;\n  sender: string;\n  nonce: number;\n  data: string;\n  chainID: string;\n  version?: number;\n  options?: number;\n}\n\nexport interface SignedTransactionType extends RawTransactionType {\n  hash: string;\n  status: TransactionServerStatusesEnum;\n  errorMessage?: string;\n}\n\nexport interface TxDataTokenType {\n  tokenId: string;\n  amount: string;\n  receiver: string;\n  type?: MultiEsdtTxType['type'] | '';\n  nonce?: string;\n  multiTxData?: string;\n}\n\nexport type TxsDataTokensType = Record<string, TxDataTokenType> | undefined;\n\ninterface MultiEsdtType {\n  type:\n    | TransactionTypesEnum.esdtTransaction\n    | TransactionTypesEnum.nftTransaction;\n  receiver: string;\n  token?: string;\n  nonce?: string;\n  amount?: string;\n  data: string;\n}\n\ninterface MultiEsdtScCallType {\n  type: TransactionTypesEnum.scCall;\n  receiver: string;\n  token?: string;\n  nonce?: string;\n  amount?: string;\n  data: string;\n}\n\nexport type MultiEsdtTxType = MultiEsdtType | MultiEsdtScCallType;\n\nexport type MultiSignTxType = {\n  multiTxData?: string;\n  transactionIndex: number;\n  transaction: Transaction;\n};\n\nexport interface TokenOptionType {\n  name: string;\n  identifier: string;\n  balance: string;\n  decimals: number;\n  collection?: string;\n  avatar?: string;\n}\n\nexport interface SimpleTransactionType {\n  value: string;\n  receiver: string;\n  data?: string;\n  gasPrice?: number;\n  gasLimit?: number;\n  chainID?: string;\n  version?: number;\n  options?: number;\n}\n\nexport interface TransactionsDisplayInfoType {\n  errorMessage?: string;\n  successMessage?: string;\n  processingMessage?: string;\n  submittedMessage?: string;\n  transactionDuration?: number;\n}\n\nexport interface SendSimpleTransactionPropsType {\n  transactions: SimpleTransactionType[];\n  minGasLimit?: number;\n}\n\nexport interface SendTransactionsPropsType {\n  transactions:\n    | Transaction\n    | SimpleTransactionType\n    | (Transaction | SimpleTransactionType)[];\n  redirectAfterSign?: boolean;\n  signWithoutSending: boolean;\n  callbackRoute?: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n  minGasLimit?: number;\n  completedThreshold?: number;\n  sessionInformation?: any;\n}\n\nexport interface SignTransactionsPropsType {\n  transactions: Transaction[] | Transaction;\n  minGasLimit?: number;\n  callbackRoute?: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n  customTransactionInformation: CustomTransactionInformation;\n}\n\nexport enum TransactionTypesEnum {\n  MultiESDTNFTTransfer = 'MultiESDTNFTTransfer',\n  ESDTTransfer = 'ESDTTransfer',\n  ESDTNFTTransfer = 'ESDTNFTTransfer',\n  esdtTransaction = 'esdtTransaction',\n  nftTransaction = 'nftTransaction',\n  scCall = 'scCall'\n}\n\nexport interface ActiveLedgerTransactionType {\n  transaction: Transaction;\n  transactionTokenInfo: TxDataTokenType;\n  isTokenTransaction: boolean;\n  dataField: string;\n}\n\nexport interface SmartContractResult {\n  hash: string;\n  timestamp: number;\n  nonce: number;\n  gasLimit: number;\n  gasPrice: number;\n  value: string;\n  sender: string;\n  receiver: string;\n  data: string;\n  prevTxHash: string;\n  originalTxHash: string;\n  callType: string;\n  miniBlockHash: string;\n  returnMessage: string;\n}\n\nexport interface SignModalPropsType {\n  handleClose: () => void;\n  error: string | null;\n  callbackRoute?: string;\n  transactions: Transaction[];\n  className?: string;\n}\n\nexport interface CustomTransactionInformation {\n  redirectAfterSign: boolean;\n  sessionInformation: any;\n  signWithoutSending: boolean;\n  completedThreshold: number;\n}\n","import { Address, TransactionPayload } from '@elrondnetwork/erdjs';\nimport { SmartContractResult, TypesOfSmartContractCallsEnum } from 'types';\n\nconst okInHex = '6f6b';\n\nexport const ESDTTransferTypes = [\n  'ESDTNFTTransfer',\n  'ESDTNFTBurn',\n  'ESDTNFTAddQuantity',\n  'ESDTNFTCreate',\n  'MultiESDTNFTTransfer',\n  'ESDTTransfer',\n  'ESDTBurn',\n  'ESDTLocalMint',\n  'ESDTLocalBurn',\n  'ESDTWipe',\n  'ESDTFreeze'\n];\n\nexport function areScCallsSuccessful(\n  scResults?: SmartContractResult[],\n  completedThreshold = 1\n) {\n  if (!scResults) {\n    return true;\n  }\n  let numberOfOkParts = 0;\n  scResults.forEach((result) => {\n    if (result?.data) {\n      const decoded = Buffer.from(result.data, 'base64').toString().split('@');\n      const hasOkPart = Boolean(decoded.find((part) => part === okInHex));\n      if (hasOkPart) {\n        numberOfOkParts++;\n      }\n    }\n  });\n  return numberOfOkParts >= completedThreshold;\n}\n\nexport function isContract(\n  receiver: string,\n  sender?: string,\n  data = ''\n): boolean {\n  try {\n    const isContract = new Address(receiver).isContractAddress();\n    if (isContract) {\n      return true;\n    }\n    const extractedAddress = getAddressFromDataField({ receiver, data });\n    if (!extractedAddress) {\n      return false;\n    }\n    const isExtractedAddressContractCall = new Address(\n      extractedAddress\n    ).isContractAddress();\n    return (\n      isExtractedAddressContractCall ||\n      isSelfESDTContract(receiver, sender, data)\n    );\n  } catch (err) {\n    console.log('err', err);\n    return false;\n  }\n}\n\nconst isHexValidCharacters = (str: string) => {\n  return str.toLowerCase().match(/[0-9a-f]/g);\n};\nconst isHexValidLength = (str: string) => {\n  return str.length % 2 === 0;\n};\n\nexport function isSelfESDTContract(\n  receiver: string,\n  sender?: string,\n  data?: string\n) {\n  const parts = data?.split('@');\n  if (parts == null) {\n    return false;\n  }\n  const [type, ...restParts] = parts;\n  const isSelfTransaction =\n    sender != null && receiver != null && receiver === sender;\n  const isCorrectESDTType = ESDTTransferTypes.includes(type);\n  const areDataPartsValid = restParts.every(\n    (part) => isHexValidCharacters(part) && isHexValidLength(part)\n  );\n  return isSelfTransaction && isCorrectESDTType && areDataPartsValid;\n}\n\nexport function getAddressFromDataField({\n  receiver,\n  data\n}: {\n  receiver: string;\n  data: string;\n}) {\n  try {\n    if (!data) {\n      return receiver;\n    }\n    const parsedData = TransactionPayload.fromEncoded(data).toString();\n    const addressIndex = getAddressIndex(parsedData);\n    const parts = parsedData.split('@');\n    return addressIndex > -1 ? parts[addressIndex] : receiver;\n  } catch (err) {\n    console.log(err);\n    return;\n  }\n}\n\nfunction getAddressIndex(data: string) {\n  return data.includes(TypesOfSmartContractCallsEnum.MultiESDTNFTTransfer)\n    ? 1\n    : data.includes(TypesOfSmartContractCallsEnum.ESDTNFTTransfer)\n    ? 4\n    : -1;\n}\n\nexport default isContract;\n","import {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\n\nexport const pendingBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.sent\n];\nexport const successBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.success\n];\n\nexport const failBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.fail,\n  TransactionBatchStatusesEnum.cancelled,\n  TransactionBatchStatusesEnum.timedOut\n];\n\nexport const timedOutBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.timedOut\n];\n\nexport const pendingServerTransactionsStatuses = [\n  TransactionServerStatusesEnum.pending\n];\n\nexport const successServerTransactionsStates = [\n  TransactionServerStatusesEnum.success\n];\n\nexport const completedServerTransactionsStates = [\n  TransactionServerStatusesEnum.completed\n];\n\nexport const failServerTransactionsStates = [\n  TransactionServerStatusesEnum.fail,\n  TransactionServerStatusesEnum.invalid\n];\n\nexport function getIsTransactionCompleted(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return completedServerTransactionsStates.includes(\n    status as TransactionServerStatusesEnum\n  );\n}\n\nexport function getIsTransactionPending(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum,\n  isScCall = false\n) {\n  const isPending =\n    status != null &&\n    (isBatchTransactionPending(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionPending(status as TransactionServerStatusesEnum));\n  return isScCall\n    ? isPending ||\n        (getIsTransactionSuccessful(status) &&\n          !getIsTransactionCompleted(status))\n    : isPending;\n}\n\nexport function getIsTransactionSuccessful(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionSuccessful(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionSuccessful(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionFailed(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionFailed(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionFailed(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionTimedOut(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    isBatchTransactionTimedOut(status as TransactionBatchStatusesEnum)\n  );\n}\n\nexport function isBatchTransactionPending(\n  status?: TransactionBatchStatusesEnum\n) {\n  return status != null && pendingBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionSuccessful(\n  status: TransactionBatchStatusesEnum\n) {\n  return status != null && successBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionFailed(status: TransactionBatchStatusesEnum) {\n  return status != null && failBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionTimedOut(\n  status?: TransactionBatchStatusesEnum\n) {\n  return status != null && timedOutBatchTransactionsStates.includes(status);\n}\n\nexport function isServerTransactionPending(\n  status?: TransactionServerStatusesEnum\n) {\n  return status != null && pendingServerTransactionsStatuses.includes(status);\n}\nexport function isServerTransactionSuccessful(\n  status: TransactionServerStatusesEnum\n) {\n  return status != null && successServerTransactionsStates.includes(status);\n}\n\nexport function isServerTransactionFailed(\n  status: TransactionServerStatusesEnum\n) {\n  return status != null && failServerTransactionsStates.includes(status);\n}\n","const isUtf8 = (str: string) => {\n  for (let i = 0; i < str.length; i++) {\n    if (str.charCodeAt(i) > 127) return false;\n  }\n  return true;\n};\n\nexport function decodePart(part: string) {\n  let decodedPart = part;\n\n  try {\n    const hexPart = Buffer.from(part, 'hex').toString().trim();\n\n    if (isUtf8(hexPart) && hexPart.length > 1) {\n      decodedPart = hexPart;\n    }\n  } catch (error) {}\n\n  return decodedPart;\n}\n\nexport default decodePart;\n","export const getAllStringOccurrences = (sourceStr: string, searchStr: string) =>\n  [...sourceStr.matchAll(new RegExp(searchStr, 'gi'))].map((a) => a.index);\n","import BigNumber from 'bignumber.js';\nimport { MultiEsdtTxType, TransactionTypesEnum } from 'types/transactions';\nimport { decodePart } from 'utils/decoders';\nimport { getAllStringOccurrences } from '../getAllStringOccurrences';\n\n// TODO: add tests\nexport function parseMultiEsdtTransferData(data?: string) {\n  const transactions: MultiEsdtTxType[] = [];\n  let contractCallDataIndex = 0;\n  try {\n    if (\n      data?.startsWith(TransactionTypesEnum.MultiESDTNFTTransfer) &&\n      data?.includes('@')\n    ) {\n      const [, receiver, encodedTxCount, ...rest] = data?.split('@');\n      if (receiver) {\n        const txCount = new BigNumber(encodedTxCount, 16).toNumber();\n\n        let itemIndex = 0;\n        for (let txIndex = 0; txIndex < txCount; txIndex++) {\n          const transaction: MultiEsdtTxType = {\n            type: TransactionTypesEnum.nftTransaction,\n            data: '',\n            receiver\n          };\n\n          for (let index = 0; index < 3; index++) {\n            switch (index) {\n              case 0:\n                transaction.token = decodePart(rest[itemIndex]);\n                transaction.data = rest[itemIndex];\n                break;\n              case 1: {\n                const encodedNonce =\n                  rest[itemIndex] && rest[itemIndex].length\n                    ? rest[itemIndex]\n                    : '';\n                if (encodedNonce) {\n                  transaction.nonce = encodedNonce;\n                } else {\n                  transaction.type = TransactionTypesEnum.esdtTransaction;\n                }\n                transaction.data = `${transaction.data}@${rest[itemIndex]}`;\n                break;\n              }\n              case 2:\n                transaction.amount = new BigNumber(\n                  rest[itemIndex],\n                  16\n                ).toString(10);\n                transaction.data = `${transaction.data}@${rest[itemIndex]}`;\n                break;\n              default:\n                break;\n            }\n            contractCallDataIndex = itemIndex + 1;\n            itemIndex++;\n          }\n          transactions[txIndex] = transaction;\n        }\n        if (\n          transactions.length !== txCount ||\n          transactions.some(\n            (tx) => getAllStringOccurrences(tx.data, '@').length !== 2\n          ) ||\n          transactions.some((tx) => tx.data.startsWith('@'))\n        ) {\n          return [];\n        }\n        if (rest[contractCallDataIndex]) {\n          let scCallData = rest[contractCallDataIndex];\n          for (let i = contractCallDataIndex + 1; i < rest.length; i++) {\n            scCallData += '@' + rest[i];\n          }\n          transactions[txCount] = {\n            type: TransactionTypesEnum.scCall,\n            data: scCallData,\n            receiver\n          };\n        }\n      }\n    }\n  } catch (err) {\n    return transactions;\n  }\n  return transactions;\n}\n\nexport default parseMultiEsdtTransferData;\n","import BigNumber from 'bignumber.js';\nimport { TransactionTypesEnum } from '../../types/transactions';\n\nconst noData = {\n  tokenId: '',\n  amount: ''\n};\n\n// TODO: add tests\nexport function getTokenFromData(data?: string): {\n  tokenId: string;\n  amount: string;\n} {\n  const tokenTransfer = data?.includes(TransactionTypesEnum.ESDTTransfer);\n  const nftTransfer = data?.includes(TransactionTypesEnum.ESDTNFTTransfer);\n\n  if (data != null && (tokenTransfer || nftTransfer)) {\n    try {\n      const encodedToken = data.split('@')[1];\n      const encodedAmount = data.split('@')[tokenTransfer ? 2 : 3];\n      const tokenId = Buffer.from(encodedToken, 'hex').toString('ascii');\n\n      if (tokenId) {\n        const amount = new BigNumber(\n          '0x' + encodedAmount.replace('0x', '')\n        ).toString(10);\n        return {\n          tokenId,\n          amount\n        };\n      } else {\n        return noData;\n      }\n    } catch (e) {\n      return noData;\n    }\n  }\n  return noData;\n}\nexport default getTokenFromData;\n","export function isTokenTransfer({\n  tokenId,\n  erdLabel\n}: {\n  tokenId: string | undefined;\n  erdLabel: string;\n}) {\n  return Boolean(tokenId && tokenId !== erdLabel);\n}\n\nexport default isTokenTransfer;\n","function buildUrlParams(\n  search: string,\n  urlParams: {\n    [key: string]: string;\n  }\n) {\n  const urlSearchParams = new URLSearchParams(search);\n  const params = Object.fromEntries(urlSearchParams as any);\n\n  const nextUrlParams = new URLSearchParams({\n    ...params,\n    ...urlParams\n  }).toString();\n\n  return { nextUrlParams, params };\n}\n\ninterface ReplyUrlType {\n  callbackUrl: string;\n  urlParams?: { [key: string]: string };\n}\n\nexport function builtCallbackUrl({ callbackUrl, urlParams = {} }: ReplyUrlType) {\n  let url = callbackUrl;\n  if (Object.entries(urlParams).length > 0) {\n    const { search, origin, pathname } = new URL(callbackUrl);\n    const { nextUrlParams } = buildUrlParams(search, urlParams);\n    url = `${origin}${pathname}?${nextUrlParams}`;\n  }\n  return url;\n}\n\nexport default builtCallbackUrl;\n","import {\n  Transaction,\n  TransactionOptions,\n  TransactionVersion\n} from '@elrondnetwork/erdjs';\nimport { TransactionServerStatusesEnum } from 'types/enums';\n\nexport function parseTransactionAfterSigning(\n  transaction: Transaction,\n  isLedger = false\n) {\n  // TODO: REMOVE\n  //#region REMOVE when options is available in erdjs getTransactionsFromWalletUrl\n  if (isLedger) {\n    transaction.version = TransactionVersion.withTxHashSignVersion();\n    transaction.options = TransactionOptions.withTxHashSignOptions();\n  }\n  //#endregion\n  const parsedTransaction = transaction.toPlainObject();\n  parsedTransaction.hash = transaction.getHash().toString();\n  parsedTransaction.status = TransactionServerStatusesEnum.pending;\n  return parsedTransaction;\n}\n\nexport default parseTransactionAfterSigning;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { REHYDRATE } from 'redux-persist';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\nimport {\n  CustomTransactionInformation,\n  SignedTransactionsBodyType,\n  SignedTransactionsType,\n  SignedTransactionType,\n  TransactionsToSignType\n} from 'types/transactions';\nimport { isContract } from 'utils/smartContracts';\nimport {\n  getIsTransactionFailed,\n  getIsTransactionSuccessful,\n  getIsTransactionCompleted\n} from 'utils/transactions';\nimport { logoutAction } from '../commonActions';\n\nexport interface UpdateSignedTransactionsPayloadType {\n  sessionId: string;\n  status: TransactionBatchStatusesEnum;\n  errorMessage?: string;\n  transactions?: SignedTransactionType[];\n}\n\nexport interface MoveTransactionsToSignedStatePayloadType\n  extends SignedTransactionsBodyType {\n  sessionId: string;\n}\n\nexport interface UpdateSignedTransactionStatusPayloadType {\n  sessionId: string;\n  transactionHash: string;\n  status: TransactionServerStatusesEnum;\n  errorMessage?: string;\n}\n\nexport interface TransactionsSliceStateType {\n  signedTransactions: SignedTransactionsType;\n  transactionsToSign: TransactionsToSignType | null;\n  signTransactionsError: string | null;\n  customTransactionInformationForSessionId: {\n    [sessionId: string]: CustomTransactionInformation;\n  };\n}\n\nconst initialState: TransactionsSliceStateType = {\n  signedTransactions: {},\n  transactionsToSign: null,\n  signTransactionsError: null,\n  customTransactionInformationForSessionId: {}\n};\n\nconst defaultCustomInformation: CustomTransactionInformation = {\n  signWithoutSending: false,\n  sessionInformation: null,\n  redirectAfterSign: false,\n  completedThreshold: 1\n};\n\nexport const transactionsSlice = createSlice({\n  name: 'transactionsSlice',\n  initialState,\n  reducers: {\n    moveTransactionsToSignedState: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<MoveTransactionsToSignedStatePayloadType>\n    ) => {\n      const { sessionId, transactions, errorMessage, status } = action.payload;\n      const customTransactionInformation =\n        state.customTransactionInformationForSessionId?.[sessionId] ||\n        defaultCustomInformation;\n      state.signedTransactions[sessionId] = {\n        transactions,\n        status,\n        errorMessage,\n        customTransactionInformation\n      };\n      if (state?.transactionsToSign?.sessionId === sessionId) {\n        state.transactionsToSign = initialState.transactionsToSign;\n      }\n    },\n\n    clearSignedTransaction: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<string>\n    ) => {\n      if (state.signedTransactions[action.payload]) {\n        delete state.signedTransactions[action.payload];\n      }\n    },\n    clearTransactionToSign: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<string>\n    ) => {\n      if (state?.transactionsToSign?.[action.payload]) {\n        delete state.transactionsToSign[action.payload];\n      }\n    },\n    updateSignedTransaction: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<SignedTransactionsType>\n    ) => {\n      state.signedTransactions = {\n        ...state.signedTransactions,\n        ...action.payload\n      };\n    },\n    updateSignedTransactions: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<UpdateSignedTransactionsPayloadType>\n    ) => {\n      const { sessionId, status, errorMessage, transactions } = action.payload;\n      const transaction = state.signedTransactions[sessionId];\n      if (transaction != null) {\n        state.signedTransactions[sessionId].status = status;\n        if (errorMessage != null) {\n          state.signedTransactions[sessionId].errorMessage = errorMessage;\n        }\n        if (transactions != null) {\n          state.signedTransactions[sessionId].transactions = transactions;\n        }\n      }\n    },\n    updateSignedTransactionStatus: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<UpdateSignedTransactionStatusPayloadType>\n    ) => {\n      const { sessionId, status, errorMessage, transactionHash } =\n        action.payload;\n      const transactions = state.signedTransactions?.[sessionId]?.transactions;\n      if (transactions != null) {\n        state.signedTransactions[sessionId].transactions = transactions.map(\n          (transaction) => {\n            if (transaction.hash === transactionHash) {\n              return {\n                ...transaction,\n                status,\n                errorMessage\n              };\n            }\n            return transaction;\n          }\n        );\n        const areTransactionsSuccessful = state.signedTransactions[\n          sessionId\n        ]?.transactions?.every((transaction) => {\n          const isScCall = isContract(\n            transaction.receiver,\n            transaction.sender,\n            transaction.data\n          );\n          return isScCall\n            ? getIsTransactionCompleted(transaction.status)\n            : getIsTransactionSuccessful(transaction.status);\n        });\n\n        const areTransactionsFailed = state.signedTransactions[\n          sessionId\n        ]?.transactions?.every((transaction) =>\n          getIsTransactionFailed(transaction.status)\n        );\n        if (areTransactionsSuccessful) {\n          state.signedTransactions[sessionId].status =\n            TransactionBatchStatusesEnum.success;\n        }\n        if (areTransactionsFailed) {\n          state.signedTransactions[sessionId].status =\n            TransactionBatchStatusesEnum.fail;\n        }\n      }\n    },\n    setTransactionsToSign: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<TransactionsToSignType>\n    ) => {\n      state.transactionsToSign = action.payload;\n\n      const { sessionId, customTransactionInformation } = action.payload;\n      state.customTransactionInformationForSessionId[sessionId] =\n        customTransactionInformation;\n\n      state.signTransactionsError = null;\n    },\n    clearAllTransactionsToSign: (state) => {\n      state.transactionsToSign = initialState.transactionsToSign;\n      state.signTransactionsError = null;\n    },\n    clearAllSignedTransactions: (state) => {\n      state.signedTransactions = initialState.signedTransactions;\n    },\n    setSignTransactionsError: (state, action: PayloadAction<string | null>) => {\n      state.signTransactionsError = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n    builder.addCase(REHYDRATE, (state, action: any) => {\n      if (!action.payload?.transactions) {\n        return;\n      }\n\n      const { signedTransactions, customTransactionInformationForSessionId } =\n        action.payload.transactions;\n      const parsedSignedTransactions = Object.entries(\n        signedTransactions\n      ).reduce((acc, [sessionId, transaction]) => {\n        const txTimestamp: any = new Date(sessionId);\n        const expiration: any = new Date();\n        expiration.setHours(expiration.getHours() + 5);\n        const isExpired = expiration - txTimestamp > 0;\n        if (!isExpired) {\n          acc[sessionId] = transaction;\n        }\n        return acc;\n      }, {});\n      if (customTransactionInformationForSessionId != null) {\n        state.customTransactionInformationForSessionId =\n          customTransactionInformationForSessionId;\n      }\n      if (signedTransactions != null) {\n        state.signedTransactions = parsedSignedTransactions;\n      }\n    });\n  }\n});\n\nexport const {\n  updateSignedTransactionStatus,\n  updateSignedTransactions,\n  setTransactionsToSign,\n  clearAllTransactionsToSign,\n  clearAllSignedTransactions,\n  clearSignedTransaction,\n  clearTransactionToSign,\n  setSignTransactionsError,\n  moveTransactionsToSignedState\n} = transactionsSlice.actions;\n\nexport default transactionsSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { persistReducer } from 'redux-persist';\n\nimport account from './slices/accountInfoSlice';\nimport extraActions from './slices/extraActionsSlice';\nimport loginInfo from './slices/loginInfoSlice';\nimport modals from './slices/modalsSlice';\nimport networkConfig from './slices/networkConfigSlice';\nimport transactionsInfo from './slices/transactionsInfoSlice';\nimport transactions from './slices/transactionsSlice';\n\nconst reducers = {\n  account,\n  networkConfig,\n  extraActions,\n  loginInfo,\n  modals,\n  transactions,\n  transactionsInfo\n};\n\nif (window?.localStorage != null) {\n  //This allows for this library to be used on other platforms than web, like React Native\n  //without this condition, redux-persist 6+ will throw an error if persist storage fails\n  const sessionStorage = require('redux-persist/lib/storage/session').default;\n\n  //#region custom reducers\n  const transactionsInfoPersistConfig = {\n    key: 'dapp-core-transactionsInfo',\n    version: 1,\n    storage: sessionStorage\n  };\n  const transactionsReducer = {\n    key: 'dapp-core-transactions',\n    version: 1,\n    storage: sessionStorage,\n    blacklist: ['transactionsToSign']\n  };\n  reducers.transactions = persistReducer(\n    transactionsReducer,\n    transactions\n  ) as any;\n  reducers.transactionsInfo = persistReducer(\n    transactionsInfoPersistConfig,\n    transactionsInfo\n  ) as any;\n  //#endregion\n}\n\nconst rootReducer = combineReducers(reducers);\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport { Reducer } from 'redux';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER\n} from 'redux-persist';\n\nimport loginSessionMiddleware from './middlewares/loginSessionMiddleware';\nimport rootReducer from './reducers';\n\nlet localStorageReducers: Partial<Reducer> = rootReducer;\n\n//This allows for this library to be used on other platforms than web, like React Native\n//without this condition, redux-persist 6+ will throw an error if persist storage fails\nif (window?.localStorage != null) {\n  const storage = require('redux-persist/lib/storage').default;\n  const persistConfig = {\n    key: 'dapp-core-store',\n    version: 1,\n    storage,\n    whitelist: ['account', 'loginInfo', 'toasts', 'modals']\n  };\n  localStorageReducers = persistReducer(persistConfig, rootReducer);\n}\n\nexport const store = configureStore({\n  reducer: localStorageReducers,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [\n          FLUSH,\n          REHYDRATE,\n          PAUSE,\n          PERSIST,\n          PURGE,\n          REGISTER,\n          'appConfig/setProvider',\n          'accountInfoSlice/setAccount',\n          'accountInfoSlice/setAccountNonce',\n          'extraActionsSlice/initializeExtraActions'\n        ],\n        ignoredPaths: [\n          'networkConfig.proxy',\n          'networkConfig.apiProvider',\n          'networkConfig.provider',\n          'payload.nonce',\n          'account.account.nonce',\n          // extra actions\n          'extraActions.log',\n          'payload.log',\n          'payload.onLogin',\n\n          'extraActions.getProvider',\n          'extraActions.init'\n        ]\n      }\n    }).concat(loginSessionMiddleware)\n});\n\nexport const persistor = persistStore(store);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type StoreType = typeof store;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { createSelector } from 'reselect';\nimport { RootState } from '../store';\n\nexport const extraActionsSelector = (state: RootState) => state.extraActions;\n\nexport const extraActionsInit = createSelector(\n  extraActionsSelector,\n  (state) => state.init\n);\n","import {\n  Transaction,\n  GasLimit,\n  GasPrice,\n  Address,\n  TransactionPayload,\n  Balance,\n  ChainID,\n  TransactionVersion\n} from '@elrondnetwork/erdjs';\nimport { Nonce, TransactionOptions } from '@elrondnetwork/erdjs/out';\nimport { RawTransactionType } from 'types/transactions';\n\nexport default function newTransaction(rawTransaction: RawTransactionType) {\n  const { data } = rawTransaction;\n  const parsedData = data ? atob(data) : '';\n  return new Transaction({\n    value: Balance.fromString(rawTransaction.value),\n    data: new TransactionPayload(parsedData),\n    nonce: new Nonce(rawTransaction.nonce),\n    receiver: new Address(rawTransaction.receiver),\n    gasLimit: new GasLimit(rawTransaction.gasLimit),\n    gasPrice: new GasPrice(rawTransaction.gasPrice),\n    chainID: new ChainID(rawTransaction.chainID),\n    ...(rawTransaction.version\n      ? { version: new TransactionVersion(rawTransaction.version) }\n      : {}),\n    ...(rawTransaction.options\n      ? { options: new TransactionOptions(rawTransaction.options) }\n      : {})\n  });\n}\n","import { Transaction } from '@elrondnetwork/erdjs';\nimport newTransaction from 'models/newTransaction';\nimport {\n  CustomTransactionInformation,\n  RawTransactionType,\n  SignedTransactionsType\n} from 'types/transactions';\nimport {\n  getIsTransactionCompleted,\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionSuccessful,\n  getIsTransactionTimedOut\n} from 'utils/transactions';\nimport { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport interface TransactionsToSignReturnType {\n  callbackRoute?: string;\n  sessionId: string;\n  transactions: Transaction[];\n  customTransactionInformation: CustomTransactionInformation;\n}\n\nexport const transactionsSelectors = (state: RootState) => state.transactions;\n\nexport const signedTransactionsSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state) => state.signedTransactions as SignedTransactionsType\n);\n\nexport const signTransactionsErrorSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state) => state.signTransactionsError\n);\n\nexport const pendingSignedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (signedTransactions) =>\n    Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n      if (getIsTransactionPending(txBody.status)) {\n        acc[sessionId] = txBody;\n      }\n      return acc;\n    }, {})\n);\n\nexport const successfulTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (signedTransactions) =>\n    Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n      if (getIsTransactionSuccessful(txBody.status)) {\n        acc[sessionId] = txBody;\n      }\n      return acc;\n    }, {})\n);\n\nexport const completedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (signedTransactions) =>\n    Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n      if (getIsTransactionCompleted(txBody.status)) {\n        acc[sessionId] = txBody;\n      }\n      return acc;\n    }, {})\n);\n\nexport const failedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (signedTransactions) =>\n    Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n      if (getIsTransactionFailed(txBody.status)) {\n        acc[sessionId] = txBody;\n      }\n      return acc;\n    }, {})\n);\n\nexport const timedOutTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (signedTransactions) =>\n    Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n      if (getIsTransactionTimedOut(txBody.status)) {\n        acc[sessionId] = txBody;\n      }\n      return acc;\n    }, {})\n);\n\nexport const transactionsToSignSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state): TransactionsToSignReturnType | null => {\n    if (state?.transactionsToSign == null) {\n      return null;\n    }\n    return {\n      ...state.transactionsToSign,\n      transactions:\n        state?.transactionsToSign?.transactions.map((tx: RawTransactionType) =>\n          newTransaction(tx)\n        ) || []\n    };\n  }\n);\n\nexport const transactionStatusSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (_: RootState, transactionSessionId: string | null) => transactionSessionId,\n  (\n    signedTransactions: SignedTransactionsType,\n    transactionSessionId: string | null\n  ) =>\n    transactionSessionId != null\n      ? signedTransactions?.[transactionSessionId] || {}\n      : {}\n);\n","import { createDeepEqualSelector } from 'redux/selectors/helpers';\nimport {\n  defaultTransactionErrorMessage,\n  defaultTransactionProcessingMessage,\n  defaultTransactionSuccessMessage\n} from 'redux/slices';\nimport { RootState } from '../store';\n\nconst defaultTransactionInfo = {\n  errorMessage: defaultTransactionErrorMessage,\n  successMessage: defaultTransactionSuccessMessage,\n  processingMessage: defaultTransactionProcessingMessage\n};\n\nexport const transactionsInfoSelectors = (state: RootState) =>\n  state.transactionsInfo;\n\nexport const transactionDisplayInfoSelector = createDeepEqualSelector(\n  transactionsInfoSelectors,\n  (_: RootState, transactionSessionId: string | null) => transactionSessionId,\n  (transactionsDisplayInfo: any, transactionSessionId: string | null) =>\n    transactionSessionId != null\n      ? transactionsDisplayInfo?.[Number(transactionSessionId)] ||\n        defaultTransactionInfo\n      : defaultTransactionInfo\n);\n","import { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const modalsSliceSelector = (state: RootState) => state.modals;\n\nexport const txSubmittedModalSelector = createDeepEqualSelector(\n  modalsSliceSelector,\n  (state) => state.txSubmittedModal\n);\n\nexport const notificationModalSelector = createDeepEqualSelector(\n  modalsSliceSelector,\n  (state) => state.notificationModal\n);\n","import { isLoggedInSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getIsLoggedIn() {\n  return isLoggedInSelector(store.getState());\n}\n","import { logoutAction } from 'redux/commonActions';\nimport { providerSelector } from 'redux/selectors/networkConfigSelectors';\nimport { store } from 'redux/store';\nimport { LoginMethodsEnum } from 'types';\nimport { getIsLoggedIn } from 'utils/getIsLoggedIn';\nimport { getProviderType } from 'utils/provider';\n\nexport async function logout(\n  callbackUrl?: string,\n  onRedirect?: (callbackUrl?: string) => void\n) {\n  const provider = providerSelector(store.getState());\n  const providerType = getProviderType(provider);\n  const isLoggedIn = getIsLoggedIn();\n  if (!isLoggedIn) {\n    return;\n  }\n\n  store.dispatch(logoutAction());\n\n  try {\n    await provider.logout({ callbackUrl });\n    if (callbackUrl && providerType !== LoginMethodsEnum.wallet) {\n      if (typeof onRedirect === 'function') {\n        onRedirect(callbackUrl);\n      } else {\n        window.location.href = callbackUrl;\n      }\n    }\n  } catch (err) {\n    console.error('error logging out', err);\n  }\n}\n","export function buildUrlParams(\n  search: string,\n  urlParams: {\n    [key: string]: string;\n  }\n) {\n  const urlSearchParams: any = new URLSearchParams(search);\n  const params = Object.fromEntries(urlSearchParams);\n  const nextUrlParams = new URLSearchParams({\n    ...params,\n    ...urlParams\n  }).toString();\n  return { nextUrlParams, params };\n}\n","interface SwitchTrueType {\n  default: any;\n  [key: string]: any;\n}\n\ntype ReturnKeys = 'true' | 'false';\n\nexport function switchTrue(object: SwitchTrueType) {\n  const { default: defaultValue, ...rest } = object;\n  const obj = { default: defaultValue, ...rest };\n  const result = Object.keys(obj).reduce((acc, cur) => {\n    return {\n      ...acc,\n      [cur === 'default' ? 'true' : cur]: (obj as any)[cur as ReturnKeys]\n    };\n  }, {} as Record<ReturnKeys, any>);\n  return result['true'];\n}\n","import { Address } from '@elrondnetwork/erdjs';\n\nfunction canTransformToPublicKey(address: string) {\n  try {\n    const checkAddress = new Address(address);\n    return Boolean(checkAddress.bech32());\n  } catch {\n    return false;\n  }\n}\n\nexport function addressIsValid(destinationAddress: string) {\n  const isValidBach =\n    destinationAddress?.startsWith('erd') &&\n    destinationAddress.length === 62 &&\n    /^\\w+$/.test(destinationAddress);\n\n  return isValidBach && canTransformToPublicKey(destinationAddress);\n}\n","import { proxySelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getNetworkProxy() {\n  return proxySelector(store.getState());\n}\n","import { apiProviderSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getApiProvider() {\n  return apiProviderSelector(store.getState());\n}\n","import { providerSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getAccountProvider() {\n  return providerSelector(store.getState());\n}\n","import { getProviderType } from 'utils/provider';\nimport { getAccountProvider } from './getAccountProvider';\n\nexport function getAccountProviderType() {\n  const provider = getAccountProvider();\n  return getProviderType(provider);\n}\n","import { chainIDSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getChainID() {\n  return chainIDSelector(store.getState());\n}\n","import { networkSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getNetworkConfig() {\n  return networkSelector(store.getState());\n}\n","import { egldLabelSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getEgldLabel() {\n  return egldLabelSelector(store.getState());\n}\n","import { getAccountProviderType } from './getAccountProviderType';\n\nexport function getIsProviderEqualTo(comparedProviderType: any) {\n  const providerType = getAccountProviderType();\n  return providerType === comparedProviderType;\n}\n","import {\n  addressSelector,\n  isLoggedInSelector,\n  providerSelector,\n  walletLoginSelector\n} from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { getIsProviderEqualTo } from 'utils/network';\nimport { addressIsValid } from './addressIsValid';\n\nexport function getAddress(): Promise<string> {\n  const { search } = window.location;\n  const appState = store.getState();\n  const provider = providerSelector(appState);\n  const address = addressSelector(appState);\n  const loggedIn = isLoggedInSelector(appState);\n  const walletLogin = walletLoginSelector(appState);\n\n  if (getIsProviderEqualTo(LoginMethodsEnum.ledger) && loggedIn) {\n    return new Promise((resolve) => {\n      resolve(address);\n    });\n  }\n\n  return !getIsProviderEqualTo(LoginMethodsEnum.none) &&\n    !getIsProviderEqualTo(LoginMethodsEnum.wallet) &&\n    !getIsProviderEqualTo(LoginMethodsEnum.extra)\n    ? // TODO: does not take into account ledger locked see link for details:\n      // https://github.com/ElrondNetwork/dapp/blob/d5c57695a10055f20d387ba064b6843606789ee9/src/helpers/accountMethods.tsx#L21\n      provider.getAddress()\n    : new Promise((resolve) => {\n        if (walletLogin != null) {\n          const urlSearchParams = new URLSearchParams(search);\n          const params = Object.fromEntries(urlSearchParams as any);\n          if (addressIsValid(params.address)) {\n            resolve(params.address);\n          }\n        }\n        if (loggedIn) {\n          resolve(address);\n        }\n        resolve('');\n      });\n}\n\nexport default getAddress;\n","import { Address } from '@elrondnetwork/erdjs';\nimport { proxySelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getAccount(address?: string) {\n  const proxy = proxySelector(store.getState());\n  return proxy.getAccount(new Address(address));\n}\n\nexport default getAccount;\n","import { setAccountNonce } from 'redux/slices';\nimport { store } from 'redux/store';\n\n// this is is needed to allow the users to set the nonce dynamically from outside the library\n// without getting access to store.dispatch function\nexport function setNonce(nonce: number) {\n  store.dispatch(setAccountNonce(nonce));\n}\n","import { AccountOnNetwork } from '@elrondnetwork/erdjs';\nimport { accountNonceSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getLatestNonce(account: AccountOnNetwork) {\n  const appState = store.getState();\n  const currentAccountNonce = accountNonceSelector(appState);\n  return currentAccountNonce && !isNaN(currentAccountNonce)\n    ? Math.max(currentAccountNonce, account.nonce.valueOf())\n    : account.nonce.valueOf();\n}\n\nexport default getLatestNonce;\n","import { accountSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { getAccount } from './getAccount';\n\nexport async function getAccountBalance(address?: string) {\n  let accountAddress = address;\n  if (accountAddress == null) {\n    const account = accountSelector(store.getState());\n    accountAddress = account.address;\n  }\n  const account = await getAccount(accountAddress);\n  return account.balance.toString();\n}\n","import { providerSelector } from 'redux/selectors';\nimport { setAccount } from 'redux/slices';\nimport { store } from 'redux/store';\nimport getAccount from './getAccount';\nimport getAddress from './getAddress';\nimport getLatestNonce from './getLatestNonce';\n\nconst setNewAccount = async () => {\n  try {\n    const address = await getAddress();\n    try {\n      const account = await getAccount(address);\n      const accountData = {\n        balance: account.balance.toString(),\n        address,\n        nonce: getLatestNonce(account)\n      };\n      store.dispatch(setAccount(accountData));\n      return accountData;\n    } catch (e) {\n      console.error('Failed getting account ', e);\n    }\n  } catch (e) {\n    console.error('Failed getting address ', e);\n  }\n  return null;\n};\n\nexport async function refreshAccount() {\n  const provider = providerSelector(store.getState());\n  if (provider.isInitialized()) {\n    return setNewAccount();\n  } else {\n    try {\n      const initialized = await provider.init();\n      if (!initialized) {\n        return;\n      }\n      return setNewAccount();\n    } catch (e) {\n      console.error('Failed initializing provider ', e);\n    }\n  }\n  return undefined;\n}\n","const isAddressOfMetachain = (pubKey: Buffer) => {\n  // prettier-ignore\n  const metachainPrefix = Buffer.from([\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n  ]);\n  const pubKeyPrefix = pubKey.slice(0, metachainPrefix.length);\n  if (pubKeyPrefix.equals(metachainPrefix)) {\n    return true;\n  }\n  const zeroAddress = Buffer.alloc(32).fill(0);\n  return pubKey.equals(zeroAddress);\n};\nexport const getShardOfAddress = (hexPubKey: any) => {\n  try {\n    const numShards = 3;\n    const maskHigh = parseInt('11', 2);\n    const maskLow = parseInt('01', 2);\n    const pubKey = Buffer.from(hexPubKey, 'hex');\n    const lastByteOfPubKey = pubKey[31];\n    if (isAddressOfMetachain(pubKey)) {\n      return 4294967295;\n    }\n    let shard = lastByteOfPubKey & maskHigh;\n    if (shard > numShards - 1) {\n      shard = lastByteOfPubKey & maskLow;\n    }\n    return shard;\n  } catch (err) {\n    return -1;\n  }\n};\n","export const logarithmicRest = (position: number) => {\n  const minp = 0;\n  const maxp = 10;\n\n  const minv = Math.log(0.005);\n  const maxv = Math.log(2);\n\n  const scale = (maxv - minv) / (maxp - minp);\n\n  return Math.exp(minv + scale * (position - minp));\n};\n","export const ERROR_SIGNING= 'error when signing';\nexport const TRANSACTION_CANCELLED = 'Transaction cancelled';\nexport const ERROR_SIGNING_TX = 'error signing transaction';\nexport const PROVIDER_NOT_INTIALIZED = 'provider not intialized';\nexport const MISSING_PROVIDER_MESSAGE = 'You need a signer/valid signer to send a transaction,use either WalletProvider, LedgerProvider or WalletConnect';\n","import { EnvironmentsEnum, NetworkType } from 'types';\n\nexport const DEFAULT_MIN_GAS_LIMIT = 50_000;\n\nexport const configEndpoint: Record<EnvironmentsEnum, string> = {\n  mainnet: 'https://api.elrond.com/dapp/config',\n  testnet: 'https://testnet-api.elrond.com/dapp/config',\n  devnet: 'https://devnet-api.elrond.com/dapp/config'\n};\n\nexport const fallbackNetworkConfigurations: Record<string, NetworkType> = {\n  devnet: {\n    id: 'devnet',\n    name: 'Devnet',\n    egldLabel: 'xEGLD',\n    egldDenomination: '18',\n    decimals: '4',\n    gasPerDataByte: '1500',\n    walletConnectDeepLink:\n      'https://maiar.page.link/?apn=com.elrond.maiar.wallet&isi=1519405832&ibi=com.elrond.maiar.wallet&link=https://maiar.com/',\n    walletConnectBridgeAddresses: ['https://bridge.walletconnect.org'],\n    walletAddress: 'https://devnet-wallet.elrond.com',\n    apiAddress: 'https://devnet-api.elrond.com',\n    explorerAddress: 'http://devnet-explorer.elrond.com',\n    apiTimeout: '4000'\n  },\n  testnet: {\n    id: 'testnet',\n    name: 'Testnet',\n    egldLabel: 'xEGLD',\n    egldDenomination: '18',\n    decimals: '4',\n    gasPerDataByte: '1500',\n    walletConnectDeepLink:\n      'https://maiar.page.link/?apn=com.elrond.maiar.wallet&isi=1519405832&ibi=com.elrond.maiar.wallet&link=https://maiar.com/',\n    walletConnectBridgeAddresses: ['https://bridge.walletconnect.org'],\n    walletAddress: 'https://testnet-wallet.elrond.com',\n    apiAddress: 'https://testnet-api.elrond.com',\n    explorerAddress: 'http://testnet-explorer.elrond.com',\n    apiTimeout: '4000'\n  },\n  mainnet: {\n    id: 'mainnet',\n    name: 'Mainnet',\n    egldLabel: 'xEGLD',\n    egldDenomination: '18',\n    decimals: '4',\n    gasPerDataByte: '1500',\n    walletConnectDeepLink:\n      'https://maiar.page.link/?apn=com.elrond.maiar.wallet&isi=1519405832&ibi=com.elrond.maiar.wallet&link=https://maiar.com/',\n    walletConnectBridgeAddresses: ['https://bridge.walletconnect.org'],\n    walletAddress: 'https://wallet.elrond.com',\n    apiAddress: 'https://api.elrond.com',\n    explorerAddress: 'https://explorer.elrond.com',\n    apiTimeout: '4000'\n  }\n};\n","const ledgerErrorCodes = {\n  0x9000: {\n    code: 'codeSuccess',\n    message: 'Success'\n  },\n  0x6985: {\n    code: 'ERR_USER_DENIED',\n    message: 'Rejected by user'\n  },\n  0x6d00: {\n    code: 'ERR_UNKNOWN_INSTRUCTION',\n    message: 'Unknown instruction'\n  },\n  0x6e00: {\n    code: 'ERR_WRONG_CLA',\n    message: 'Wrong CLA'\n  },\n  0x6e01: {\n    code: 'ERR_INVALID_ARGUMENTS',\n    message: 'Invalid arguments'\n  },\n  0x6e02: {\n    code: 'ERR_INVALID_MESSAGE',\n    message: 'Invalid message'\n  },\n  0x6e03: {\n    code: 'ERR_INVALID_P1',\n    message: 'Invalid P1'\n  },\n  0x6e04: {\n    code: 'ERR_MESSAGE_TOO_LONG',\n    message: 'Message too long'\n  },\n  0x6e05: {\n    code: 'ERR_RECEIVER_TOO_LONG',\n    message: 'Receiver too long'\n  },\n  0x6e06: {\n    code: 'ERR_AMOUNT_TOO_LONG',\n    message: 'Amount too long'\n  },\n  0x6e07: {\n    code: 'ERR_CONTRACT_DATA_DISABLED',\n    message: 'Contract data disabled in app options'\n  },\n  0x6e08: {\n    code: 'ERR_MESSAGE_INCOMPLETE',\n    message: 'Message incomplete'\n  },\n  0x6e10: {\n    code: 'ERR_SIGNATURE_FAILED',\n    message: 'Signature failed'\n  },\n  0x6e09: {\n    code: 'ERR_WRONG_TX_VERSION',\n    message: 'Wrong TX version'\n  },\n  0x6e0a: {\n    code: 'ERR_NONCE_TOO_LONG',\n    message: 'Nonce too long'\n  },\n  0x6e0b: {\n    code: 'ERR_INVALID_AMOUNT',\n    message: 'Invalid amount'\n  },\n  0x6e0c: {\n    code: 'ERR_INVALID_FEE',\n    message: 'Invalid fee'\n  },\n  0x6e0d: {\n    code: 'ERR_PRETTY_FAILED',\n    message: 'Pretty failed'\n  },\n  0x6e0e: {\n    code: 'ERR_DATA_TOO_LONG',\n    message: 'Data too long'\n  },\n  0x6e0f: {\n    code: 'ERR_WRONG_TX_OPTIONS',\n    message: 'Invalid transaction options'\n  },\n  0x6e11: {\n    code: 'ERR_SIGN_TX_DEPRECATED',\n    message:\n      'Regular transaction signing is deprecated in this version. Use hash signing.'\n  }\n};\n\nexport default ledgerErrorCodes;\n","export * as errorsMessages from './errorsMessages';\nexport * as networkConstants from './network';\nexport * as ledgerErrorCodes from './ledgerErrorCodes';\n\nexport const gasPriceModifier = '0.01';\nexport const gasPerDataByte = '1500';\nexport const gasLimit = '50000';\nexport const defaultGasPrice = 1_000_000_000;\nexport const defaultGasLimit = 60_000_000;\nexport const denomination = 18;\nexport const decimals = 4;\n\nexport const dappInitRoute = '/dapp/init';\nexport const walletSignSession = 'signSession';\n","export function pipe<ValueType>(previous: ValueType) {\n  return {\n    if: function (condition: boolean) {\n      if (condition) {\n        return {\n          then: (newValue: ValueType | ((prop: ValueType) => ValueType)) =>\n            // if a callback is passed, callback is executed with previous value\n            newValue instanceof Function\n              ? pipe(newValue(previous))\n              : pipe(newValue)\n        };\n      } else {\n        return {\n          then: () => pipe(previous)\n        };\n      }\n    },\n\n    then: (newValue: ValueType | ((prop: ValueType) => ValueType)) =>\n      newValue instanceof Function ? pipe(newValue(previous)) : pipe(newValue),\n\n    valueOf: function () {\n      return previous;\n    }\n  };\n}\nexport default pipe;\n","import { validation } from '@elrondnetwork/dapp-utils';\nimport { Balance, Token } from '@elrondnetwork/erdjs';\nimport BigNumber from 'bignumber.js';\nimport {\n  denomination as configDenomination,\n  decimals as configDecimals\n} from 'constants/index';\nimport pipe from './pipe';\n\nBigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_FLOOR });\n\nexport function denominate({\n  input,\n  denomination = configDenomination,\n  decimals = configDecimals,\n  showLastNonZeroDecimal = true,\n  addCommas = false\n}: {\n  input: string | Balance;\n  denomination?: number;\n  decimals?: number;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}) {\n  const token = new Token({ decimals: denomination });\n\n  if (typeof input === 'string' && !validation.stringIsInteger(input, false)) {\n    throw new Error('Invalid input');\n  }\n\n  return (\n    pipe(input as string)\n      // denominate\n      .if(typeof input === 'string')\n      .then(() =>\n        new Balance(token, 0, new BigNumber(input as string)).toDenominated()\n      )\n\n      .if(input.constructor === Balance)\n      .then(() => (input as Balance).toDenominated())\n\n      // format\n      .then((current) => {\n        const bnBalance = new BigNumber(current);\n\n        if (bnBalance.isZero()) {\n          return '0';\n        }\n        const balance = bnBalance.toString(10);\n        const [integerPart, decimalPart] = balance.split('.');\n        const bNdecimalPart = new BigNumber(decimalPart || 0);\n\n        const decimalPlaces = pipe(0)\n          .if(Boolean(decimalPart && showLastNonZeroDecimal))\n          .then(() => Math.max(decimalPart.length, decimals))\n\n          .if(bNdecimalPart.isZero() && !showLastNonZeroDecimal)\n          .then(0)\n\n          .if(Boolean(decimalPart && !showLastNonZeroDecimal))\n          .then(() => Math.min(decimalPart.length, decimals))\n\n          .valueOf();\n\n        const shownDecimalsAreZero =\n          decimalPart &&\n          decimals >= 1 &&\n          decimals <= decimalPart.length &&\n          bNdecimalPart.isGreaterThan(0) &&\n          new BigNumber(decimalPart.substring(0, decimals)).isZero();\n\n        const formatted = bnBalance.toFormat(decimalPlaces);\n\n        const formattedBalance = pipe(balance)\n          .if(addCommas)\n          .then(formatted)\n\n          .if(Boolean(shownDecimalsAreZero) && !showLastNonZeroDecimal)\n          .then((current) => {\n            const integerPartZero = new BigNumber(integerPart).isZero();\n            const [numericPart] = current.split('.');\n\n            const zeroPlaceholders = new Array(decimals - 1).fill(0);\n            const zeros = [...zeroPlaceholders, 0].join('');\n            const minAmount = [...zeroPlaceholders, 1].join(''); // 00..1\n\n            if (integerPartZero) {\n              return `<${numericPart}.${minAmount}`;\n            } else {\n              return `${numericPart}.${zeros}`;\n            }\n          })\n\n          .valueOf();\n\n        return formattedBalance;\n      })\n\n      .valueOf()\n  );\n}\nexport default denominate;\n","import {\n  createBalanceBuilder,\n  Token,\n  TokenType\n} from '@elrondnetwork/erdjs/out';\nimport { denomination as configDenomination } from 'constants/index';\n\nexport function nominate(input: string, customDenomination?: number) {\n  const balance = createBalanceBuilder(\n    new Token({\n      decimals: customDenomination || configDenomination,\n      type: TokenType.Fungible\n    })\n  );\n  return balance(input).toString();\n}\n\nexport default nominate;\n","let classnames: any = {};\ntry {\n  classnames = require('classnames');\n} catch (err) {}\n\nexport default classnames;\n","import classNames from 'optionalPackages/classnames';\n\nexport function getGeneratedClasses(\n  className: string,\n  shouldRenderDefaultCss: boolean,\n  defaultStyles: Record<string, string>\n) {\n  return Object.entries(defaultStyles).reduce(\n    (acc, [key, defaultClassNames]) => {\n      acc[key] = classNames?.(\n        `${className}_${key}`,\n        shouldRenderDefaultCss && (defaultClassNames as string)\n      );\n      return acc;\n    },\n    {}\n  ) as any;\n}\n","export const wrapperClassName = 'dapp-core-ui-component';\nexport default wrapperClassName;\n","let moment: any = {};\ntry {\n  moment = require('moment');\n} catch (err) {}\n\nexport default moment;\n","import moment from 'optionalPackages/moment';\n\nexport type SessionKeyType = 'address' | 'shard' | 'toasts' | 'toastProgress';\ntype ExpiresType = number | false;\n\nexport const setItem = ({\n  key,\n  data,\n  expires\n}: {\n  key: SessionKeyType;\n  data: any;\n  expires: ExpiresType;\n}) => {\n  sessionStorage.setItem(\n    String(key),\n    JSON.stringify({\n      expires,\n      data\n    })\n  );\n};\n\nexport const getItem = (key: SessionKeyType): any => {\n  const item = sessionStorage.getItem(String(key));\n  if (!item) {\n    return null;\n  }\n\n  const deserializedItem = JSON.parse(item);\n  if (!deserializedItem) {\n    return null;\n  }\n\n  if (\n    !deserializedItem.hasOwnProperty('expires') ||\n    !deserializedItem.hasOwnProperty('data')\n  ) {\n    return null;\n  }\n\n  const expired = moment().unix() >= deserializedItem.expires;\n  if (expired) {\n    sessionStorage.removeItem(String(key));\n    return null;\n  }\n\n  return deserializedItem.data;\n};\n\nexport const removeItem = (key: SessionKeyType) =>\n  sessionStorage.removeItem(String(key));\n\nexport const clear = () => sessionStorage.clear();\n\nexport const storage = {\n  setItem,\n  getItem,\n  removeItem,\n  clear\n};\n\nexport default storage;\n","import React from 'react';\nimport {\n  createDispatchHook,\n  createSelectorHook,\n  createStoreHook\n} from 'react-redux';\n\nconst defaultContextValue: any = null;\nexport const DappCoreContext = React.createContext(defaultContextValue);\n\nexport const useStore = createStoreHook(DappCoreContext);\nexport const useDispatch = createDispatchHook(DappCoreContext);\nexport const useSelector = createSelectorHook(DappCoreContext);\n","import { useState } from 'react';\nimport { ExtensionProvider } from '@elrondnetwork/erdjs';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector } from 'redux/selectors';\nimport { setProvider, setTokenLogin } from 'redux/slices';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { optionalRedirect } from 'utils/internal';\nimport { LoginHookGenericStateType, InitiateLoginFunctionType } from '../types';\n\ninterface UseExtensionLoginPropsType {\n  callbackRoute: string;\n  token?: string;\n  redirectAfterLogin?: boolean;\n}\n\nexport type UseExtensionLoginReturnType = [\n  InitiateLoginFunctionType,\n  LoginHookGenericStateType\n];\n\nexport const useExtensionLogin = ({\n  callbackRoute,\n  token,\n  redirectAfterLogin = false\n}: UseExtensionLoginPropsType): UseExtensionLoginReturnType => {\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const dispatch = useDispatch();\n  async function initiateLogin() {\n    setIsLoading(true);\n    const provider: ExtensionProvider = ExtensionProvider.getInstance();\n\n    try {\n      const isSuccessfullyInitialized: boolean = await provider.init();\n\n      if (!isSuccessfullyInitialized) {\n        console.warn(\n          'Something went wrong trying to redirect to wallet login..'\n        );\n        return;\n      }\n\n      const callbackUrl: string = encodeURIComponent(\n        `${window.location.origin}${callbackRoute}`\n      );\n      const providerLoginData = {\n        callbackUrl,\n        ...(token && { token })\n      };\n\n      await provider.login(providerLoginData);\n\n      dispatch(setProvider(provider));\n\n      const { signature, address } = provider.account;\n      if (signature) {\n        dispatch(\n          setTokenLogin({\n            loginToken: String(token),\n            signature\n          })\n        );\n      }\n      dispatch(\n        loginAction({ address, loginMethod: LoginMethodsEnum.extension })\n      );\n      optionalRedirect(callbackRoute, redirectAfterLogin);\n    } catch (error) {\n      console.error('error loging in', error);\n      // TODO: can be any or typed error\n      setError('error logging in' + (error as any).message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const loginFailed = Boolean(error);\n  return [\n    initiateLogin,\n    {\n      loginFailed,\n      error,\n      isLoading: isLoading && !loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed\n    }\n  ];\n};\n","import { useState } from 'react';\nimport { useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector, networkSelector } from 'redux/selectors';\nimport { setWalletLogin } from 'redux/slices';\nimport { store } from 'redux/store';\nimport { newWalletProvider } from 'utils';\nimport { LoginHookGenericStateType, InitiateLoginFunctionType } from '../types';\n\ninterface UseWebWalletLoginPropsType {\n  callbackRoute: string;\n  token?: string;\n}\n\nexport type UseWebWalletLoginReturnType = [\n  InitiateLoginFunctionType,\n  LoginHookGenericStateType\n];\n\nexport const useWebWalletLogin = ({\n  callbackRoute,\n  token\n}: UseWebWalletLoginPropsType): UseWebWalletLoginReturnType => {\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n\n  async function initiateLogin() {\n    try {\n      setIsLoading(true);\n      const appState = store.getState();\n      const network = networkSelector(appState);\n      const provider = newWalletProvider(network.walletAddress);\n\n      const now = new Date();\n      const expires: number = now.setMinutes(now.getMinutes() + 3) / 1000;\n      const walletLoginData = {\n        data: {},\n        expires: expires\n      };\n\n      store.dispatch(setWalletLogin(walletLoginData));\n\n      const callbackUrl: string = encodeURIComponent(\n        `${window.location.origin}${callbackRoute}`\n      );\n      const loginData = {\n        callbackUrl: callbackUrl,\n        ...(token && { token })\n      };\n\n      await provider.login(loginData);\n    } catch (error) {\n      console.error(error);\n      setError('error logging in' + (error as any).message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const loginFailed = error != null;\n\n  return [\n    initiateLogin,\n    {\n      error,\n      loginFailed,\n      isLoading: isLoading && !loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed\n    }\n  ];\n};\n\nexport default useWebWalletLogin;\n","import React from 'react';\nimport { HWProvider } from '@elrondnetwork/erdjs';\nimport { ledgerErrorCodes } from 'constants/index';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  isLoggedInSelector,\n  ledgerAccountSelector,\n  proxySelector\n} from 'redux/selectors';\nimport {\n  setLedgerAccount,\n  setLedgerLogin,\n  setProvider,\n  setTokenLogin\n} from 'redux/slices';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { optionalRedirect } from 'utils/internal';\nimport { LoginHookGenericStateType, InitiateLoginFunctionType } from '../types';\n\nconst ledgerAppErrorText = 'Check if Elrond app is open on Ledger';\nconst failInitializeErrorText =\n  'Could not initialise ledger app, make sure Elrond app is open';\n\nconst defaultAddressesPerPage = 10;\n\nexport interface UseLedgerLoginPropsType {\n  callbackRoute: string;\n  addressesPerPage?: number;\n  token?: string;\n  redirectAfterLogin?: boolean;\n}\n\nexport interface SelectedAddress {\n  address: string;\n  index: number;\n}\n\nexport interface LedgerLoginHookCustomStateType {\n  accounts: string[];\n  showAddressList: boolean;\n  startIndex: number;\n  selectedAddress: SelectedAddress | null;\n\n  onGoToPrevPage: () => void;\n  onGoToNextPage: () => void;\n  onSelectAddress: (address: SelectedAddress | null) => void;\n  onConfirmSelectedAddress: () => void;\n}\n\nexport type LedgerLoginHookReturnType = [\n  InitiateLoginFunctionType,\n  LoginHookGenericStateType,\n  LedgerLoginHookCustomStateType\n];\n\nexport function useLedgerLogin({\n  callbackRoute,\n  token,\n  addressesPerPage = defaultAddressesPerPage,\n  redirectAfterLogin = false\n}: UseLedgerLoginPropsType): LedgerLoginHookReturnType {\n  const ledgerAccount = useSelector(ledgerAccountSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const proxy = useSelector(proxySelector);\n  const dispatch = useDispatch();\n  const [error, setError] = React.useState('');\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const hwWalletP = new HWProvider(proxy);\n  const [startIndex, setStartIndex] = React.useState(0);\n  const [accounts, setAccounts] = React.useState<string[]>([]);\n  const [selectedAddress, setSelectedAddress] =\n    React.useState<SelectedAddress | null>(null);\n\n  const [showAddressList, setShowAddressList] = React.useState(false);\n\n  function dispatchLoginActions({\n    provider,\n    address,\n    index,\n    signature\n  }: {\n    provider: HWProvider;\n    address: string;\n    index: number;\n    signature?: string;\n  }) {\n    dispatch(setProvider(provider));\n\n    dispatch(setLedgerLogin({ index, loginType: LoginMethodsEnum.ledger }));\n\n    if (signature) {\n      dispatch(\n        setTokenLogin({\n          loginToken: String(token),\n          signature\n        })\n      );\n    }\n    dispatch(loginAction({ address, loginMethod: LoginMethodsEnum.ledger }));\n    optionalRedirect(callbackRoute, redirectAfterLogin);\n  }\n\n  const onLoginFailed = (err: any, customMessage?: string) => {\n    if (err.statusCode in ledgerErrorCodes) {\n      setError(\n        (ledgerErrorCodes as any)[err.statusCode].message + customMessage\n      );\n    }\n    setIsLoading(false);\n    console.warn(err);\n    dispatch(setLedgerAccount(null));\n  };\n\n  async function loginUser(hwWalletProvider: HWProvider) {\n    if (selectedAddress == null) {\n      return false;\n    }\n    const { index } = selectedAddress;\n\n    if (token) {\n      try {\n        const loginInfo = await hwWalletProvider.tokenLogin({\n          token: Buffer.from(`${token}{}`),\n          addressIndex: index\n        });\n        dispatchLoginActions({\n          address: loginInfo.address,\n          provider: hwWalletProvider,\n          index: index,\n          signature: loginInfo.signature.hex()\n        });\n      } catch (err) {\n        onLoginFailed(err, '. Update Elrond App to continue.');\n      }\n    } else {\n      try {\n        const address = await hwWalletProvider.login({ addressIndex: index });\n        dispatchLoginActions({\n          address,\n          provider: hwWalletProvider,\n          index\n        });\n      } catch (err) {\n        onLoginFailed(err);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  async function onConfirmSelectedAddress() {\n    try {\n      setIsLoading(true);\n      if (selectedAddress == null) {\n        return false;\n      }\n      const { address, index } = selectedAddress;\n      dispatch(\n        setLedgerAccount({\n          index,\n          address\n        })\n      );\n      const hwWalletProvider = new HWProvider(proxy);\n      const initialized = await hwWalletProvider.init();\n      if (!initialized) {\n        setError(failInitializeErrorText);\n        console.warn(failInitializeErrorText);\n        return false;\n      }\n      setIsLoading(false);\n      await loginUser(hwWalletProvider);\n    } catch (err) {\n      if ((err as any).statusCode in ledgerErrorCodes) {\n        setError((ledgerErrorCodes as any)[(err as any).statusCode].message);\n      }\n      console.warn(failInitializeErrorText, err);\n    } finally {\n      setIsLoading(false);\n    }\n    setShowAddressList(false);\n    return true;\n  }\n\n  async function fetchAccounts() {\n    try {\n      setIsLoading(true);\n      const initialized = await hwWalletP.init();\n      if (!initialized) {\n        setError(failInitializeErrorText);\n        console.warn(failInitializeErrorText);\n        setIsLoading(false);\n        return;\n      }\n      const accounts = await hwWalletP.getAccounts(\n        startIndex,\n        addressesPerPage\n      );\n      setAccounts(accounts);\n      setIsLoading(false);\n    } catch (err) {\n      if ((err as any).statusCode in ledgerErrorCodes) {\n        setError((ledgerErrorCodes as any)[(err as any).statusCode].message);\n      } else {\n        setError(ledgerAppErrorText);\n      }\n      console.error('error', err);\n      setIsLoading(false);\n    }\n  }\n\n  async function onStartLogin() {\n    setError('');\n    try {\n      setIsLoading(true);\n      if (ledgerAccount != null) {\n        const hwWalletP = new HWProvider(proxy);\n        const initialized = await hwWalletP.init();\n        if (!initialized) {\n          console.warn(failInitializeErrorText);\n          return;\n        }\n        const address = await hwWalletP.login({\n          addressIndex: selectedAddress?.index\n        });\n        dispatch(setProvider(hwWalletP));\n        dispatch(\n          loginAction({ address, loginMethod: LoginMethodsEnum.ledger })\n        );\n        optionalRedirect(callbackRoute, redirectAfterLogin);\n      } else {\n        if (accounts?.length > 0) {\n          setShowAddressList(true);\n        } else {\n          await fetchAccounts();\n          setShowAddressList(true);\n        }\n      }\n    } catch (error) {\n      console.error('error ', error);\n      setError(ledgerAppErrorText);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function onSelectAddress(newSelectedAddress: SelectedAddress | null) {\n    setSelectedAddress(newSelectedAddress);\n  }\n\n  function onGoToNextPage() {\n    setSelectedAddress(null);\n    setStartIndex((current) => current + 1);\n  }\n\n  function onGoToPrevPage() {\n    setSelectedAddress(null);\n    setStartIndex((current) => (current === 0 ? 0 : current - 1));\n  }\n\n  React.useEffect(() => {\n    fetchAccounts();\n  }, [startIndex]);\n  const loginFailed = Boolean(error);\n  return [\n    onStartLogin,\n    {\n      loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed,\n      error,\n      isLoading: isLoading && !loginFailed\n    },\n    {\n      accounts,\n      showAddressList,\n      startIndex,\n      selectedAddress,\n\n      onGoToPrevPage,\n      onGoToNextPage,\n      onSelectAddress,\n      onConfirmSelectedAddress\n    }\n  ];\n}\n","import { useRef, useEffect } from 'react';\n\nexport function useUpdateEffect(effect: any, dependencies: any[] = []) {\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      effect();\n    }\n  }, dependencies);\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { WalletConnectProvider } from '@elrondnetwork/erdjs';\n\nimport { useUpdateEffect } from 'hooks/useUpdateEffect';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  isLoggedInSelector,\n  providerSelector,\n  proxySelector,\n  walletConnectBridgeAddressSelector,\n  walletConnectDeepLinkSelector\n} from 'redux/selectors';\nimport {\n  setProvider,\n  setTokenLogin,\n  setTokenLoginSignature,\n  setWalletConnectLogin\n} from 'redux/slices';\n\nimport { LoginMethodsEnum } from 'types/enums';\nimport { logout } from 'utils';\nimport { optionalRedirect } from 'utils/internal';\nimport Timeout = NodeJS.Timeout;\nimport { LoginHookGenericStateType } from '../types';\n\ninterface InitWalletConnectType {\n  callbackRoute: string;\n  logoutRoute: string;\n  token?: string;\n  shouldLoginUser?: boolean;\n  redirectAfterLogin?: boolean;\n}\n\nexport interface WalletConnectLoginHookCustomStateType {\n  uriDeepLink: string | null;\n  walletConnectUri?: string;\n}\n\nexport type WalletConnectLoginHookReturnType = [\n  (loginProvider?: boolean) => void,\n  LoginHookGenericStateType,\n  WalletConnectLoginHookCustomStateType\n];\n\nexport const useWalletConnectLogin = ({\n  callbackRoute,\n  logoutRoute,\n  token,\n  redirectAfterLogin = false\n}: InitWalletConnectType): WalletConnectLoginHookReturnType => {\n  const dispatch = useDispatch();\n  const heartbeatInterval = 15000;\n\n  const [error, setError] = useState<string>('');\n  const [wcUri, setWcUri] = useState<string>('');\n\n  const proxy = useSelector(proxySelector);\n\n  const provider: any = useSelector(providerSelector);\n  const walletConnectBridgeAddress = useSelector(\n    walletConnectBridgeAddressSelector\n  );\n  const walletConnectDeepLink = useSelector(walletConnectDeepLinkSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const providerRef = useRef<any>(provider);\n\n  let heartbeatDisconnectInterval: Timeout;\n\n  const hasWcUri = Boolean(wcUri);\n  const isLoading = !hasWcUri;\n  const uriDeepLink = hasWcUri\n    ? `${walletConnectDeepLink}?wallet-connect=${encodeURIComponent(wcUri)}`\n    : null;\n\n  useEffect(() => {\n    handleHeartbeat();\n\n    const interval = setInterval(() => {\n      handleHeartbeat();\n    }, heartbeatInterval);\n\n    return () => clearInterval(interval);\n  }, [provider]);\n\n  useUpdateEffect(() => {\n    generateWcUri();\n  }, [token]);\n\n  useUpdateEffect(() => {\n    providerRef.current = provider;\n  }, [provider]);\n\n  async function handleHeartbeat() {\n    const isProviderConnected = Boolean(\n      providerRef.current?.walletConnector?.connected\n    );\n    if (!isProviderConnected) {\n      return;\n    }\n\n    const customMessage = {\n      method: 'heartbeat',\n      params: {}\n    };\n\n    try {\n      await providerRef.current.sendCustomMessage(customMessage);\n    } catch (error) {\n      console.error('Connection lost', error);\n      handleOnLogout();\n    }\n  }\n\n  async function handleOnLogin() {\n    try {\n      const provider = providerRef.current;\n      if (isLoggedIn) {\n        return;\n      }\n      if (provider == null) {\n        return;\n      }\n      const address = await provider.getAddress();\n      const signature = await provider.getSignature();\n      const hasSignature = Boolean(signature);\n      const loginActionData = {\n        address: address,\n        loginMethod: LoginMethodsEnum.walletconnect\n      };\n\n      const loginData = {\n        logoutRoute: logoutRoute,\n        loginType: 'walletConnect',\n        callbackRoute: callbackRoute\n      };\n\n      if (hasSignature) {\n        dispatch(setWalletConnectLogin(loginData));\n        dispatch(setTokenLoginSignature(signature));\n      } else {\n        dispatch(setWalletConnectLogin(loginData));\n      }\n      dispatch(loginAction(loginActionData));\n\n      provider.walletConnector.on('heartbeat', () => {\n        clearInterval(heartbeatDisconnectInterval);\n        heartbeatDisconnectInterval = setInterval(() => {\n          console.log('Maiar Wallet Connection Lost');\n          handleOnLogout();\n          clearInterval(heartbeatDisconnectInterval);\n        }, 150000);\n      });\n\n      optionalRedirect(callbackRoute, redirectAfterLogin);\n    } catch (err) {\n      setError('Invalid address');\n      console.error(err);\n    }\n  }\n\n  const handleOnLogout = () => {\n    logout(logoutRoute);\n  };\n\n  async function initiateLogin(loginProvider = true) {\n    const shouldGenerateWcUri = loginProvider && !wcUri;\n    if (\n      !walletConnectBridgeAddress ||\n      (providerRef?.current?.isInitialized?.() && !shouldGenerateWcUri)\n    ) {\n      return;\n    }\n\n    const providerHandlers = {\n      onClientLogin: handleOnLogin,\n      onClientLogout: handleOnLogout\n    };\n\n    const newProvider = new WalletConnectProvider(\n      proxy,\n      walletConnectBridgeAddress,\n      providerHandlers\n    );\n\n    await newProvider.init();\n    dispatch(setProvider(newProvider));\n    providerRef.current = newProvider;\n    if (loginProvider) {\n      generateWcUri();\n    }\n  }\n\n  async function generateWcUri() {\n    if (!walletConnectBridgeAddress) {\n      return;\n    }\n\n    const walletConnectUri: string | undefined =\n      await providerRef.current?.login();\n    const hasUri = Boolean(walletConnectUri);\n\n    if (!hasUri) {\n      return;\n    }\n\n    if (!token) {\n      setWcUri(walletConnectUri as string);\n      return;\n    }\n\n    const wcUriWithToken = `${walletConnectUri}&token=${token}`;\n\n    setWcUri(wcUriWithToken);\n    dispatch(setTokenLogin({ loginToken: token }));\n  }\n\n  const loginFailed = error != null;\n  return [\n    initiateLogin,\n    {\n      error,\n      loginFailed,\n      isLoading: isLoading && !loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed\n    },\n    { uriDeepLink, walletConnectUri: wcUri }\n  ];\n};\n\nexport default useWalletConnectLogin;\n","import {\n  clearSignedTransaction,\n  clearAllTransactionsToSign,\n  clearAllSignedTransactions\n} from 'redux/slices';\nimport { store } from 'redux/store';\n\nexport function removeTransactionsToSign(sessionId: string) {\n  store.dispatch(clearSignedTransaction(sessionId));\n}\nexport function removeSignedTransaction(sessionId: string) {\n  store.dispatch(clearSignedTransaction(sessionId));\n}\n\nexport function removeAllSignedTransactions() {\n  store.dispatch(clearAllSignedTransactions());\n}\n\nexport function removeAllTransactionsToSign() {\n  store.dispatch(clearAllTransactionsToSign());\n}\n","import { operations } from '@elrondnetwork/dapp-utils';\nimport { Transaction } from '@elrondnetwork/erdjs/out';\nimport BigNumber from 'bignumber.js';\nimport { gasPerDataByte, gasPriceModifier } from 'constants/index';\n\nexport function calcTotalFee(transactions: Transaction[], minGasLimit: number) {\n  let totalFee = new BigNumber(0);\n\n  transactions.forEach((tx) => {\n    const fee = operations.calculateFeeLimit({\n      gasPerDataByte,\n      gasPriceModifier,\n      minGasLimit: String(minGasLimit),\n      gasLimit: tx.getGasLimit().valueOf().toString(),\n      gasPrice: tx.getGasPrice().valueOf().toString(),\n      data: tx.getData().toString(),\n      chainId: tx.getChainID().valueOf()\n    });\n    totalFee = totalFee.plus(new BigNumber(fee));\n  });\n\n  return totalFee;\n}\n","import { validation } from '@elrondnetwork/dapp-utils';\nimport BigNumber from 'bignumber.js';\nimport { networkConstants } from 'constants/index';\n\nimport { accountBalanceSelector, chainIDSelector } from 'redux/selectors';\nimport {\n  setTransactionsToSign,\n  setNotificationModal,\n  setTransactionsDisplayInfo\n} from 'redux/slices';\nimport { store } from 'redux/store';\nimport { NotificationTypesEnum, SignTransactionsPropsType } from 'types';\nimport { SendTransactionReturnType } from './sendTransactions';\nimport { calcTotalFee } from './utils';\n\nexport function signTransactions({\n  transactions,\n  callbackRoute,\n  minGasLimit = networkConstants.DEFAULT_MIN_GAS_LIMIT,\n  customTransactionInformation,\n  transactionsDisplayInfo\n}: SignTransactionsPropsType): SendTransactionReturnType {\n  const appState = store.getState();\n  const sessionId = Date.now().toString();\n  const accountBalance = accountBalanceSelector(appState);\n  const storeChainId = chainIDSelector(appState);\n\n  const transactionsPayload = Array.isArray(transactions)\n    ? transactions\n    : [transactions];\n  const bNtotalFee = calcTotalFee(transactionsPayload, minGasLimit);\n  const bNbalance = new BigNumber(\n    validation.stringIsFloat(accountBalance) ? accountBalance : '0'\n  );\n  const hasSufficientFunds = bNbalance.minus(bNtotalFee).isGreaterThan(0);\n\n  if (!hasSufficientFunds) {\n    const notificationPayload = {\n      type: NotificationTypesEnum.warning,\n      iconClassName: 'text-warning',\n      title: 'Insufficient EGLD funds',\n      description: 'Current EGLD balance cannot cover the transaction fees.'\n    };\n\n    store.dispatch(setNotificationModal(notificationPayload));\n    return { error: 'insufficient funds', sessionId: null };\n  }\n\n  const hasValidChainId = transactionsPayload?.every(\n    (tx) => tx.getChainID().valueOf() === storeChainId.valueOf()\n  );\n  if (!hasValidChainId) {\n    const notificationPayload = {\n      type: NotificationTypesEnum.warning,\n      iconClassName: 'text-warning',\n      title: 'Network change detected',\n      description: 'The application tried to change the transaction network'\n    };\n    store.dispatch(setNotificationModal(notificationPayload));\n    return { error: 'Invalid ChainID', sessionId: null };\n  }\n\n  const signTransactionsPayload = {\n    sessionId,\n    callbackRoute,\n    customTransactionInformation,\n    transactions: transactionsPayload.map((tx) => tx.toPlainObject())\n  };\n\n  store.dispatch(setTransactionsToSign(signTransactionsPayload));\n  store.dispatch(\n    setTransactionsDisplayInfo({ sessionId, transactionsDisplayInfo })\n  );\n  return { sessionId };\n}\n\nexport default signTransactions;\n","import {\n  Address,\n  Transaction,\n  TransactionPayload\n} from '@elrondnetwork/erdjs/out';\nimport { defaultGasPrice, defaultGasLimit } from 'constants/index';\nimport newTransaction from 'models/newTransaction';\nimport { addressSelector, chainIDSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { SendSimpleTransactionPropsType } from 'types';\nimport { getAccount, getLatestNonce } from 'utils';\n\nenum ErrorCodesEnum {\n  'invalidReceiver' = 'Invalid Receiver address',\n  'unknownError' = 'Unknown Error. Please check the transactions and try again'\n}\n\nexport async function transformAndSignTransactions({\n  transactions\n}: SendSimpleTransactionPropsType): Promise<Transaction[]> {\n  const address = addressSelector(store.getState());\n  const account = await getAccount(address);\n  const nonce = getLatestNonce(account);\n  return transactions.map((tx) => {\n    const {\n      value,\n      receiver,\n      data = '',\n      chainID,\n      version,\n      options,\n      gasPrice = defaultGasPrice,\n      gasLimit = defaultGasLimit\n    } = tx;\n    let validatedReceiver = receiver;\n\n    try {\n      const addr = new Address(receiver);\n      validatedReceiver = addr.hex();\n    } catch (err) {\n      throw ErrorCodesEnum.invalidReceiver;\n    }\n\n    const storeChainId = chainIDSelector(store.getState()).valueOf().toString();\n    const transactionsChainId = chainID || storeChainId;\n    return newTransaction({\n      value,\n      receiver: validatedReceiver,\n      data: new TransactionPayload(data).toString(),\n      gasPrice,\n      gasLimit,\n      nonce: Number(nonce.valueOf().toString()),\n      sender: new Address(address).hex(),\n      chainID: transactionsChainId,\n      version,\n      options\n    });\n  });\n}\n\nexport default transformAndSignTransactions;\n","import { Transaction } from '@elrondnetwork/erdjs/out';\nimport { SendTransactionsPropsType, SimpleTransactionType } from 'types';\nimport { signTransactions } from './signTransactions';\nimport transformAndSignTransactions from './transformAndSignTransactions';\n\nexport interface SendTransactionReturnType {\n  error?: string;\n  sessionId: string | null;\n}\n\nexport async function sendTransactions({\n  transactions,\n  transactionsDisplayInfo,\n  redirectAfterSign = true,\n  callbackRoute = window.location.pathname,\n  signWithoutSending,\n  sessionInformation,\n  completedThreshold = 1,\n  minGasLimit\n}: SendTransactionsPropsType): Promise<SendTransactionReturnType> {\n  try {\n    const transactionsPayload = Array.isArray(transactions)\n      ? transactions\n      : [transactions];\n\n    const areComplexTransactions = transactionsPayload.every(\n      (tx) => Object.getPrototypeOf(tx).toPlainObject != null\n    );\n    let txToSign = transactionsPayload;\n    if (!areComplexTransactions) {\n      txToSign = await transformAndSignTransactions({\n        transactions: transactionsPayload as SimpleTransactionType[],\n        minGasLimit\n      });\n    }\n\n    return signTransactions({\n      transactions: txToSign as Transaction[],\n      minGasLimit,\n      callbackRoute,\n      transactionsDisplayInfo,\n      customTransactionInformation: {\n        redirectAfterSign,\n        sessionInformation,\n        signWithoutSending,\n        completedThreshold\n      }\n    });\n  } catch (err) {\n    console.error('error signing transaction', err as any);\n    return { error: err as any, sessionId: null };\n  }\n}\n\nexport default sendTransactions;\n","import { useEffect } from 'react';\nimport { useSelector } from 'redux/DappProviderContext';\nimport { transactionStatusSelector } from 'redux/selectors';\nimport { RootState } from 'redux/store';\nimport { TransactionBatchStatusesEnum } from 'types/enums';\nimport {\n  getIsTransactionCompleted,\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionSuccessful,\n  getIsTransactionTimedOut\n} from 'utils';\n\nexport interface UseTrackTransactionStatusArgsType {\n  transactionId: string | null;\n  onSuccess?: (transactionId: string | null) => void;\n  onFail?: (transactionId: string | null, errorMessage?: string) => void;\n  onTimedOut?: (transactionId: string | null) => void;\n  onCancelled?: (transactionId: string | null) => void;\n  onCompleted?: (transactionId: string | null) => void;\n}\n\nexport function useTrackTransactionStatus({\n  transactionId,\n  onSuccess,\n  onFail,\n  onCancelled,\n  onTimedOut,\n  onCompleted\n}: UseTrackTransactionStatusArgsType) {\n  const transactionsBatch = useSelector((state: RootState) =>\n    transactionStatusSelector(state, transactionId)\n  );\n\n  const { status, transactions, errorMessage } = transactionsBatch;\n\n  const isPending = getIsTransactionPending(status);\n  const isFailed = getIsTransactionFailed(status);\n  const isTimedOut = getIsTransactionTimedOut(status);\n  const isSuccessful = getIsTransactionSuccessful(status);\n  const isCompleted = getIsTransactionCompleted(status);\n\n  const isCancelled = status === TransactionBatchStatusesEnum.cancelled;\n\n  useEffect(() => {\n    if (isSuccessful && onSuccess) {\n      onSuccess(transactionId);\n    }\n  }, [isSuccessful]);\n  useEffect(() => {\n    if (isCompleted && onCompleted) {\n      onCompleted(transactionId);\n    }\n  }, [isCompleted]);\n\n  useEffect(() => {\n    if (isFailed && onFail) {\n      onFail(transactionId, errorMessage);\n    }\n  }, [isFailed]);\n\n  useEffect(() => {\n    if (isCancelled && onCancelled) {\n      onCancelled(transactionId);\n    }\n  }, [isCancelled]);\n\n  useEffect(() => {\n    if (isTimedOut) {\n      if (onTimedOut) {\n        onTimedOut(transactionId);\n      } else {\n        onFail?.(transactionId, 'timeout');\n      }\n    }\n  }, [isTimedOut]);\n\n  if (transactionId == null) {\n    return {};\n  }\n\n  if (transactionsBatch == null) {\n    return { errorMessage: 'No transaction to track' };\n  }\n\n  return {\n    isPending,\n    isSuccessful,\n    isFailed,\n    isCancelled,\n    isCompleted,\n    errorMessage,\n    status,\n    transactions\n  };\n}\n\nexport default useTrackTransactionStatus;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { pendingSignedTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetPendingTransactionsReturnType {\n  pendingTransactions: SignedTransactionsType;\n  pendingTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasPendingTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetPendingTransactions(): useGetPendingTransactionsReturnType {\n  const pendingTransactions = useSelector(pendingSignedTransactionsSelector);\n  const pendingTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(pendingTransactions);\n  const hasPendingTransactions = pendingTransactionsArray?.length > 0;\n  return {\n    pendingTransactions,\n    pendingTransactionsArray,\n    hasPendingTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { failedTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetFailedTransactionsReturnType {\n  failedTransactions: SignedTransactionsType;\n  failedTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasFailedTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetFailedTransactions(): useGetFailedTransactionsReturnType {\n  const failedTransactions = useSelector(failedTransactionsSelector);\n  const failedTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(failedTransactions);\n  const hasFailedTransactions = failedTransactionsArray?.length > 0;\n  return {\n    failedTransactions,\n    failedTransactionsArray,\n    hasFailedTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { successfulTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetSuccessfulTransactionsReturnType {\n  successfulTransactions: SignedTransactionsType;\n  successfulTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasSuccessfulTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetSuccessfulTransactions(): useGetSuccessfulTransactionsReturnType {\n  const successfulTransactions = useSelector(successfulTransactionsSelector);\n  const successfulTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(successfulTransactions);\n  const hasSuccessfulTransactions = successfulTransactionsArray?.length > 0;\n  return {\n    successfulTransactions,\n    successfulTransactionsArray,\n    hasSuccessfulTransactions\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { Transaction } from '@elrondnetwork/erdjs';\nimport {\n  MultiSignTxType,\n  TxDataTokenType,\n  TxsDataTokensType\n} from 'types/transactions';\nimport { getTokenFromData } from 'utils';\nimport parseMultiEsdtTransferData from 'utils/transactions/parseMultiEsdtTransferData';\n\nconst defaultTransactionInfo: TxDataTokenType = {\n  tokenId: '',\n  amount: '',\n  type: '',\n  multiTxData: '',\n  receiver: ''\n};\n\ninterface UseParseMultiEsdtTransferDataPropsType {\n  transactions?: Transaction[];\n}\n\ninterface UseParseMultiEsdtTransferDataReturnType {\n  parsedTransactionsByDataField: TxsDataTokensType;\n  getTxInfoByDataField: (\n    data: string,\n    multiTransactionData?: string\n  ) => TxDataTokenType;\n  allTransactions: MultiSignTxType[];\n}\n\nexport function useParseMultiEsdtTransferData({\n  transactions\n}: UseParseMultiEsdtTransferDataPropsType): UseParseMultiEsdtTransferDataReturnType {\n  const [parsedTransactionsByDataField, setParsedTransactions] =\n    useState<TxsDataTokensType>({});\n  const [allTransactions, setAllTransactions] = useState<MultiSignTxType[]>([]);\n\n  function addTransactionDataToParsedInfo(\n    data: string,\n    txInfo: TxDataTokenType\n  ) {\n    setParsedTransactions((existing) => ({\n      ...existing,\n      [data]: txInfo\n    }));\n  }\n\n  function getTxInfoByDataField(\n    data: string,\n    multiTransactionData?: string\n  ): TxDataTokenType {\n    if (parsedTransactionsByDataField == null) {\n      return defaultTransactionInfo;\n    }\n\n    if (data in parsedTransactionsByDataField) {\n      return parsedTransactionsByDataField[data];\n    }\n\n    if (\n      multiTransactionData != null &&\n      String(multiTransactionData) in parsedTransactionsByDataField\n    ) {\n      return parsedTransactionsByDataField[multiTransactionData];\n    }\n\n    return defaultTransactionInfo;\n  }\n\n  function extractTransactionESDTData() {\n    if (transactions && transactions.length > 0) {\n      const allTransactions: MultiSignTxType[] = [];\n      transactions.forEach((transaction, transactionIndex) => {\n        const multiTxs = parseMultiEsdtTransferData(\n          transaction.getData().toString()\n        );\n\n        if (multiTxs.length > 0) {\n          multiTxs.forEach((trx, idx) => {\n            const newTx: MultiSignTxType = {\n              transaction,\n              multiTxData: trx.data,\n              transactionIndex: idx\n            };\n            addTransactionDataToParsedInfo(trx.data, {\n              tokenId: trx.token ? trx.token : '',\n              amount: trx.amount ? trx.amount : '',\n              type: trx.type,\n              nonce: trx.nonce ? trx.nonce : '',\n              multiTxData: trx.data,\n              receiver: trx.receiver\n            });\n            allTransactions.push(newTx);\n          });\n        } else {\n          const { tokenId, amount } = getTokenFromData(\n            transaction.getData().toString()\n          );\n\n          if (tokenId) {\n            addTransactionDataToParsedInfo(transaction.getData().toString(), {\n              tokenId,\n              amount,\n              receiver: transaction.getReceiver().bech32()\n            });\n          }\n          allTransactions.push({ transaction, transactionIndex });\n        }\n      });\n      setAllTransactions(allTransactions);\n    }\n  }\n\n  useEffect(() => {\n    extractTransactionESDTData();\n  }, [transactions]);\n\n  return {\n    parsedTransactionsByDataField,\n    getTxInfoByDataField,\n    allTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport {\n  completedTransactionsSelector,\n  failedTransactionsSelector,\n  pendingSignedTransactionsSelector,\n  signedTransactionsSelector,\n  successfulTransactionsSelector,\n  timedOutTransactionsSelector\n} from 'redux/selectors';\n\ninterface useGetActiveTransactionsStatusReturnType {\n  pending: boolean;\n  timedOut: boolean;\n  fail: boolean;\n  success: boolean;\n  completed: boolean;\n  hasActiveTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetActiveTransactionsStatus(): useGetActiveTransactionsStatusReturnType {\n  const signedTransactions = useSelector(signedTransactionsSelector);\n  const timedOutTransactions = useSelector(timedOutTransactionsSelector);\n  const failedTransactions = useSelector(failedTransactionsSelector);\n  const successfulTransactions = useSelector(successfulTransactionsSelector);\n  const pendingTransactions = useSelector(pendingSignedTransactionsSelector);\n  const completedTransactions = useSelector(completedTransactionsSelector);\n\n  const pending = Object.keys(pendingTransactions)?.length > 0;\n\n  const timedOut = !pending && Object.keys(timedOutTransactions)?.length > 0;\n\n  const fail =\n    !pending && !timedOut && Object.keys(failedTransactions)?.length > 0;\n\n  const success =\n    !pending &&\n    !timedOut &&\n    !fail &&\n    Object.keys(successfulTransactions).length > 0;\n\n  const completed =\n    !pending &&\n    !timedOut &&\n    !fail &&\n    Object.keys(completedTransactions).length > 0;\n  const hasActiveTransactions = Object.keys(signedTransactions).length > 0;\n  return {\n    pending,\n    timedOut,\n    fail,\n    success,\n    completed,\n    hasActiveTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { completedTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetCompletedTransactionsReturnType {\n  completedTransactions: SignedTransactionsType;\n  completedTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasCompletedTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetCompletedTransactions(): useGetCompletedTransactionsReturnType {\n  const completedTransactions = useSelector(completedTransactionsSelector);\n  const completedTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(completedTransactions);\n  const hasCompletedTransactions = completedTransactionsArray?.length > 0;\n  return {\n    completedTransactions,\n    completedTransactionsArray,\n    hasCompletedTransactions\n  };\n}\n","import { Transaction } from '@elrondnetwork/erdjs';\nimport axios from 'axios';\nimport { networkSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport type SendSignedTransactionsReturnType = string[];\n\nexport async function sendSignedTransactions(\n  signedTransactions: Transaction[]\n): Promise<SendSignedTransactionsReturnType> {\n  const { apiAddress, apiTimeout } = networkSelector(store.getState());\n  const promises = signedTransactions.map((transaction) => {\n    return axios.post(\n      `${apiAddress}/transactions`,\n      transaction.toPlainObject(),\n      { timeout: parseInt(apiTimeout) }\n    );\n  });\n  const response = await Promise.all(promises);\n\n  return response.map(({ data }) => data.txHash);\n}\n","import { TransactionPayload } from '@elrondnetwork/erdjs/out';\nimport axios from 'axios';\nimport { networkConfigSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { SmartContractResult, TransactionServerStatusesEnum } from 'types';\n\nexport type GetTransactionsByHashesReturnType = {\n  hash: string;\n  invalidTransaction: boolean;\n  status: TransactionServerStatusesEnum;\n  results: SmartContractResult[];\n  sender: string;\n  receiver: string;\n  data: string;\n  previousStatus: string;\n  hasStatusChanged: boolean;\n}[];\n\nexport type PendingTransactionsType = {\n  hash: string;\n  previousStatus: string;\n}[];\n\nexport async function getTransactionsByHashes(\n  pendingTransactions: PendingTransactionsType\n): Promise<GetTransactionsByHashesReturnType> {\n  const networkConfig = networkConfigSelector(store.getState());\n  const hashes = pendingTransactions.map((tx) => tx.hash);\n  const { data: responseData } = await axios.get(\n    `${networkConfig.network.apiAddress}/transactions`,\n    {\n      params: {\n        hashes: hashes.join(','),\n        withScResults: true\n      }\n    }\n  );\n  return pendingTransactions.map(({ hash, previousStatus }) => {\n    const txOnNetwork = responseData.find(\n      (txResponse: any) => txResponse.txHash === hash\n    );\n    const data = TransactionPayload.fromEncoded(txOnNetwork?.data).toString();\n\n    return {\n      hash,\n      data,\n      invalidTransaction: txOnNetwork == null,\n      status: txOnNetwork.status,\n      results: txOnNetwork.results,\n      sender: txOnNetwork.sender,\n      receiver: txOnNetwork?.receiver,\n      previousStatus,\n      hasStatusChanged: status !== previousStatus\n    };\n  });\n}\n","import { useEffect } from 'react';\nimport { HWProvider, ExtensionProvider } from '@elrondnetwork/erdjs';\nimport { NetworkConfig } from '@elrondnetwork/erdjs/out/networkConfig';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  loginMethodSelector,\n  walletConnectLoginSelector,\n  networkSelector,\n  proxySelector,\n  walletLoginSelector,\n  addressSelector,\n  ledgerAccountSelector,\n  ledgerLoginSelector,\n  isLoggedInSelector\n} from 'redux/selectors';\nimport { extraActionsSelector } from 'redux/selectors/extraActionsSelectors';\nimport {\n  setAccount,\n  setIsAccountLoading,\n  setAccountLoadingError,\n  setLedgerAccount,\n  setProvider,\n  setWalletLogin,\n  setChainID\n} from 'redux/slices';\nimport { useWalletConnectLogin } from 'services/login/useWalletConnectLogin';\nimport { LoginMethodsEnum } from 'types/enums';\nimport {\n  newWalletProvider,\n  getAddress,\n  getAccount,\n  getLatestNonce,\n  logout\n} from 'utils';\n\nexport default function ProviderInitializer() {\n  const network = useSelector(networkSelector);\n  const walletConnectLogin = useSelector(walletConnectLoginSelector);\n  const loginMethod = useSelector(loginMethodSelector);\n  const walletLogin = useSelector(walletLoginSelector);\n  const { getProvider } = useSelector(extraActionsSelector);\n  const address = useSelector(addressSelector);\n  const ledgerAccount = useSelector(ledgerAccountSelector);\n  const ledgerLogin = useSelector(ledgerLoginSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n\n  const proxy = useSelector(proxySelector);\n  const dispatch = useDispatch();\n\n  const { callbackRoute, logoutRoute } = walletConnectLogin\n    ? walletConnectLogin\n    : { callbackRoute: '', logoutRoute: '' };\n\n  const [initWalletLoginProvider] = useWalletConnectLogin({\n    callbackRoute,\n    logoutRoute\n  });\n\n  useEffect(() => {\n    refreshChainID();\n  }, [network]);\n\n  useEffect(() => {\n    initializeProvider();\n  }, [loginMethod]);\n\n  useEffect(() => {\n    fetchAccount();\n  }, [address, ledgerLogin, isLoggedIn]);\n\n  function refreshChainID() {\n    proxy\n      .getNetworkConfig()\n      .then((networkConfig: NetworkConfig) => {\n        dispatch(setChainID(networkConfig.ChainID.valueOf()));\n      })\n      .catch((e: any) => {\n        console.error('To do ', e);\n      });\n  }\n\n  async function fetchAccount() {\n    dispatch(setIsAccountLoading(true));\n    if (address && isLoggedIn) {\n      try {\n        const account = await getAccount(address);\n        dispatch(\n          setAccount({\n            balance: account.balance.toString(),\n            address,\n            nonce: account.nonce.valueOf()\n          })\n        );\n        if (ledgerAccount == null && ledgerLogin != null) {\n          dispatch(\n            setLedgerAccount({\n              index: ledgerLogin.index,\n              address\n            })\n          );\n        }\n      } catch (e) {\n        dispatch(setAccountLoadingError('Failed getting account'));\n        console.error('Failed getting account ', e);\n      }\n    }\n    dispatch(setIsAccountLoading(false));\n  }\n\n  async function tryAuthenticateWalletUser() {\n    try {\n      if (walletLogin != null) {\n        const provider = newWalletProvider(network.walletAddress);\n        const address = await getAddress();\n        if (address) {\n          dispatch(setProvider(provider));\n          dispatch(\n            loginAction({ address, loginMethod: LoginMethodsEnum.wallet })\n          );\n          const account = await getAccount(address);\n          dispatch(\n            setAccount({\n              balance: account.balance.toString(),\n              address,\n              nonce: getLatestNonce(account)\n            })\n          );\n        }\n        dispatch(setWalletLogin(null));\n      }\n    } catch (e) {\n      console.error('Failed authenticating wallet user ', e);\n    }\n  }\n\n  async function setLedgerProvider() {\n    try {\n      const hwWalletP = new HWProvider(proxy);\n\n      const isInitializationSuccessful = await hwWalletP.init();\n      if (ledgerLogin?.index != null) {\n        hwWalletP.addressIndex = ledgerLogin.index;\n      }\n      if (!isInitializationSuccessful) {\n        console.warn('Could not initialise ledger app');\n        logout();\n        return;\n      }\n\n      dispatch(setProvider(hwWalletP));\n    } catch (err) {\n      console.error('Could not initialise ledger app', err);\n      logout();\n    }\n  }\n\n  async function setExtensionProvider() {\n    try {\n      const address = await getAddress();\n      const provider = ExtensionProvider.getInstance().setAddress(address);\n      const success = await provider.init();\n\n      if (success) {\n        dispatch(setProvider(provider));\n      } else {\n        console.error(\n          'Could not initialise extension, make sure Elrond wallet extension is installed.'\n        );\n      }\n    } catch (err) {\n      console.error('Unable to login to ExtensionProvider', err);\n    }\n  }\n\n  function initializeProvider() {\n    if (loginMethod == null) {\n      return;\n    }\n    switch (loginMethod) {\n      case LoginMethodsEnum.ledger: {\n        setLedgerProvider();\n        break;\n      }\n\n      case LoginMethodsEnum.walletconnect: {\n        initWalletLoginProvider(false);\n        break;\n      }\n      case LoginMethodsEnum.wallet: {\n        const provider = newWalletProvider(network.walletAddress);\n        dispatch(setProvider(provider));\n        break;\n      }\n\n      case LoginMethodsEnum.extension: {\n        setExtensionProvider();\n        break;\n      }\n\n      case LoginMethodsEnum.extra: {\n        const provider = getProvider();\n        dispatch(setProvider(provider));\n        break;\n      }\n\n      case LoginMethodsEnum.none: {\n        tryAuthenticateWalletUser();\n        break;\n      }\n      default:\n        return;\n    }\n  }\n\n  return null;\n}\n","import React from 'react';\nimport {\n  getTransactionsByHashes,\n  sendSignedTransactions\n} from 'apiCalls/transactions';\nimport { OverrideDefaultBehaviourContextValueType } from './types';\n\nconst defaultValue: OverrideDefaultBehaviourContextValueType = {\n  sendSignedTransactionsAsync: sendSignedTransactions,\n  getTransactionsByHash: getTransactionsByHashes,\n  completedTransactionsDelay: 0\n};\n\nconst OverrideDefaultBehaviourContext = React.createContext(defaultValue);\n\nexport default OverrideDefaultBehaviourContext;\n","import React, { useContext, useRef } from 'react';\nimport { Address } from '@elrondnetwork/erdjs';\nimport { Signature } from '@elrondnetwork/erdjs/out/signature';\n\nimport OverrideDefaultBehaviourContext from 'contexts/OverrideDefaultBehaviourContext';\nimport newTransaction from 'models/newTransaction';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { signedTransactionsSelector } from 'redux/selectors';\nimport { accountSelector } from 'redux/selectors';\nimport {\n  setTxSubmittedModal,\n  clearAllTransactionsToSign,\n  updateSignedTransactions\n} from 'redux/slices';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\nimport { setNonce } from 'utils';\n\nconst TransactionSender = () => {\n  const account = useSelector(accountSelector);\n  const signedTransactions = useSelector(signedTransactionsSelector);\n  const { sendSignedTransactionsAsync } = useContext(\n    OverrideDefaultBehaviourContext\n  );\n  const sendingRef = useRef(false);\n\n  const dispatch = useDispatch();\n\n  const clearSignInfo = () => {\n    dispatch(clearAllTransactionsToSign());\n    sendingRef.current = false;\n  };\n  async function handleSendTransactions() {\n    const sessionIds = Object.keys(signedTransactions);\n    for (const sessionId of sessionIds) {\n      const skipSending =\n        signedTransactions?.[sessionId]?.customTransactionInformation\n          ?.signWithoutSending;\n\n      if (!sessionId || skipSending) {\n        continue;\n      }\n\n      try {\n        const isSessionIdSigned =\n          signedTransactions[sessionId].status ===\n          TransactionBatchStatusesEnum.signed;\n        const shouldSendCurrentSession =\n          isSessionIdSigned && !sendingRef.current;\n        if (!shouldSendCurrentSession) {\n          continue;\n        }\n        const { transactions } = signedTransactions[sessionId];\n\n        if (!transactions) {\n          continue;\n        }\n        sendingRef.current = true;\n        const transactionsToSend = transactions.map((tx) => {\n          const address = new Address(tx.sender);\n          const transactionObject = newTransaction(tx);\n          const signature = new Signature(tx.signature);\n\n          transactionObject.applySignature(signature, address);\n          return transactionObject;\n        });\n        const responseHashes = await sendSignedTransactionsAsync(\n          transactionsToSend\n        );\n\n        const newStatus = TransactionServerStatusesEnum.pending;\n        const newTransactions = transactions.map((transaction) => {\n          if (responseHashes.includes(transaction.hash)) {\n            return { ...transaction, status: newStatus };\n          }\n\n          return transaction;\n        });\n\n        const submittedModalPayload = {\n          sessionId,\n          submittedMessage: 'submitted'\n        };\n\n        dispatch(setTxSubmittedModal(submittedModalPayload));\n        dispatch(\n          updateSignedTransactions({\n            sessionId,\n            status: TransactionBatchStatusesEnum.sent,\n            transactions: newTransactions\n          })\n        );\n        clearSignInfo();\n        setNonce(account.nonce + transactions.length);\n\n        history.pushState({}, document.title, '?');\n      } catch (error) {\n        console.error('Unable to send transactions', error);\n        dispatch(\n          updateSignedTransactions({\n            sessionId,\n            status: TransactionBatchStatusesEnum.fail,\n            errorMessage: (error as any).message\n          })\n        );\n        clearSignInfo();\n      } finally {\n        sendingRef.current = false;\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    handleSendTransactions();\n  }, [signedTransactions, account]);\n\n  return null;\n};\n\nexport default TransactionSender;\n","import { useContext, useEffect, useRef } from 'react';\nimport OverrideDefaultBehaviourContext from 'contexts/OverrideDefaultBehaviourContext';\nimport { useDispatch } from 'redux/DappProviderContext';\nimport {\n  updateSignedTransactions,\n  updateSignedTransactionStatus\n} from 'redux/slices';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\nimport { SignedTransactionsBodyType } from 'types/transactions';\nimport {\n  getIsTransactionCompleted,\n  getIsTransactionFailed,\n  getIsTransactionPending\n} from 'utils';\nimport { refreshAccount } from 'utils/account';\nimport { isContract, areScCallsSuccessful } from 'utils/smartContracts';\n\ninterface RetriesType {\n  [hash: string]: number;\n}\n\ninterface TransactionStatusTrackerPropsType {\n  sessionId: string;\n  transactionPayload: SignedTransactionsBodyType;\n}\n\nexport function TransactionStatusTracker({\n  sessionId,\n  transactionPayload: { transactions, status, customTransactionInformation }\n}: TransactionStatusTrackerPropsType) {\n  const dispatch = useDispatch();\n  const intervalRef = useRef<any>(null);\n  const isFetchingStatusRef = useRef(false);\n  const retriesRef = useRef<RetriesType>({});\n  const timeoutRefs = useRef<string[]>([]);\n  const { getTransactionsByHash, completedTransactionsDelay } = useContext(\n    OverrideDefaultBehaviourContext\n  );\n\n  const isPending = sessionId != null && getIsTransactionPending(status);\n  const manageTimedOutTransactions = () => {\n    dispatch(\n      updateSignedTransactions({\n        sessionId,\n        status: TransactionBatchStatusesEnum.timedOut\n      })\n    );\n  };\n\n  const checkTransactionStatus = async () => {\n    try {\n      if (!isPending || transactions == null) {\n        return;\n      }\n      isFetchingStatusRef.current = true;\n\n      const pendingTransactions = transactions.reduce(\n        (\n          acc: { hash: string; previousStatus: string }[],\n          { receiver, sender, data, status, hash }\n        ) => {\n          const isScCall = isContract(receiver, sender, data);\n          if (\n            hash != null &&\n            !timeoutRefs.current.includes(hash) &&\n            getIsTransactionPending(status, isScCall)\n          ) {\n            acc.push({ hash, previousStatus: status });\n          }\n          return acc;\n        },\n        []\n      );\n\n      if (pendingTransactions?.length === 0) {\n        isFetchingStatusRef.current = false;\n        return;\n      }\n      const serverTransactions = await getTransactionsByHash(\n        pendingTransactions\n      );\n      for (const {\n        hash,\n        status,\n        results,\n        invalidTransaction,\n        receiver,\n        sender,\n        data,\n        hasStatusChanged\n      } of serverTransactions) {\n        try {\n          const isScCall = isContract(receiver, sender, data);\n          const retriesForThisHash = retriesRef.current[hash];\n          if (retriesForThisHash > 30) {\n            // consider transaction as stuck after 1 minute\n            manageTimedOutTransactions();\n            return;\n          }\n          if (!invalidTransaction) {\n            if (!getIsTransactionPending(status)) {\n              if (isScCall && !getIsTransactionCompleted(status)) {\n                const isScCallCompleted = areScCallsSuccessful(\n                  results,\n                  customTransactionInformation?.completedThreshold\n                );\n                if (isScCallCompleted) {\n                  timeoutRefs.current.push(hash);\n                  setTimeout(\n                    () =>\n                      dispatch(\n                        updateSignedTransactionStatus({\n                          sessionId,\n                          status: TransactionServerStatusesEnum.completed,\n                          transactionHash: hash\n                        })\n                      ),\n                    completedTransactionsDelay\n                  );\n                }\n              }\n\n              if (hasStatusChanged) {\n                dispatch(\n                  updateSignedTransactionStatus({\n                    sessionId,\n                    status,\n                    transactionHash: hash\n                  })\n                );\n              }\n\n              refreshAccount();\n\n              if (getIsTransactionFailed(status)) {\n                const resultWithError = results.find(\n                  (scResult) => scResult?.returnMessage !== ''\n                );\n\n                dispatch(\n                  updateSignedTransactionStatus({\n                    transactionHash: hash,\n                    sessionId,\n                    status: TransactionServerStatusesEnum.fail,\n                    errorMessage: resultWithError?.returnMessage\n                  })\n                );\n                dispatch(\n                  updateSignedTransactions({\n                    sessionId,\n                    status: TransactionBatchStatusesEnum.fail,\n                    errorMessage: resultWithError?.returnMessage\n                  })\n                );\n              }\n            } else {\n              retriesRef.current[hash] = retriesRef.current[hash]\n                ? retriesRef.current[hash] + 1\n                : 1;\n            }\n          } else {\n            retriesRef.current[hash] = retriesRef.current[hash]\n              ? retriesRef.current[hash] + 1\n              : 1;\n          }\n        } catch (error) {\n          console.error(error);\n          manageTimedOutTransactions();\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    if (isPending) {\n      intervalRef.current = setInterval(() => {\n        checkTransactionStatus();\n      }, 2000);\n    } else {\n      clearInterval(intervalRef.current);\n    }\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [isPending]);\n  return null;\n}\n\nexport default TransactionStatusTracker;\n","import React from 'react';\nimport { useGetPendingTransactions } from 'services/transactions';\nimport { SignedTransactionsBodyType } from 'types/transactions';\nimport TransactionStatusTracker from './TransactionStatusTracker';\n\nexport function TransactionsTracker() {\n  const { pendingTransactionsArray } = useGetPendingTransactions();\n\n  const mappedPendingTransactionsTrackers = pendingTransactionsArray.map(\n    ([sessionId, transactionPayload]) => (\n      <TransactionStatusTracker\n        key={sessionId}\n        sessionId={sessionId}\n        transactionPayload={transactionPayload as SignedTransactionsBodyType}\n      />\n    )\n  );\n\n  return <React.Fragment>{mappedPendingTransactionsTrackers}</React.Fragment>;\n}\n\nexport default TransactionsTracker;\n","import axios from 'axios';\nimport { configEndpoint } from 'constants/network';\nimport { EnvironmentsEnum } from 'types';\n\nexport async function getServerConfigurationForEnvironment(\n  environment: EnvironmentsEnum\n) {\n  try {\n    const { data } = await axios.get(configEndpoint[environment]);\n    if (data != null) {\n      return data;\n    }\n  } catch (err) {\n    console.error('error fetching configuration for ', environment);\n    return null;\n  }\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { networkConfigSelector } from 'redux/selectors';\n\nexport const useGetNetworkConfig = () => {\n  return useSelector(networkConfigSelector);\n};\n\nexport default useGetNetworkConfig;\n","import { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { notificationModalSelector } from 'redux/selectors';\nimport { clearNotificationModal } from 'redux/slices';\n\nexport function useGetNotification() {\n  const notification = useSelector(notificationModalSelector);\n  const dispatch = useDispatch();\n  const clearNotification = () => dispatch(clearNotificationModal());\n  return { notification, clearNotification };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { transactionDisplayInfoSelector } from 'redux/selectors';\nimport { RootState } from 'redux/store';\n\nexport function useGetTransactionDisplayInfo(toastId: string | null) {\n  return useSelector((state: RootState) =>\n    transactionDisplayInfoSelector(state, toastId)\n  );\n}\n","import React from 'react';\nimport { WalletProvider } from '@elrondnetwork/erdjs';\nimport qs from 'qs';\nimport { dappInitRoute, walletSignSession } from 'constants/index';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { networkSelector } from 'redux/selectors';\nimport { moveTransactionsToSignedState } from 'redux/slices';\nimport { TransactionBatchStatusesEnum } from 'types/enums';\nimport { parseTransactionAfterSigning } from 'utils';\n\nexport function useParseSignedTransactions() {\n  const { search } = window.location;\n  const network = useSelector(networkSelector);\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    if (search != null) {\n      const searchData = qs.parse(search.replace('?', ''));\n\n      if (searchData && walletSignSession in searchData) {\n        const signSessionId: number = (searchData as any)[walletSignSession];\n        const signedTransactions = new WalletProvider(\n          `${network.walletAddress}${dappInitRoute}`\n        ).getTransactionsFromWalletUrl();\n        if (signedTransactions.length > 0) {\n          dispatch(\n            moveTransactionsToSignedState({\n              sessionId: signSessionId.toString(),\n              status: TransactionBatchStatusesEnum.signed,\n              transactions: signedTransactions.map((tx) =>\n                parseTransactionAfterSigning(tx)\n              )\n            })\n          );\n          history.pushState({}, document.title, '?');\n        }\n      }\n    }\n  }, [search]);\n}\n\nexport default useParseSignedTransactions;\n","import { useEffect, useRef, useState } from 'react';\nimport {\n  Address,\n  Nonce,\n  Transaction,\n  ExtensionProvider\n} from '@elrondnetwork/erdjs';\n\nimport { errorsMessages, walletSignSession } from 'constants/index';\nimport { useParseSignedTransactions } from 'hooks/transactions/useParseSignedTransactions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  addressSelector,\n  providerSelector,\n  proxySelector,\n  transactionsToSignSelector\n} from 'redux/selectors';\nimport {\n  clearAllTransactionsToSign,\n  clearTransactionsInfoForSessionId,\n  moveTransactionsToSignedState\n} from 'redux/slices';\nimport { LoginMethodsEnum, TransactionBatchStatusesEnum } from 'types/enums';\nimport {\n  getLatestNonce,\n  getProviderType,\n  builtCallbackUrl,\n  parseTransactionAfterSigning\n} from 'utils';\n\nexport const useSignTransactions = () => {\n  const dispatch = useDispatch();\n  const savedCallback = useRef('/');\n  const proxy = useSelector(proxySelector);\n  const address = useSelector(addressSelector);\n  const provider = useSelector(providerSelector);\n  const providerType = getProviderType(provider);\n  const [error, setError] = useState<string | null>(null);\n  const transactionsToSign = useSelector(transactionsToSignSelector);\n  const hasTransactions = Boolean(transactionsToSign?.transactions);\n\n  useParseSignedTransactions();\n\n  const onAbort = (sessionId?: string) => {\n    setError(null);\n    clearSignInfo(sessionId);\n  };\n\n  const clearSignInfo = (sessionId?: string) => {\n    const isExtensionProvider = provider instanceof ExtensionProvider;\n\n    dispatch(clearAllTransactionsToSign());\n    dispatch(clearTransactionsInfoForSessionId(sessionId));\n\n    if (!isExtensionProvider) {\n      return;\n    }\n\n    ExtensionProvider.getInstance()?.cancelAction?.();\n  };\n\n  const onCancel = (errorMessage: string, sessionId?: string) => {\n    const isTxCancelled = errorMessage !== errorsMessages.TRANSACTION_CANCELLED;\n\n    clearSignInfo(sessionId);\n\n    /*\n     * this is triggered by abort action,\n     * so no need to show error again\n     */\n    if (!isTxCancelled) {\n      return;\n    }\n\n    setError(errorMessage);\n  };\n\n  const signWithWallet = (\n    transactions: Array<Transaction>,\n    sessionId: string,\n    callbackRoute = ''\n  ) => {\n    const urlParams = { [walletSignSession]: sessionId };\n    const callbackUrl = `${window.location.origin}${callbackRoute}`;\n    const buildedCallbackUrl = builtCallbackUrl({ callbackUrl, urlParams });\n\n    provider.signTransactions(transactions, {\n      callbackUrl: encodeURIComponent(buildedCallbackUrl)\n    });\n  };\n\n  const signTransactionsWithProvider = async () => {\n    const {\n      sessionId,\n      transactions,\n      callbackRoute,\n      customTransactionInformation\n    } = transactionsToSign!;\n    const { redirectAfterSign } = customTransactionInformation;\n    const redirectRoute = callbackRoute || window.location.pathname;\n    const isCurrentRoute = window.location.pathname.includes(redirectRoute);\n    const shouldRedirectAfterSign = redirectAfterSign && !isCurrentRoute;\n\n    try {\n      const isProviderInitialized = await provider.init();\n\n      if (!isProviderInitialized) {\n        return;\n      }\n    } catch (error) {\n      const errorMessage =\n        (error as unknown as Error)?.message ||\n        (error as string) ||\n        errorsMessages.PROVIDER_NOT_INTIALIZED;\n      console.error(errorsMessages.PROVIDER_NOT_INTIALIZED, errorMessage);\n      onCancel(errorMessage);\n      return;\n    }\n\n    try {\n      const signedTransactions = await provider.signTransactions(transactions);\n      const hasSameTransactions =\n        Object.keys(signedTransactions).length === transactions.length;\n      const hasAllTransactionsSigned =\n        signedTransactions && hasSameTransactions;\n      const shouldMoveTransactionsToSignedState =\n        signedTransactions && hasAllTransactionsSigned;\n\n      if (!shouldMoveTransactionsToSignedState) {\n        return;\n      }\n\n      const signedTransactionsArray = Object.values(signedTransactions).map(\n        (tx: any) => parseTransactionAfterSigning(tx)\n      );\n\n      dispatch(\n        moveTransactionsToSignedState({\n          sessionId,\n          transactions: signedTransactionsArray,\n          status: TransactionBatchStatusesEnum.signed\n        })\n      );\n\n      if (shouldRedirectAfterSign) {\n        window.location.href = redirectRoute;\n      }\n    } catch (err) {\n      const errorMessage =\n        (error as unknown as Error)?.message ||\n        (error as string) ||\n        errorsMessages.ERROR_SIGNING_TX;\n      console.error(errorsMessages.ERROR_SIGNING_TX, errorMessage);\n      onCancel(errorMessage, sessionId);\n    }\n  };\n\n  const signTransactions = async () => {\n    if (!transactionsToSign) {\n      return;\n    }\n\n    const { sessionId, transactions, callbackRoute } = transactionsToSign;\n\n    if (!provider) {\n      console.error(errorsMessages.MISSING_PROVIDER_MESSAGE);\n      return;\n    }\n\n    /*\n     * if the transaction is cancelled\n     * the callback will go to undefined,\n     * we save the most recent one for a valid transaction\n     */\n    savedCallback.current = callbackRoute || window.location.pathname;\n\n    const setTransactionNonces = (\n      latestNonce: number,\n      transactions: Array<Transaction>\n    ): Array<Transaction> => {\n      return transactions.map((tx: Transaction, index: number) => {\n        tx.setNonce(new Nonce(latestNonce + index));\n\n        return tx;\n      });\n    };\n\n    try {\n      const proxyAccount = await proxy.getAccount(new Address(address));\n      const isSigningWithWebWallet = providerType === LoginMethodsEnum.wallet;\n\n      const isSigningWithProvider =\n        providerType === LoginMethodsEnum.extension ||\n        providerType === LoginMethodsEnum.walletconnect;\n\n      const latestNonce = getLatestNonce(proxyAccount);\n      const mappedTransactions = setTransactionNonces(\n        latestNonce,\n        transactions\n      );\n\n      if (isSigningWithWebWallet) {\n        signWithWallet(mappedTransactions, sessionId, callbackRoute);\n      }\n      if (isSigningWithProvider) {\n        signTransactionsWithProvider();\n      }\n    } catch (err) {\n      const defaultErrorMessage = (error as unknown as Error)?.message;\n      const errorMessage = defaultErrorMessage || errorsMessages.ERROR_SIGNING;\n      onCancel(errorMessage, sessionId);\n\n      dispatch(\n        moveTransactionsToSignedState({\n          sessionId,\n          status: TransactionBatchStatusesEnum.cancelled\n        })\n      );\n\n      console.error(errorMessage, err);\n    }\n  };\n\n  useEffect(() => {\n    signTransactions();\n  }, [transactionsToSign]);\n\n  return {\n    error,\n    onAbort,\n    hasTransactions,\n    callbackRoute: savedCallback.current,\n    sessionId: transactionsToSign?.sessionId,\n    transactions: transactionsToSign?.transactions\n  };\n};\n\nexport default useSignTransactions;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { signedTransactionsSelector } from 'redux/selectors';\n\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetSignedTransactionsReturnType {\n  signedTransactions: SignedTransactionsType;\n  signedTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasSignedTransactions: boolean;\n}\n\nexport function useGetSignedTransactions(): useGetSignedTransactionsReturnType {\n  const signedTransactions = useSelector(signedTransactionsSelector);\n  const signedTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(signedTransactions);\n  const hasSignedTransactions = signedTransactionsArray?.length > 0;\n  return {\n    signedTransactions,\n    signedTransactionsArray,\n    hasSignedTransactions\n  };\n}\n","let swr: any = {};\ntry {\n  swr = require('swr').default;\n} catch (err) {}\n\nexport default swr;\n","import axios from 'axios';\nimport useGetNetworkConfig from 'hooks/useGetNetworkConfig';\n\nimport useSwr from 'optionalPackages/swr';\n\ninterface TokenOptionType {\n  tokenLabel: string;\n  tokenDenomination: number;\n  tokenAvatar: string;\n  error?: string;\n}\n\ninterface TokenInfoResponse {\n  identifier: string;\n  name: string;\n  ticker: string;\n  decimals: number;\n  assets: {\n    description: string;\n    status: string;\n    svgUrl: string;\n  };\n}\n\nconst fetcher = (url: string) =>\n  axios.get(url).then((response) => response.data);\n\nexport function useGetTokenDetails({\n  tokenId\n}: {\n  tokenId: string;\n}): TokenOptionType {\n  const { network } = useGetNetworkConfig();\n\n  const {\n    data: selectedToken,\n    error\n  }: { data?: TokenInfoResponse; error?: string } = useSwr(\n    Boolean(tokenId) ? `${network.apiAddress}/tokens/${tokenId}` : null,\n    fetcher\n  );\n\n  if (!tokenId) {\n    return {\n      tokenDenomination: Number(network.egldDenomination),\n      tokenLabel: '',\n      tokenAvatar: ''\n    };\n  }\n\n  const tokenDenomination = selectedToken\n    ? selectedToken?.decimals\n    : Number(network.egldDenomination);\n  const tokenLabel = selectedToken ? selectedToken?.name : '';\n  const tokenAvatar = selectedToken ? `${selectedToken?.assets?.svgUrl}` : '';\n\n  return { tokenDenomination, tokenLabel, tokenAvatar, error };\n}\n\nexport default useGetTokenDetails;\n","import { useEffect, useState } from 'react';\nimport { Transaction } from '@elrondnetwork/erdjs';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  egldLabelSelector,\n  providerSelector,\n  transactionsToSignSelector\n} from 'redux/selectors';\nimport {\n  clearAllTransactionsToSign,\n  moveTransactionsToSignedState,\n  setSignTransactionsError\n} from 'redux/slices/transactionsSlice';\nimport { useParseMultiEsdtTransferData } from 'services/transactions/hooks/useParseMultiEsdtTransferData';\nimport { ActiveLedgerTransactionType, MultiSignTxType } from 'types';\nimport { LoginMethodsEnum, TransactionBatchStatusesEnum } from 'types/enums';\nimport { getIsProviderEqualTo, isTokenTransfer } from 'utils';\nimport { parseTransactionAfterSigning } from 'utils';\n\ninterface UseSignTransactionsWithLedgerPropsType {\n  onCancel: () => void;\n}\n\ntype LedgerSignedTransactions = Record<number, Transaction>;\n\ninterface UseSignTransactionsWithLedgerReturnType {\n  allTransactions: MultiSignTxType[];\n  onSignTransaction: () => void;\n  onNext: () => void;\n  onPrev: () => void;\n  onAbort: () => void;\n  waitingForDevice: boolean;\n  isLastTransaction: boolean;\n  currentStep: number;\n  callbackRoute?: string;\n  signedTransactions?: LedgerSignedTransactions;\n  currentTransaction: ActiveLedgerTransactionType | null;\n}\n\nexport function useSignTransactionsWithLedger({\n  onCancel\n}: UseSignTransactionsWithLedgerPropsType): UseSignTransactionsWithLedgerReturnType {\n  const transactionsToSign = useSelector(transactionsToSignSelector);\n\n  const {\n    sessionId,\n    transactions,\n    callbackRoute,\n    customTransactionInformation\n  } = transactionsToSign || {};\n  const [currentStep, setCurrentStep] = useState(0);\n  const [signedTransactions, setSignedTransactions] =\n    useState<LedgerSignedTransactions>();\n  const { getTxInfoByDataField, allTransactions } =\n    useParseMultiEsdtTransferData({ transactions });\n  const [currentTransaction, setCurrentTransaction] =\n    useState<ActiveLedgerTransactionType | null>(null);\n  const provider = useSelector(providerSelector);\n  const egldLabel = useSelector(egldLabelSelector);\n  const [waitingForDevice, setWaitingForDevice] = useState(false);\n  const dispatch = useDispatch();\n\n  const isLastTransaction = currentStep === allTransactions.length - 1;\n\n  useEffect(() => {\n    extractTransactionsInfo();\n  }, [currentStep, allTransactions]);\n\n  function extractTransactionsInfo() {\n    const tx = allTransactions[currentStep];\n    if (tx == null) {\n      return;\n    }\n    const { transaction, multiTxData } = tx;\n    const dataField = transaction.getData().toString();\n    const transactionTokenInfo = getTxInfoByDataField(\n      transaction.getData().toString(),\n      multiTxData\n    );\n    const { tokenId } = transactionTokenInfo;\n\n    const isTokenTransaction = Boolean(\n      tokenId && isTokenTransfer({ tokenId, erdLabel: egldLabel })\n    );\n\n    setCurrentTransaction({\n      transaction,\n      transactionTokenInfo,\n      isTokenTransaction,\n      dataField\n    });\n  }\n\n  function reset() {\n    setCurrentStep(0);\n    setSignedTransactions(undefined);\n    setWaitingForDevice(false);\n  }\n\n  async function sign() {\n    try {\n      if (currentTransaction == null || sessionId == null) {\n        return;\n      }\n\n      const trueForLedger = getIsProviderEqualTo(LoginMethodsEnum.ledger);\n      setWaitingForDevice(trueForLedger);\n\n      const signedTx = await provider.signTransaction(\n        currentTransaction.transaction\n      );\n      const newSignedTx = { [currentStep]: signedTx };\n      const newSignedTransactions: any = signedTransactions\n        ? { ...signedTransactions, ...newSignedTx }\n        : newSignedTx;\n      setSignedTransactions(newSignedTransactions);\n      if (!isLastTransaction) {\n        setCurrentStep((exising) => exising + 1);\n        setWaitingForDevice(false);\n      } else if (newSignedTransactions) {\n        dispatch(\n          moveTransactionsToSignedState({\n            sessionId,\n            status: TransactionBatchStatusesEnum.signed,\n            transactions: Object.values(newSignedTransactions).map((tx) =>\n              parseTransactionAfterSigning(tx as Transaction, trueForLedger)\n            )\n          })\n        );\n\n        reset();\n        if (\n          callbackRoute != null &&\n          customTransactionInformation?.redirectAfterSign &&\n          !window.location.pathname.includes(callbackRoute)\n        ) {\n          window.location.href = callbackRoute;\n        }\n      }\n    } catch (err) {\n      console.error(err, 'sign error');\n      reset();\n      dispatch(setSignTransactionsError((err as unknown as Error).message));\n    }\n  }\n\n  function signTx() {\n    try {\n      if (currentTransaction == null) {\n        return;\n      }\n      const signature = currentTransaction.transaction.getSignature();\n      if (signature) {\n        if (!isLastTransaction) {\n          setCurrentStep((exising) => exising + 1);\n        }\n      } else {\n        // currently code doesn't reach here because getSignature throws error if none is found\n        sign();\n      }\n    } catch {\n      // the only way to check if tx has signature is with try catch\n      sign();\n    }\n  }\n\n  function onAbort() {\n    if (isFirst) {\n      dispatch(clearAllTransactionsToSign());\n      onCancel();\n      if (\n        callbackRoute != null &&\n        customTransactionInformation?.redirectAfterSign\n      ) {\n        window.location.href = callbackRoute;\n      }\n    } else {\n      setCurrentStep((existing) => existing - 1);\n    }\n  }\n\n  const continueWithoutSigning =\n    currentTransaction?.transactionTokenInfo?.type &&\n    currentTransaction?.transactionTokenInfo?.multiTxData &&\n    !currentTransaction?.dataField.endsWith(\n      currentTransaction?.transactionTokenInfo?.multiTxData\n    );\n\n  function onSignTransaction() {\n    if (continueWithoutSigning) {\n      setCurrentStep((exising) => exising + 1);\n    } else {\n      signTx();\n    }\n  }\n\n  function onNext() {\n    setCurrentStep((current) => {\n      const nextStep = current + 1;\n      if (nextStep > allTransactions?.length) {\n        return current;\n      }\n      return nextStep;\n    });\n  }\n\n  function onPrev() {\n    setCurrentStep((current) => {\n      const nextStep = current - 1;\n      if (nextStep < 0) {\n        return current;\n      }\n      return nextStep;\n    });\n  }\n\n  const isFirst = currentStep === 0;\n\n  return {\n    allTransactions,\n    onSignTransaction,\n    onNext,\n    onPrev,\n    waitingForDevice,\n    onAbort,\n    isLastTransaction,\n    callbackRoute,\n    currentStep,\n    signedTransactions,\n    currentTransaction\n  };\n}\n\nexport default useSignTransactionsWithLedger;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { signTransactionsErrorSelector } from 'redux/selectors';\n\nexport const useGetSignTransactionsError = () => {\n  return useSelector(signTransactionsErrorSelector);\n};\n\nexport default useGetSignTransactionsError;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { accountInfoSelector } from 'redux/selectors';\n\nexport const useGetAccountInfo = () => {\n  return useSelector(accountInfoSelector);\n};\n\nexport default useGetAccountInfo;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector, loginInfoSelector } from 'redux/selectors';\n\nexport const useGetLoginInfo = () => {\n  const loginInfo = useSelector(loginInfoSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  return { ...loginInfo, isLoggedIn };\n};\n\nexport default useGetLoginInfo;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { providerSelector } from 'redux/selectors';\nimport { getProviderType } from 'utils';\n\nexport const useGetAccountProvider = () => {\n  const provider = useSelector(providerSelector);\n  const providerType = getProviderType(provider);\n  return { provider, providerType };\n};\n\nexport default useGetAccountProvider;\n","import axios from 'axios';\nimport {\n  addressSelector,\n  apiNetworkSelector,\n  shardSelector\n} from 'redux/selectors';\n\nimport { setAccountShard } from 'redux/slices';\nimport { store } from 'redux/store';\n\nexport default async function getAccountShard() {\n  const appState = store.getState();\n  const apiAddress = apiNetworkSelector(appState);\n  const address = addressSelector(appState);\n  const shard = shardSelector(appState);\n\n  try {\n    if (shard == null && address) {\n      const { data: account } = await axios.get(\n        `${apiAddress}/accounts/${address}`\n      );\n      store.dispatch(setAccountShard(account.shard));\n      return account.shard;\n    } else {\n      return shard;\n    }\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n}\n","import { useEffect, useState } from 'react';\nimport { Address } from '@elrondnetwork/erdjs/out';\nimport { getServerConfigurationForEnvironment } from 'apiCalls';\nimport { fallbackNetworkConfigurations } from 'constants/network';\nimport { useGetAccountInfo } from 'hooks';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch } from 'redux/DappProviderContext';\nimport { initializeExtraActions } from 'redux/slices/extraActionsSlice';\nimport { initializeNetworkConfig } from 'redux/slices/networkConfigSlice';\nimport { CustomNetworkType, EnvironmentsEnum, ExtraActionsType } from 'types';\nimport { logout } from 'utils';\nimport getAccountShard from 'utils/account/getAccountShard';\n\ninterface AppInitializerPropsType {\n  customNetworkConfig?: CustomNetworkType;\n  children: any;\n  environment: EnvironmentsEnum;\n  extraActions?: ExtraActionsType;\n}\n\nexport function AppInitializer({\n  customNetworkConfig = {},\n  children,\n  environment,\n  extraActions\n}: AppInitializerPropsType) {\n  const [initialized, setInitialized] = useState(false);\n  const account = useGetAccountInfo();\n  const { address, publicKey } = account;\n  const dispatch = useDispatch();\n\n  async function initializeNetwork() {\n    const fallbackConfig = fallbackNetworkConfigurations[environment];\n    if (fallbackConfig != null) {\n      dispatch(\n        initializeNetworkConfig({ ...fallbackConfig, ...customNetworkConfig })\n      );\n    }\n    const serverConfig = await getServerConfigurationForEnvironment(\n      environment\n    );\n    if (serverConfig != null) {\n      dispatch(\n        initializeNetworkConfig({ ...serverConfig, ...customNetworkConfig })\n      );\n    }\n  }\n\n  function initializeCustomExtraActions() {\n    if (extraActions != null) {\n      try {\n        extraActions?.init({\n          onLogin: (address, loginMethod) => {\n            dispatch(loginAction({ address, loginMethod }));\n          },\n          log: (word) => {\n            console.log('dapp log: ', word);\n          }\n        });\n        dispatch(initializeExtraActions(extraActions));\n      } catch (err) {\n        console.error('Unable to initalize extraActions', err);\n      }\n    }\n  }\n\n  async function initializeApp() {\n    initializeCustomExtraActions();\n    await initializeNetwork();\n    setInitialized(true);\n\n    //sync redux with shardId from server\n    getAccountShard();\n  }\n\n  useEffect(() => {\n    if (address) {\n      const pubKey = new Address(address).hex();\n      if (pubKey !== publicKey) {\n        logout();\n      }\n    }\n  }, [address, publicKey]);\n\n  useEffect(() => {\n    initializeApp();\n  }, [customNetworkConfig, environment]);\n\n  return initialized ? children : null;\n}\n\nexport default AppInitializer;\n","import React, { useCallback } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport {\n  getTransactionsByHashes,\n  sendSignedTransactions\n} from 'apiCalls/transactions';\nimport ProviderInitializer from 'components/ProviderInitializer';\nimport TransactionSender from 'components/TransactionSender';\nimport TransactionsTracker from 'components/TransactionsTracker';\nimport OverrideDefaultBehaviourContext from 'contexts/OverrideDefaultBehaviourContext';\nimport {\n  GetTransactionsByHashesType,\n  SendSignedTransactionsAsyncType\n} from 'contexts/types';\nimport { DappCoreContext } from 'redux/DappProviderContext';\nimport { CustomNetworkType, EnvironmentsEnum, ExtraActionsType } from 'types';\nimport AppInitializer from 'wrappers/AppInitializer';\n\nimport { store, persistor } from './store';\n\ninterface DappProviderPropsType {\n  children: React.ReactChildren | React.ReactElement;\n  customNetworkConfig?: CustomNetworkType;\n  extraActions?: ExtraActionsType;\n  completedTransactionsDelay?: number;\n  environment: 'testnet' | 'mainnet' | 'devnet' | EnvironmentsEnum;\n  sendSignedTransactionsAsync?: SendSignedTransactionsAsyncType;\n  getTransactionsByHash?: GetTransactionsByHashesType;\n}\n\nexport const DappProvider = ({\n  children,\n  customNetworkConfig = {},\n  extraActions,\n  completedTransactionsDelay = 0,\n  environment,\n  sendSignedTransactionsAsync = sendSignedTransactions,\n  getTransactionsByHash = getTransactionsByHashes\n}: DappProviderPropsType) => {\n  const memoizedSendSignedTransactionsAsync = useCallback(\n    sendSignedTransactionsAsync,\n    []\n  );\n\n  if (!environment) {\n    //throw if the user tries to initialize the app without a valid environment\n    throw new Error('missing environment flag');\n  }\n  const memoizedGetTransactionsByHash = useCallback(getTransactionsByHash, []);\n  return (\n    <Provider context={DappCoreContext} store={store}>\n      <PersistGate persistor={persistor} loading={null}>\n        <OverrideDefaultBehaviourContext.Provider\n          value={{\n            sendSignedTransactionsAsync: memoizedSendSignedTransactionsAsync,\n            getTransactionsByHash: memoizedGetTransactionsByHash,\n            completedTransactionsDelay\n          }}\n        >\n          <AppInitializer\n            environment={environment as EnvironmentsEnum}\n            customNetworkConfig={customNetworkConfig}\n            extraActions={extraActions}\n          >\n            <ProviderInitializer />\n            <TransactionSender />\n            <TransactionsTracker />\n            {children}\n          </AppInitializer>\n        </OverrideDefaultBehaviourContext.Provider>\n      </PersistGate>\n    </Provider>\n  );\n};\n","import React, { useRef } from 'react';\nimport { useSelector } from 'redux/DappProviderContext';\nimport {\n  isAccountLoadingSelector,\n  isLoggedInSelector,\n  walletLoginSelector\n} from 'redux/selectors';\n\nimport { RouteType } from 'types';\n\nconst AuthenticatedRoutesWrapper = ({\n  children,\n  routes,\n  unlockRoute,\n  onRedirect\n}: {\n  children: React.ReactNode;\n  routes: RouteType[];\n  unlockRoute: string;\n  onRedirect?: (unlockRoute?: string) => void;\n}) => {\n  const isLoggedIn = useSelector(isLoggedInSelector);\n\n  const isAccountLoading = useSelector(isAccountLoadingSelector);\n\n  const walletLogin = useSelector(walletLoginSelector);\n  const { pathname } = window.location;\n\n  const authenticatedRoutesRef = useRef(\n    routes.filter((route) => Boolean(route.authenticatedRoute))\n  );\n\n  const isOnAuthenticatedRoute = authenticatedRoutesRef.current.some(\n    ({ path }) => pathname === path\n  );\n\n  const shouldRedirect =\n    isOnAuthenticatedRoute && !isLoggedIn && walletLogin == null;\n\n  if (isAccountLoading || walletLogin) {\n    return null;\n  }\n\n  if (shouldRedirect) {\n    if (onRedirect) {\n      onRedirect(unlockRoute);\n    } else {\n      window.location.href = unlockRoute;\n    }\n    return null;\n  }\n\n  return <React.Fragment>{children}</React.Fragment>;\n};\n\nexport default AuthenticatedRoutesWrapper;\n","import { Address } from '@elrondnetwork/erdjs';\n\nexport class TransactionParameter {\n  sender: Address;\n  receiver: Address;\n  functionName: string;\n  inputParameters: string[];\n  outputParameters: string[];\n\n  constructor(\n    sender: Address,\n    receiver: Address,\n    functionName: string,\n    inputParameters: string[],\n    outputParameters: string[]\n  ) {\n    this.sender = sender;\n    this.receiver = receiver;\n    this.functionName = functionName;\n    this.inputParameters = inputParameters;\n    this.outputParameters = outputParameters;\n  }\n}\n","import React from 'react';\nimport { wrapperClassName } from 'utils';\n\nexport const withClassNameWrapper =\n  (Component: any) =>\n  ({ ...props }) =>\n    (\n      <span className={wrapperClassName}>\n        <Component {...props} />\n      </span>\n    );\n","import React from 'react';\nimport { validation } from '@elrondnetwork/dapp-utils';\nimport {\n  denomination as configDenomination,\n  decimals as configDecimals\n} from 'constants/index';\nimport { denominate, getEgldLabel } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nexport interface DenominateType {\n  value: string;\n  showLastNonZeroDecimal?: boolean;\n  showLabel?: boolean;\n  token?: string;\n  decimals?: number;\n  denomination?: number;\n  'data-testid'?: string;\n}\n\nconst denominateInvalid = (props: DenominateType) => {\n  return (\n    <span\n      data-testid={\n        props['data-testid'] ? props['data-testid'] : 'denominateComponent'\n      }\n    >\n      <span className='int-amount'>...</span>\n    </span>\n  );\n};\n\nconst denominateValid = (props: DenominateType, erdLabel: string) => {\n  const { value, showLastNonZeroDecimal = false, showLabel = true } = props;\n  const decimals =\n    props.decimals !== undefined ? props.decimals : configDecimals;\n  const denomination =\n    props.denomination !== undefined ? props.denomination : configDenomination;\n\n  const denominatedValue = denominate({\n    input: value,\n    denomination,\n    decimals,\n    showLastNonZeroDecimal,\n    addCommas: true\n  });\n\n  const valueParts = denominatedValue.split('.');\n  const hasNoDecimals = valueParts.length === 1;\n  const isNotZero = denominatedValue !== '0';\n\n  if (decimals > 0 && hasNoDecimals && isNotZero) {\n    let zeros = '';\n\n    for (let i = 1; i <= decimals; i++) {\n      zeros = zeros + '0';\n    }\n\n    valueParts.push(zeros);\n  }\n\n  return (\n    <span\n      data-testid={\n        props['data-testid'] ? props['data-testid'] : 'denominateComponent'\n      }\n    >\n      <span className='int-amount'>{valueParts[0]}</span>\n      {valueParts.length > 1 && (\n        <span className='decimals'>.{valueParts[1]}</span>\n      )}\n      {showLabel && (\n        <span className={`symbol ${props.token ? 'text-muted' : ''}`}>\n          &nbsp;{props.token ? props.token : erdLabel}\n        </span>\n      )}\n    </span>\n  );\n};\n\nconst Denominate = (props: DenominateType & { egldLabel?: string }) => {\n  const { value } = props;\n\n  return !validation.stringIsInteger(value)\n    ? denominateInvalid(props)\n    : denominateValid(props, props.egldLabel || '');\n};\n\nconst DenominateWrapper = (props: DenominateType) => {\n  const egldLabel = getEgldLabel();\n  const denominateProps = { ...props, egldLabel };\n  return <Denominate {...denominateProps} />;\n};\n\nexport default withClassNameWrapper(DenominateWrapper);\n","let fontawesomeFreeSolidIcons: any = {};\ntry {\n  fontawesomeFreeSolidIcons = require('@fortawesome/free-solid-svg-icons');\n} catch (err) {}\n\nexport default fontawesomeFreeSolidIcons;\n","let ReactFontawesome: any = {};\ntry {\n  ReactFontawesome = require('@fortawesome/react-fontawesome');\n} catch (err) {}\n\nexport default ReactFontawesome;\n","import React from 'react';\nimport { useGetNetworkConfig } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nconst ExplorerLink = ({\n  page,\n  text,\n  className\n}: {\n  page: string;\n  text?: any;\n  className?: string;\n}) => {\n  const {\n    network: { explorerAddress }\n  } = useGetNetworkConfig();\n  return (\n    <a\n      href={`${explorerAddress}${page}`}\n      {...{\n        target: '_blank'\n      }}\n      className={`link-style ${className}`}\n    >\n      {text ? (\n        <React.Fragment>{text}</React.Fragment>\n      ) : (\n        <ReactFontawesome.FontAwesomeIcon\n          icon={icons.faSearch}\n          className='text-secondary'\n        />\n      )}\n    </a>\n  );\n};\n\nexport default withClassNameWrapper(ExplorerLink);\n","import React from 'react';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { useExtensionLogin } from 'services';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { ExtensionLoginButtonPropsType } from './types';\n\nconst ExtensionLoginButton: (\n  props: ExtensionLoginButtonPropsType\n) => JSX.Element = ({\n  token,\n  className = 'extension-login',\n  children,\n  callbackRoute,\n  buttonClassName,\n  loginButtonText = 'Maiar DeFi Wallet',\n  redirectAfterLogin = false,\n  shouldRenderDefaultCss = true\n}) => {\n  const [onInitiateLogin] = useExtensionLogin({\n    callbackRoute,\n    token,\n    redirectAfterLogin\n  });\n\n  const isFirefox = navigator.userAgent.indexOf('Firefox') != -1;\n  const classes = getGeneratedClasses(className, shouldRenderDefaultCss, {\n    wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n      buttonClassName != null ? buttonClassName : ''\n    }`,\n    loginText: 'text-left',\n    noExtensionButtonWrapper: 'btn btn-unlock d-inline-block',\n    noExtensionButtonContent:\n      'd-flex justify-content-between align-items-center',\n    noExtensionButtonTitle: 'title',\n    noExtensionButtonIcon: ''\n  });\n\n  const handleLogin = () => {\n    onInitiateLogin();\n  };\n\n  return !window.elrondWallet ? (\n    <a\n      rel='noreferrer'\n      href={\n        isFirefox\n          ? 'https://addons.mozilla.org/en-US/firefox/addon/maiar-defi-wallet/'\n          : 'https://chrome.google.com/webstore/detail/dngmlblcodfobpdpecaadgfbcggfjfnm?authuser=0&hl=en'\n      }\n      target='_blank'\n      className={classes.noExtensionButtonWrapper}\n    >\n      {children || (\n        <div className={classes.noExtensionButtonContent}>\n          <div className={classes.noExtensionButtonTitle}>\n            Maiar DeFi Wallet\n          </div>\n          <ReactFontawesome.FontAwesomeIcon\n            className={classes.noExtensionButtonIcon}\n            icon={ReactFontawesome.faArrowRight}\n          />\n        </div>\n      )}\n    </a>\n  ) : (\n    <button onClick={handleLogin} className={classes.wrapper}>\n      {children || <span className={classes.loginText}>{loginButtonText}</span>}\n    </button>\n  );\n};\n\nexport default withClassNameWrapper(ExtensionLoginButton);\n","let ReactBootstrap: any = {};\ntry {\n  ReactBootstrap = require('react-bootstrap');\n} catch (err) {}\n\nexport default ReactBootstrap;\n","import React from 'react';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { wrapperClassName } from 'utils';\n\nconst ModalContainer = ({\n  children,\n  noSpacer,\n  className,\n  title,\n  onClose\n}: {\n  children: React.ReactNode;\n  noSpacer?: boolean;\n  className?: string;\n  title: React.ReactNode;\n  onClose?: () => void;\n}) => {\n  return (\n    <ReactBootstrap.Modal\n      show\n      backdrop='static'\n      onHide={onClose}\n      className={`modal-container ${\n        className ? className : ''\n      } ${wrapperClassName}`}\n      animation={false}\n      centered\n    >\n      <div className='modal-card card w-100'>\n        <div className='card-title h5 mb-0'>\n          <div className='d-flex justify-content-between align-items-center pt-spacer px-spacer mb-0'>\n            <div className={'px-3'}>{title}</div>\n            <button\n              type='button'\n              className='btn btn-light px-3 py-2'\n              onClick={onClose}\n            >\n              <ReactFontawesome.FontAwesomeIcon\n                size='lg'\n                icon={icons.faTimes}\n              />\n            </button>\n          </div>\n        </div>\n\n        <div\n          className={`modal-card-body text-center ${\n            noSpacer ? 'p-0' : 'p-spacer'\n          }`}\n        >\n          {children}\n        </div>\n      </div>\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default ModalContainer;\n","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from 'react';\nimport classNames from 'classnames';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { PageStateProps } from './types';\n\nexport const PageState = ({\n  icon,\n  title,\n  action,\n  iconClass,\n  dataTestId,\n  description,\n  iconBgClass,\n  iconSize = '5x',\n  className = 'page-state',\n  shouldRenderDefaultCss = true\n}: PageStateProps) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: 'state m-auto p-4 text-center',\n      iconContainer: classNames('icon-state mx-auto', {\n        [`${iconBgClass}`]: Boolean(iconBgClass)\n      }),\n      iconClass: classNames(iconClass != null && iconClass),\n      title: 'h4 my-4',\n      description: 'mb-3'\n    }\n  );\n\n  return (\n    <div className={generatedClasses.wrapper} data-testid={dataTestId}>\n      {icon && (\n        <span className={generatedClasses.iconContainer}>\n          <ReactFontawesome.FontAwesomeIcon\n            icon={icon}\n            className={generatedClasses.iconClass}\n            size={iconSize}\n          />\n        </span>\n      )}\n      {title && <p className={generatedClasses.title}>{title}</p>}\n      {description && (\n        <div className={generatedClasses.description}>{description}</div>\n      )}\n      {action && <React.Fragment>{action}</React.Fragment>}\n    </div>\n  );\n};\n\nexport default withClassNameWrapper(PageState);\n","import React from 'react';\n\nimport Denominate from 'UI/Denominate';\nimport { getAccountBalance } from 'utils';\n\ninterface AddressRowType {\n  selectedAddress?: string;\n  index: number;\n  address: string;\n  onSelectAddress: (address: { address: string; index: number } | null) => void;\n}\n\n// TODO: why not use Trim component?\nconst trimHash = (hash: string, keep = 10) => {\n  const start = hash.substring(0, keep);\n  const end = hash.substring(hash.length - keep);\n  return `${start}...${end}`;\n};\n\nconst noBalance = '...';\n\nconst AddressRow = ({\n  address,\n  index,\n  selectedAddress,\n  onSelectAddress\n}: AddressRowType) => {\n  const [balance, setBalance] = React.useState(noBalance);\n\n  const handleChange = (e: React.SyntheticEvent) => {\n    const { checked } = e.target as HTMLInputElement;\n    if (checked) {\n      onSelectAddress({ address, index });\n    }\n  };\n\n  const fetchBalance = async () => {\n    try {\n      const balance = await getAccountBalance(address);\n      setBalance(balance);\n    } catch (err) {\n      console.error('error fetching balance', balance);\n    }\n  };\n\n  React.useEffect(() => {\n    fetchBalance();\n  }, []);\n\n  return (\n    <tr>\n      <td className='text-left'>\n        <div className='d-flex align-items-start text-left form-check'>\n          <input\n            type='radio'\n            id={`check_${index}`}\n            data-testid={`check_${index}`}\n            onChange={handleChange}\n            role='button'\n            checked={selectedAddress === address}\n            className='form-check-input mr-1'\n          />\n          <label\n            htmlFor={`check_${index}`}\n            role='button'\n            data-testid={`label_${index}`}\n            className='form-check-label text-nowrap trim-size-xl m-0'\n          >\n            <div className='d-flex align-items-center text-nowrap trim'>\n              <span>{trimHash(address)}</span>\n            </div>\n          </label>\n        </div>\n      </td>\n      <td className='text-left'>\n        <Denominate value={balance} />\n      </td>\n      <td className='text-left'>{index}</td>\n    </tr>\n  );\n};\n\nexport default AddressRow;\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses } from 'utils';\n\nimport AddressRow from './AddressRow';\n\nconst ledgerWaitingText = 'Waiting for device';\n\nconst addressesPerPage = 10;\n\ninterface AddressTablePropsType {\n  loading: boolean;\n  accounts: string[];\n  startIndex: number;\n  selectedAddress?: string;\n  className: string;\n  shouldRenderDefaultCss: boolean;\n  onSelectAddress: (address: { address: string; index: number } | null) => void;\n  onGoToPrevPage: () => void;\n  onGoToNextPage: () => void;\n  onConfirmSelectedAddress: () => void;\n}\n\nconst AddressTable = ({\n  loading,\n  accounts,\n  startIndex,\n  selectedAddress,\n  onGoToPrevPage,\n  onGoToNextPage,\n  onConfirmSelectedAddress,\n  onSelectAddress,\n  shouldRenderDefaultCss = true,\n  className = 'ledger-address-table'\n}: AddressTablePropsType) => {\n  const classes = getGeneratedClasses(className, shouldRenderDefaultCss, {\n    wrapper: 'card my-4 text-center border-0',\n    cardBody: 'card-body p-4 mx-lg-4',\n    tableWrapper: 'table-responsive',\n    tableContent: 'table m-0 border-bottom',\n    tableHeader: 'py-2 text-semibold border-bottom',\n    tableHeaderText: 'text-left border-0',\n    buttonsWrapper: 'd-flex justify-content-center pager mt-2',\n    arrowButton: 'btn btn-link mx-2',\n    confirmButton: 'btn btn-primary px-4 mt-4'\n  });\n  switch (true) {\n    case loading:\n      return (\n        <PageState\n          className={className}\n          icon={icons.faCircleNotch}\n          iconClass='fa-spin text-primary'\n          title={ledgerWaitingText}\n        />\n      );\n    default:\n      return (\n        <React.Fragment>\n          <div className='m-auto'>\n            <div className={classes.wrapper}>\n              <div className={classes.cardBody}>\n                <div\n                  className={classes.tableWrapper}\n                  data-testid='ledgerAddresses'\n                >\n                  <table className={classes.tableContent}>\n                    <thead className={classes.tableHeader}>\n                      <tr>\n                        <th className={classes.tableHeaderText}>Address</th>\n                        <th className={classes.tableHeaderText}>Balance</th>\n                        <th className={classes.tableHeaderText}>#</th>\n                      </tr>\n                    </thead>\n                    <tbody data-testid='addressesTable'>\n                      {accounts.map((address, index) => {\n                        const key = index + startIndex * addressesPerPage;\n                        return (\n                          <AddressRow\n                            key={key}\n                            address={address}\n                            index={key}\n                            selectedAddress={selectedAddress}\n                            onSelectAddress={onSelectAddress}\n                          />\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n                <div className={classes.buttonsWrapper}>\n                  <button\n                    type='button'\n                    className={classes.arrowButton}\n                    onClick={onGoToPrevPage}\n                    data-testid='prevBtn'\n                    disabled={startIndex === 0}\n                  >\n                    <ReactFontawesome.FontAwesomeIcon\n                      size='sm'\n                      icon={icons.faChevronLeft}\n                    />{' '}\n                    Prev\n                  </button>\n                  <button\n                    type='button'\n                    className={classes.arrowButton}\n                    onClick={onGoToNextPage}\n                    data-testid='nextBtn'\n                  >\n                    Next{' '}\n                    <ReactFontawesome.FontAwesomeIcon\n                      size='sm'\n                      icon={icons.faChevronRight}\n                    />\n                  </button>\n                </div>\n                <button\n                  className={classes.confirmButton}\n                  disabled={selectedAddress === ''}\n                  onClick={onConfirmSelectedAddress}\n                  data-testid='confirmBtn'\n                >\n                  Confirm\n                </button>\n              </div>\n            </div>\n          </div>\n        </React.Fragment>\n      );\n  }\n};\n\nexport default AddressTable;\n","import React from 'react';\nimport { useGetAccountInfo } from 'hooks';\n\nconst ConfirmAddress = ({\n  token,\n  noBorder\n}: {\n  token?: string;\n  noBorder?: boolean;\n}) => {\n  const { ledgerAccount } = useGetAccountInfo();\n  return (\n    <div className='m-auto'>\n      <div className={`card my-4 text-center ${noBorder ? 'border-0' : ''}`}>\n        <div className='card-body p-4 mx-lg-4'>\n          <h4 className='mb-4'>Confirm Ledger Address</h4>\n          <p>For security, please confirm that your address: </p>\n          <p className='lead border rounded p-2'>\n            {ledgerAccount ? ledgerAccount.address : ''}\n          </p>\n          {token && (\n            <React.Fragment>\n              <p>and Auth Token</p>\n              <p className='lead border rounded p-2'>{`${token}{}`}</p>\n            </React.Fragment>\n          )}\n          <p className='m-0'>\n            {token\n              ? 'are the one shown on your Ledger device screen now.'\n              : 'is the one shown on your Ledger device screen now.'}\n          </p>\n\n          <p>Select Approve on your device to confirm.</p>\n          <p>\n            Or, if it does not match, close this page and{' '}\n            <a\n              href='https://help.elrond.com/en/'\n              {...{\n                target: '_blank'\n              }}\n            >\n              contact support\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmAddress;\n","import React from 'react';\nimport { ReactComponent as LedgerLogo } from '../assets/ledger-nano.svg';\n\nconst LedgerConnect = ({\n  onClick,\n  error,\n  connectPageContent\n}: {\n  onClick: () => void;\n  error: string;\n  connectPageContent?: React.ReactNode;\n}) => {\n  return (\n    <div className='m-auto login-container'>\n      <div className='card my-4 text-center border-0'>\n        <div className='card-body p-4 mx-lg-4'>\n          {connectPageContent ? (\n            <React.Fragment>{connectPageContent}</React.Fragment>\n          ) : (\n            <React.Fragment>\n              <LedgerLogo className='mb-4' />\n              <h4 className='mb-4'>Connect Ledger</h4>\n              <p className='lead mb-4'>\n                Unlock your device &amp; open the Elrond App.\n              </p>\n            </React.Fragment>\n          )}\n\n          <div>\n            {error && (\n              <p className='text-danger d-flex justify-content-center align-items-center'>\n                {error}\n              </p>\n            )}\n            <button\n              className='btn btn-primary px-4'\n              onClick={onClick}\n              data-testid='connectBtn'\n            >\n              Connect Ledger\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LedgerConnect;\n","import React from 'react';\nimport { useGetAccountInfo } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport { useLedgerLogin } from 'services';\nimport ModalContainer from 'UI/ModalContainer';\n\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport AddressTable from './AddressTable';\nimport ConfirmAddress from './ConfirmAddress';\nimport LedgerConnect from './LedgerConnect';\n\nconst ledgerWaitingText = 'Waiting for device';\n\ninterface LedgerLoginContainerPropsType {\n  callbackRoute: string;\n  className?: string;\n  shouldRenderDefaultCss?: boolean;\n  wrapContentInsideModal?: boolean;\n  redirectAfterLogin?: boolean;\n  token?: string;\n  onClose?: () => void;\n}\n\nfunction LedgerLoginContainer({\n  callbackRoute,\n  className = 'login-modal-content',\n  shouldRenderDefaultCss = true,\n  wrapContentInsideModal = true,\n  redirectAfterLogin,\n  onClose,\n  token\n}: LedgerLoginContainerPropsType) {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    { spinner: 'fa-spin text-primary' }\n  );\n  const { ledgerAccount } = useGetAccountInfo();\n  const [\n    onStartLogin,\n    { error, isLoading },\n    {\n      showAddressList,\n      accounts,\n      onGoToPrevPage,\n      onGoToNextPage,\n      onSelectAddress,\n      onConfirmSelectedAddress,\n      startIndex,\n      selectedAddress\n    }\n  ] = useLedgerLogin({ callbackRoute, token, redirectAfterLogin });\n\n  function getContent() {\n    if (isLoading) {\n      return (\n        <PageState\n          icon={icons.faCircleNotch}\n          iconClass={generatedClasses.spinner}\n          title={ledgerWaitingText}\n        />\n      );\n    }\n    if (ledgerAccount != null && !error) {\n      return <ConfirmAddress token={token} />;\n    }\n\n    if (showAddressList && !error) {\n      return (\n        <AddressTable\n          accounts={accounts}\n          loading={isLoading}\n          className={className}\n          shouldRenderDefaultCss={shouldRenderDefaultCss}\n          onGoToNextPage={onGoToNextPage}\n          onGoToPrevPage={onGoToPrevPage}\n          onSelectAddress={onSelectAddress}\n          startIndex={startIndex}\n          selectedAddress={selectedAddress?.address}\n          onConfirmSelectedAddress={onConfirmSelectedAddress}\n        />\n      );\n    }\n\n    return <LedgerConnect onClick={onStartLogin} error={error} />;\n  }\n  return wrapContentInsideModal ? (\n    <ModalContainer\n      title={'Login with ledger'}\n      className={className}\n      onClose={onClose}\n    >\n      {getContent()}\n    </ModalContainer>\n  ) : (\n    getContent()\n  );\n}\n\nexport default withClassNameWrapper(LedgerLoginContainer);\n","import React from 'react';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport LedgerLoginContainer from '../LoginModal';\nimport { LedgerLoginButtonPropsType } from './types';\n\nconst LedgerLoginButton: (props: LedgerLoginButtonPropsType) => JSX.Element = ({\n  token,\n  callbackRoute,\n  children,\n  loginButtonText = 'Ledger',\n  buttonClassName,\n  className = 'ledger-login',\n  redirectAfterLogin = false,\n  wrapContentInsideModal = true,\n  shouldRenderDefaultCss = true\n}) => {\n  const [showLoginModal, setShowLoginModal] = React.useState(false);\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n        buttonClassName != null ? buttonClassName : ''\n      }`,\n      loginText: 'text-left'\n    }\n  );\n\n  function handleOpenModal() {\n    setShowLoginModal(true);\n  }\n\n  function handleCloseModal() {\n    setShowLoginModal(false);\n  }\n\n  return (\n    <span className={wrapperClassName}>\n      <button onClick={handleOpenModal} className={generatedClasses.wrapper}>\n        {children || (\n          <span className={generatedClasses.loginText}>{loginButtonText}</span>\n        )}\n      </button>\n      {showLoginModal && (\n        <LedgerLoginContainer\n          className={className}\n          shouldRenderDefaultCss={shouldRenderDefaultCss}\n          callbackRoute={callbackRoute}\n          token={token}\n          wrapContentInsideModal={wrapContentInsideModal}\n          redirectAfterLogin={redirectAfterLogin}\n          onClose={handleCloseModal}\n        />\n      )}\n    </span>\n  );\n};\n\nexport default withClassNameWrapper(LedgerLoginButton);\n","import React from 'react';\n\nimport { useGetNotification } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { NotificationTypesEnum } from 'types';\n\nimport { wrapperClassName } from 'utils';\nimport PageState from '../PageState';\n\nconst notificationTypesToIcons = {\n  [NotificationTypesEnum.warning]: icons.faExclamationTriangle\n};\nconst defaultIcon = icons.faExclamationTriangle;\n\nexport function NotificationModal() {\n  const { notification, clearNotification } = useGetNotification();\n\n  const showModal = Boolean(notification);\n  const onDone = () => {\n    clearNotification();\n  };\n\n  const icon = notification\n    ? notificationTypesToIcons[notification?.type] || defaultIcon\n    : null;\n\n  return notification ? (\n    <ReactBootstrap.Modal\n      show={showModal}\n      backdrop={true}\n      onHide={notification}\n      className={`modal-container ${wrapperClassName}`}\n      animation={false}\n      centered\n    >\n      <div className='card w-100 notification-modal'>\n        <PageState\n          icon={icon}\n          iconClass={notification.iconClassName}\n          iconBgClass='p-4 rounded-bg-circle'\n          iconSize='3x'\n          title={notification.title}\n          description={notification.description}\n          action={\n            <button className='btn btn-primary' onClick={onDone}>\n              Done\n            </button>\n          }\n        />\n      </div>\n    </ReactBootstrap.Modal>\n  ) : null;\n}\n\nexport default NotificationModal;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { loginInfoSelector } from 'redux/selectors';\n\nexport const useGetLoginInfo = () => {\n  const loginInfo = useSelector(loginInfoSelector);\n  return { ...loginInfo, isLoggedIn: loginInfo?.loginMethod != '' };\n};\n\nexport default useGetLoginInfo;\n","import React from 'react';\nimport classNames from 'optionalPackages/classnames';\nimport freeSolidIcons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { SignModalPropsType } from 'types';\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\n\nconst SignWithExtensionModal = ({\n  handleClose,\n  error,\n  callbackRoute,\n  transactions,\n  className = 'extension-modal'\n}: SignModalPropsType) => {\n  const classes = getGeneratedClasses(className, true, {\n    wrapper: 'modal-container extension',\n    icon: 'text-white',\n    closeBtn: 'btn btn-close-link mt-2'\n  });\n  const description = error\n    ? error\n    : transactions && transactions.length > 1\n    ? 'Check your Elrond Wallet Extension to sign the transactions'\n    : 'Check your Elrond Wallet Extension to sign the transaction';\n\n  const close = (e: React.MouseEvent) => {\n    e.preventDefault();\n    handleClose();\n    if (\n      callbackRoute != null &&\n      !window.location.pathname.includes(callbackRoute)\n    ) {\n      window.location.href = callbackRoute;\n    }\n  };\n\n  return (\n    <ReactBootstrap.Modal\n      show\n      backdrop='static'\n      onHide={handleClose}\n      className={classNames(classes.wrapper, wrapperClassName)}\n      animation={false}\n      centered\n    >\n      <PageState\n        icon={error ? freeSolidIcons.faTimes : freeSolidIcons.faHourglass}\n        iconClass={classes.icon}\n        className={className}\n        iconBgClass={error ? 'bg-danger' : 'bg-warning'}\n        iconSize='3x'\n        title='Confirm on Maiar DeFi Wallet'\n        description={description}\n        action={\n          <button\n            id='closeButton'\n            data-testid='closeButton'\n            onClick={close}\n            className={classes.closeBtn}\n          >\n            Close\n          </button>\n        }\n      />\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default SignWithExtensionModal;\n","import * as React from 'react';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\n\nexport const Simple = ({ children }: { children: React.ReactNode }) => (\n  <div className='token-symbol'>{children}</div>\n);\n\nexport const Combined = ({\n  small,\n  children\n}: {\n  small: boolean | undefined;\n  children: React.ReactNode;\n}) => (\n  <div className={`token-symbol-combined ${small ? 'small' : ''}`}>\n    {children}\n  </div>\n);\n\nexport const Wrapped = ({ children }: { children: React.ReactNode }) => (\n  <div className='token-symbol-wrapped'>\n    <div className='wrapped rounded-circle shadow'>\n      <div className='locked-icon'>\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faDollarSign} size='sm' />\n      </div>\n      {children}\n    </div>\n  </div>\n);\n\nexport const Pool = ({\n  first,\n  second\n}: {\n  first: React.ReactNode;\n  second: React.ReactNode;\n}) => (\n  <div className='token-symbol-pool'>\n    <div className='pool rounded-circle shadow'>\n      {first}\n      <div className='pool-icon'>{second}</div>\n    </div>\n  </div>\n);\n\nexport const Locked = ({ children }: { children: React.ReactNode }) => (\n  <div className='token-symbol-locked'>\n    <div className='locked rounded-circle shadow'>\n      <div className='locked-icon'>\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faLock} size='sm' />\n      </div>\n      {children}\n    </div>\n  </div>\n);\n","import * as React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { getEgldLabel, wrapperClassName } from 'utils';\nimport { ReactComponent as EgldIcon } from '../../assets/icons/EGLD.svg';\nimport { Simple, Combined } from './TokenSymbol';\n\nconst getIdentifierWithoutNonce = (identifier: string) => {\n  const tokenParts = identifier.split('-');\n  return identifier.includes('-')\n    ? `${tokenParts[0]}-${tokenParts[1]}`\n    : identifier;\n};\n\ntype TokenIconProps = {\n  token: string;\n  combined?: boolean | undefined;\n  small?: boolean | undefined;\n};\ntype TokenIconType = TokenIconProps & {\n  symbol: string;\n  label: string;\n  icon: React.ReactNode;\n};\n\nconst getDetails = (token: string): TokenIconType => {\n  const egldLabel = getEgldLabel();\n  const isEgldTransfer = token === egldLabel;\n  return {\n    token,\n    symbol: token ? token.split('-')[0] : '',\n    label: token,\n    // eslint-disable-next-line react/display-name\n    icon: () =>\n      isEgldTransfer ? (\n        <EgldIcon />\n      ) : (\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faGem} />\n      )\n  };\n};\n\nexport default class TokenDetails extends React.Component {\n  static Token = (props: TokenIconProps) => (\n    <React.Fragment>{props.token}</React.Fragment>\n  );\n  static Symbol = (props: TokenIconProps) => (\n    <React.Fragment>\n      {getDetails(getIdentifierWithoutNonce(props.token)).symbol}\n    </React.Fragment>\n  );\n  static Label = (props: TokenIconProps) => (\n    <React.Fragment>\n      {getDetails(getIdentifierWithoutNonce(props.token)).label}\n    </React.Fragment>\n  );\n  static Icon = (props: TokenIconProps) => {\n    const Component: any =\n      process.env.NODE_ENV !== 'test'\n        ? getDetails(getIdentifierWithoutNonce(props.token)).icon\n        : () => null;\n\n    return (\n      <span className={wrapperClassName}>\n        {props.combined ? (\n          <Combined small={props.small}>\n            <Component />\n          </Combined>\n        ) : (\n          <Simple>\n            <Component />\n          </Simple>\n        )}\n      </span>\n    );\n  };\n  render() {\n    return null;\n  }\n}\n","import * as React from 'react';\nimport { decodePart } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nconst allOccurences = (sourceStr: string, searchStr: string) =>\n  [...sourceStr.matchAll(new RegExp(searchStr, 'gi'))].map((a) => a.index);\n\nconst TransactionData = ({\n  data,\n  highlight,\n  isScCall\n}: {\n  data: string;\n  highlight?: string;\n  isScCall?: boolean;\n}) => {\n  let output = <React.Fragment>{data}</React.Fragment>;\n\n  const [encodedScCall, ...remainingDataFields] =\n    highlight && isScCall ? highlight.split('@') : [];\n\n  if (data && highlight && allOccurences(data, highlight).length === 1) {\n    switch (true) {\n      case data.startsWith(highlight): {\n        const [, rest] = data.split(highlight);\n        output = (\n          <React.Fragment>\n            {highlight}\n            <span className='text-muted'>{rest}</span>\n          </React.Fragment>\n        );\n        break;\n      }\n      case data.endsWith(highlight): {\n        const [rest] = data.split(highlight);\n        output = (\n          <React.Fragment>\n            <span className='text-muted'>{rest}</span>\n            {highlight}\n          </React.Fragment>\n        );\n        break;\n      }\n\n      default: {\n        const [start, end] = data.split(highlight);\n\n        output = (\n          <React.Fragment>\n            <span className='text-muted'>{start}</span>\n            <span className={'highlighted'}>{highlight}</span>\n            <span className='text-muted'>{end}</span>\n          </React.Fragment>\n        );\n        break;\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      {encodedScCall && (\n        <div className='form-group mb-0 data-field mw-100'>\n          <span className='form-label text-secondary d-block'>SC Call</span>\n\n          <div\n            data-testid='confirmScCall'\n            className='textarea sc-call form-control cursor-text mt-1 text-break-all'\n          >\n            {[decodePart(encodedScCall), ...remainingDataFields].join('@')}\n          </div>\n        </div>\n      )}\n      <div className='form-group mb-0 data-field mw-100'>\n        <span className='form-label text-secondary d-block'>Data</span>\n\n        <div\n          data-testid='confirmData'\n          className='textarea form-control cursor-text mt-1 text-break-all'\n        >\n          {data ? output : 'N/A'}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default withClassNameWrapper(TransactionData);\n","import React from 'react';\nimport { Address } from '@elrondnetwork/erdjs/out';\nimport { useGetNetworkConfig } from 'hooks';\nimport useGetTokenDetails from 'hooks/transactions/useGetTokenDetails';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport PageState from 'UI/PageState';\nimport TokenDetails from 'UI/TokenDetails';\nimport TransactionData from 'UI/TransactionData';\nimport {\n  denominate,\n  getEgldLabel,\n  getGeneratedClasses,\n  isTokenTransfer\n} from 'utils';\n\nexport interface SignStepType {\n  onSignTransaction: () => void;\n  onPrev: () => void;\n  handleClose: () => void;\n  waitingForDevice: boolean;\n  error: string | null;\n  callbackRoute?: string;\n  title?: string;\n  currentStep: number;\n  currentTransaction: any;\n  isLastTransaction: boolean;\n  className: string;\n}\n\nconst SignStep = ({\n  onSignTransaction,\n  handleClose,\n  onPrev,\n  title = 'Confirm on Ledger',\n  waitingForDevice,\n  currentTransaction,\n  error,\n  isLastTransaction,\n  currentStep,\n  className\n}: SignStepType) => {\n  const egldLabel = getEgldLabel();\n  const transactionData = currentTransaction.transaction.getData().toString();\n  const { network } = useGetNetworkConfig();\n\n  const { tokenId, amount, type, multiTxData, receiver } =\n    currentTransaction.transactionTokenInfo;\n\n  const isTokenTransaction = Boolean(\n    tokenId && isTokenTransfer({ tokenId, erdLabel: egldLabel })\n  );\n\n  const onCloseClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (isFirst) {\n      handleClose();\n    } else {\n      onPrev();\n    }\n  };\n\n  const continueWithoutSigning =\n    type && multiTxData && !transactionData.endsWith(multiTxData);\n\n  let signBtnLabel = 'Sign & Continue';\n  signBtnLabel = waitingForDevice ? 'Check your Ledger' : signBtnLabel;\n  signBtnLabel =\n    isLastTransaction && !waitingForDevice ? 'Sign & Submit' : signBtnLabel;\n  signBtnLabel = continueWithoutSigning ? 'Continue' : signBtnLabel;\n\n  const isFirst = currentStep === 0;\n\n  const { tokenDenomination } = useGetTokenDetails({\n    tokenId: currentTransaction.transactionTokenInfo.tokenId\n  });\n\n  const denominatedAmount = denominate({\n    input: isTokenTransaction\n      ? amount\n      : currentTransaction.transaction.getValue().toString(),\n    denomination: isTokenTransaction\n      ? tokenDenomination\n      : Number(network.egldDenomination),\n    decimals: Number(network.decimals),\n    showLastNonZeroDecimal: false,\n    addCommas: true\n  });\n\n  const classes = getGeneratedClasses(className, true, {\n    formGroup: 'form-group text-left',\n    formLabel: 'form-label text-secondary',\n    icon: 'text-white',\n    contentWrapper:\n      'd-flex flex-column justify-content-start flex-md-row justify-content-md-between mb-3',\n    tokenWrapper: 'mb-3 mb-md-0 d-flex flex-column align-items-start',\n    tokenLabel: 'text-secondary text-left',\n    tokenValue: 'd-flex align-items-center mt-1',\n    tokenAmountLabel: 'text-secondary text-left',\n    tokenAmountValue: 'd-flex align-items-center',\n    dataFormGroup: 'form-group text-left',\n    errorMessage:\n      'text-danger d-flex justify-content-center align-items-center',\n    buttonsWrapper: 'd-flex align-items-center justify-content-end mt-spacer',\n    cancelButton: 'btn btn-dark text-white flex-even mr-2',\n    signButton: 'btn btn-primary flex-even ml-2'\n  });\n\n  return (\n    <PageState\n      icon={error ? icons.faTimes : icons.faHourglass}\n      iconClass={classes.icon}\n      iconBgClass={error ? 'bg-danger' : 'bg-warning'}\n      iconSize='3x'\n      className={className}\n      title={title}\n      description={\n        <React.Fragment>\n          {currentTransaction.transaction && (\n            <React.Fragment>\n              <div className={classes.formGroup} data-testid='transactionTitle'>\n                <div className={classes.formLabel}>To: </div>\n                {multiTxData\n                  ? new Address(receiver).bech32()\n                  : currentTransaction.transaction.getReceiver().toString()}\n              </div>\n\n              <div className={classes.contentWrapper}>\n                <div className={classes.tokenWrapper}>\n                  <div className={classes.tokenlabel}>Token</div>\n                  <div className={classes.tokenValue}>\n                    <TokenDetails.Icon token={tokenId || egldLabel} />\n                    <div className='mr-1'></div>\n                    <TokenDetails.Label token={tokenId || egldLabel} />\n                  </div>\n                </div>\n                <div>\n                  <div className={classes.tokenAmountLabel}>Amount</div>\n                  <div className={classes.tokenAmountValue}>\n                    <div className='mr-1'>{denominatedAmount}</div>\n                    <TokenDetails.Symbol token={tokenId || egldLabel} />\n                  </div>\n                </div>\n              </div>\n\n              <div className={classes.dataFormGroup}>\n                {currentTransaction.transaction.getData() && (\n                  <TransactionData\n                    {...{\n                      data: currentTransaction.transaction.getData().toString(),\n                      highlight: multiTxData,\n                      isScCall: !tokenId\n                    }}\n                  />\n                )}\n              </div>\n              {error && <p className={classes.errorMessage}>{error}</p>}\n            </React.Fragment>\n          )}\n        </React.Fragment>\n      }\n      action={\n        <div className={classes.buttonsWrapper}>\n          <button\n            id='closeButton'\n            data-testid='closeButton'\n            onClick={onCloseClick}\n            className={classes.cancelButton}\n          >\n            {isFirst ? 'Cancel' : 'Back'}\n          </button>\n\n          <button\n            type='button'\n            className={classes.signButton}\n            id='signBtn'\n            data-testid='signBtn'\n            onClick={onSignTransaction}\n            disabled={waitingForDevice}\n          >\n            {signBtnLabel}\n          </button>\n        </div>\n      }\n    />\n  );\n};\n\nexport default SignStep;\n","import React from 'react';\nimport { useSignTransactionsWithLedger } from 'hooks';\nimport classNames from 'optionalPackages/classnames';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { SignModalPropsType } from 'types';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\nimport SignStep from './SignStep';\n\nconst SignWithLedgerModal = ({\n  handleClose,\n  error,\n  className = 'ledger-modal'\n}: SignModalPropsType) => {\n  const {\n    onSignTransaction,\n    onNext,\n    onPrev,\n    allTransactions,\n    waitingForDevice,\n    onAbort,\n    isLastTransaction,\n    currentStep,\n    callbackRoute,\n    currentTransaction\n  } = useSignTransactionsWithLedger({ onCancel: handleClose });\n  const classes = getGeneratedClasses(className, true, {\n    wrapper: 'modal-container wallet-connect',\n    container: 'card container',\n    cardBody: 'card-body'\n  });\n  return (\n    <ReactBootstrap.Modal\n      show={currentTransaction != null}\n      backdrop='static'\n      onHide={handleClose}\n      className={classNames(classes.wrapper, wrapperClassName)}\n      animation={false}\n      centered\n    >\n      <div className={classes.container}>\n        <div className={classes.cardBody}>\n          <SignStep\n            {...{\n              onSignTransaction,\n              onNext,\n              onPrev,\n              allTransactions,\n              waitingForDevice,\n              isLastTransaction,\n              currentStep,\n              callbackRoute,\n              currentTransaction,\n              handleClose: onAbort,\n              className,\n              error\n            }}\n          />\n        </div>\n      </div>\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default SignWithLedgerModal;\n","import React from 'react';\n\nimport classNames from 'optionalPackages/classnames';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { SignModalPropsType } from 'types';\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\n\nexport const SignWithWalletConnectModal = ({\n  error,\n  handleClose,\n  callbackRoute,\n  transactions,\n  className = 'wallet-connect-modal'\n}: SignModalPropsType) => {\n  const classes = getGeneratedClasses(className, true, {\n    wrapper: 'modal-container wallet-connect',\n    icon: 'text-white',\n    closeBtn: 'btn btn-close-link mt-2'\n  });\n\n  const hasMultipleTransactions = transactions && transactions?.length > 1;\n  const description = error\n    ? error\n    : `Check your phone to sign the transaction${\n        hasMultipleTransactions ? 's' : ''\n      }`;\n\n  const close = (e: React.MouseEvent) => {\n    e.preventDefault();\n    handleClose();\n    if (\n      callbackRoute != null &&\n      !window.location.pathname.includes(callbackRoute)\n    ) {\n      window.location.href = callbackRoute;\n    }\n  };\n  return (\n    <ReactBootstrap.Modal\n      show\n      backdrop='static'\n      onHide={close}\n      className={classNames(classes.wrapper, wrapperClassName)}\n      animation={false}\n      centered\n    >\n      <PageState\n        icon={error ? icons.faTimes : icons.faHourglass}\n        iconClass={classes.icon}\n        className={className}\n        iconBgClass={error ? 'bg-danger' : 'bg-warning'}\n        iconSize='3x'\n        title='Confirm on Maiar'\n        description={description}\n        action={\n          <button\n            id='closeButton'\n            data-testid='closeButton'\n            onClick={close}\n            className={classes.closeBtn}\n          >\n            Close\n          </button>\n        }\n      />\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default SignWithWalletConnectModal;\n","import React from 'react';\n\nimport { Transaction } from '@elrondnetwork/erdjs';\nimport {\n  useGetAccountProvider,\n  useGetSignTransactionsError,\n  useSignTransactions\n} from 'hooks';\nimport useGetLoginInfo from 'hooks/useGetLoginInfo';\nimport { LoginMethodsEnum } from 'types';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport SignWithExtensionModal from './SignWithExtensionModal';\nimport SignWithLedgerModal from './SignWithLedgerModal';\nimport SignWithWalletConnectModal from './SignWithWalletConnectModal';\n\ninterface SignPropsType {\n  handleClose: () => void;\n  error: string | null;\n  sessionId?: string;\n  transactions: Transaction[];\n  providerType: LoginMethodsEnum;\n  callbackRoute: string;\n  className?: string;\n}\n\ninterface CustomConfirmScreensType {\n  Ledger: (signProps: SignPropsType) => JSX.Element;\n  Extension: (signProps: SignPropsType) => JSX.Element;\n  WalletConnect: (signProps: SignPropsType) => JSX.Element;\n  Extra: (signProps: SignPropsType) => JSX.Element;\n}\n\ninterface SignTransactionsPropsType {\n  className?: string;\n  CustomConfirmScreens?: CustomConfirmScreensType;\n}\n\nfunction SignTransactionsModals({\n  className,\n  CustomConfirmScreens\n}: SignTransactionsPropsType) {\n  const {\n    callbackRoute,\n    transactions,\n    error,\n    sessionId,\n    onAbort,\n    hasTransactions\n  } = useSignTransactions();\n\n  const { providerType } = useGetAccountProvider();\n  const signTransactionsError = useGetSignTransactionsError();\n  const { loginMethod } = useGetLoginInfo();\n\n  const handleClose = () => {\n    onAbort(sessionId);\n  };\n\n  const signError = error || signTransactionsError;\n\n  const signProps: SignPropsType = {\n    handleClose,\n    error: signError,\n    sessionId,\n    transactions: transactions!,\n    providerType,\n    callbackRoute,\n    className\n  };\n\n  if (signError || hasTransactions) {\n    switch (loginMethod) {\n      case LoginMethodsEnum.ledger:\n        return CustomConfirmScreens?.Ledger ? (\n          <CustomConfirmScreens.Ledger {...signProps} />\n        ) : (\n          <SignWithLedgerModal {...signProps} />\n        );\n\n      case LoginMethodsEnum.walletconnect:\n        return CustomConfirmScreens?.WalletConnect ? (\n          <CustomConfirmScreens.WalletConnect {...signProps} />\n        ) : (\n          <SignWithWalletConnectModal {...signProps} />\n        );\n\n      case LoginMethodsEnum.extension:\n        return CustomConfirmScreens?.Extension ? (\n          <CustomConfirmScreens.Extension {...signProps} />\n        ) : (\n          <SignWithExtensionModal {...signProps} />\n        );\n\n      case LoginMethodsEnum.extra:\n        return CustomConfirmScreens?.Extra ? (\n          <CustomConfirmScreens.Extra {...signProps} />\n        ) : null;\n\n      default:\n        return null;\n    }\n  }\n\n  return null;\n}\n\nexport default withClassNameWrapper(SignTransactionsModals);\n","enum SessionStorageKeysEnum {\n  'toasts' = 'toasts'\n}\n\nexport function setToastsIdsToStorage(ids: string[]) {\n  return sessionStorage.setItem(\n    SessionStorageKeysEnum.toasts,\n    JSON.stringify(ids)\n  );\n}\n\nexport function getToastsIdsFromStorage() {\n  const toastsIds = sessionStorage.getItem(SessionStorageKeysEnum.toasts);\n  return toastsIds != null ? JSON.parse(toastsIds) : [];\n}\n","import { Address } from '@elrondnetwork/erdjs/out';\nimport { getShardOfAddress } from 'utils';\n\ninterface IsCrossShardTransactionPropsType {\n  receiverAddress: string;\n  senderShard?: number;\n  senderAddress?: string;\n}\nexport function isCrossShardTransaction({\n  receiverAddress,\n  senderShard,\n  senderAddress\n}: IsCrossShardTransactionPropsType) {\n  try {\n    const receiver = new Address(receiverAddress);\n    const receiverShard = getShardOfAddress(receiver.pubkey());\n    if (senderShard == null && senderAddress != null) {\n      const sender = new Address(senderAddress);\n      return getShardOfAddress(sender) === receiverShard;\n    }\n    return receiverShard === senderShard;\n  } catch (err) {\n    return false;\n  }\n}\n","import React from 'react';\nimport classnames from 'optionalPackages/classnames';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './types';\n\nconst IconState = ({\n  icon,\n  iconSize = '3x',\n  className = 'icon-state',\n  shouldRenderDefaultCss = true\n}: Props) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: classnames('icon-state mx-auto', className, {\n        half: iconSize === '2x'\n      }),\n      icon: classnames('text-white', className)\n    }\n  );\n\n  return (\n    <span className={generatedClasses.wrapper}>\n      <ReactFontawesome.FontAwesomeIcon\n        icon={icon}\n        size={iconSize}\n        className={generatedClasses.icon}\n      />\n    </span>\n  );\n};\n\nexport default withClassNameWrapper(IconState);\n","import React from 'react';\nimport moment from 'optionalPackages/moment';\nimport { logarithmicRest } from 'utils';\nimport storage from 'utils/session';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './type';\n\nconst Progress = ({ id, children, progress, done }: Props) => {\n  const ref = React.useRef(null);\n  const intervalRef = React.useRef<any>();\n  const removeTxFromSession = () => {\n    const toastProgress = storage.getItem('toastProgress');\n    const hasSessionStoredTx = Boolean(toastProgress[id]);\n\n    if (!hasSessionStoredTx) {\n      return;\n    }\n\n    const expires = moment().add(10, 'minutes').unix();\n\n    delete toastProgress[id];\n\n    storage.setItem({\n      key: 'toastProgress',\n      data: toastProgress,\n      expires\n    });\n  };\n\n  const saveToSession = ({ value }: { value: number }) => {\n    const toastProgress = storage.getItem('toastProgress') || {};\n    toastProgress[id] = value;\n    storage.setItem({\n      key: 'toastProgress',\n      data: toastProgress,\n      expires: moment().add(10, 'minutes').unix()\n    });\n  };\n\n  const getInitialData = () => {\n    const totalSeconds = progress ? progress.endTime - progress.startTime : 0;\n    const toastProgress = storage.getItem('toastProgress');\n    const remaining = progress\n      ? ((progress.endTime - moment().unix()) * 100) / totalSeconds\n      : 0;\n\n    const currentRemaining =\n      toastProgress && id in toastProgress ? toastProgress[id] : remaining;\n    return { currentRemaining, totalSeconds };\n  };\n\n  const { totalSeconds, currentRemaining } = getInitialData();\n\n  const [percentRemaining, setPercentRemaining] =\n    React.useState<number>(currentRemaining);\n\n  React.useEffect(() => {\n    if (progress) {\n      const maxPercent = 90;\n      const perc = totalSeconds / maxPercent;\n      const int = moment.duration(perc.toFixed(2), 's').asMilliseconds();\n\n      if (done) {\n        intervalRef.current = setInterval(() => {\n          if (ref.current !== null) {\n            setPercentRemaining((existing) => {\n              const value = existing - 1;\n              if (value <= 0) {\n                clearInterval(intervalRef.current);\n                removeTxFromSession();\n                return 0;\n              } else {\n                saveToSession({ value });\n                return value;\n              }\n            });\n          }\n        }, 5);\n      } else {\n        intervalRef.current = setInterval(() => {\n          if (ref.current !== null) {\n            setPercentRemaining((existing) => {\n              const decrement =\n                existing > 100 - maxPercent ? 1 : logarithmicRest(existing);\n              const value = existing - decrement;\n              saveToSession({ value });\n              return value;\n            });\n          }\n        }, int);\n      }\n\n      return () => {\n        clearInterval(intervalRef.current);\n      };\n    }\n    return;\n  }, [progress, done]);\n  return progress ? (\n    <div className='progress position-relative' ref={ref}>\n      <div\n        className='progress-bar'\n        role='progressbar'\n        style={{ width: `${percentRemaining}%` }}\n        aria-valuenow={percentRemaining}\n        aria-valuemin={0}\n        aria-valuemax={100}\n      >\n        <div className='content-height'>{children}</div>\n      </div>\n      <div className='d-flex position-absolute w-100'>{children}</div>\n    </div>\n  ) : (\n    <React.Fragment>{children}</React.Fragment>\n  );\n};\n\nexport default withClassNameWrapper(Progress);\n","function fallbackCopyTextToClipboard(text: string) {\n  let success = false;\n\n  const textArea = document.createElement('textarea');\n  textArea.value = text;\n  textArea.style.position = 'fixed';\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    document.execCommand('copy');\n    success = true;\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n\n  return success;\n}\n\nexport default async function copyTextToClipboard(text: string) {\n  let success = false;\n\n  if (!navigator.clipboard) {\n    success = fallbackCopyTextToClipboard(text);\n  } else {\n    success = await navigator.clipboard.writeText(text).then(\n      function done() {\n        return true;\n      },\n      function error(err) {\n        console.error('Async: Could not copy text: ', err);\n        return false;\n      }\n    );\n  }\n\n  return success;\n}\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport copyTextToClipboard from './helpers/copyToClipboard';\n\ninterface CopyButtonType {\n  text: string;\n  className?: string;\n}\n\nconst CopyButton = ({ text, className = '' }: CopyButtonType) => {\n  const [copyResult, setCopyResut] = React.useState({\n    default: true,\n    success: false\n  });\n\n  const handleCopyToClipboard = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const noSpaces = text ? text.trim() : text;\n    setCopyResut({\n      default: false,\n      success: await copyTextToClipboard(noSpaces)\n    });\n\n    setTimeout(() => {\n      setCopyResut({\n        default: true,\n        success: false\n      });\n    }, 1000);\n  };\n\n  return (\n    <a\n      href='/#'\n      onClick={handleCopyToClipboard}\n      className={`side-action text-secondary ${className}`}\n    >\n      {copyResult.default || !copyResult.success ? (\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faCopy} />\n      ) : (\n        <ReactFontawesome.FontAwesomeIcon\n          icon={icons.faCheck}\n          className='text-primary-highlight'\n        />\n      )}\n    </a>\n  );\n};\n\nexport default withClassNameWrapper(CopyButton);\n","import React from 'react';\nimport { useCallback } from 'react';\nimport debounce from 'lodash/debounce';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\ninterface TrimType {\n  text: string;\n  dataTestId?: string;\n}\n\nconst Trim = ({ text, dataTestId = '' }: TrimType) => {\n  const [overflow, setOverflow] = React.useState(false);\n  const trimRef = React.useRef(document.createElement('span'));\n  const hiddenTextRef = React.useRef(document.createElement('span'));\n\n  const listener = useCallback(\n    debounce(() => {\n      if (trimRef.current && hiddenTextRef.current) {\n        const diff =\n          hiddenTextRef.current.offsetWidth - trimRef.current.offsetWidth;\n        setOverflow(diff > 1);\n      }\n    }, 300),\n    []\n  );\n\n  const addWindowResizeListener = () => {\n    window.addEventListener('resize', listener);\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  };\n\n  React.useEffect(addWindowResizeListener);\n\n  React.useEffect(() => {\n    listener();\n  }, []);\n\n  return (\n    <span\n      ref={trimRef}\n      className={`trim ${overflow ? 'overflow' : ''}`}\n      data-testid={dataTestId}\n    >\n      <span ref={hiddenTextRef} className='hidden-text-ref'>\n        {text}\n      </span>\n\n      {overflow ? (\n        <React.Fragment>\n          <span className='left'>\n            <span>\n              {String(text).substring(0, Math.floor(text.length / 2))}\n            </span>\n          </span>\n          <span className='ellipsis'>...</span>\n          <span className='right'>\n            <span>{String(text).substring(Math.ceil(text.length / 2))}</span>\n          </span>\n        </React.Fragment>\n      ) : (\n        <span>{text}</span>\n      )}\n    </span>\n  );\n};\n\nexport default withClassNameWrapper(Trim);\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport CopyButton from 'UI/CopyButton';\nimport ExplorerLink from 'UI/ExplorerLink';\nimport Trim from 'UI/Trim';\nimport { getGeneratedClasses, isServerTransactionPending } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './types';\n\nconst TxDetails = ({\n  title,\n  transactions,\n  className = 'tx-details',\n  isTimedOut = false,\n  shouldRenderDefaultCss = true\n}: Props) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      title: 'mb-0',\n      statusTransactions: 'mb-2 mt-1',\n      iconSuccess: 'mr-1 text-secondary',\n      iconFailed: 'mr-1 text-secondary',\n      trimContainer: 'text-nowrap trim-fs-sm mr-3',\n      iconPending: 'mr-1 text-secondary fa-spin slow-spin',\n      item: 'tx-description d-flex justify-content-start align-items-center'\n    }\n  );\n\n  const iconSuccessData = {\n    icon: icons.faCheck,\n    classNames: generatedClasses.iconSuccess\n  };\n\n  const iconFailedData = {\n    icon: icons.faTimes,\n    classNames: generatedClasses.iconSuccess\n  };\n\n  const iconPendingData = {\n    icon: icons.faSpinner,\n    classNames: generatedClasses.iconPending\n  };\n\n  const iconData = {\n    pending: iconPendingData,\n    success: iconSuccessData,\n    completed: iconSuccessData,\n    fail: iconFailedData,\n    invalid: iconFailedData,\n    timedOut: iconFailedData\n  };\n  return (\n    <React.Fragment>\n      {title && <div className={generatedClasses.title}>{title}</div>}\n      <div className={generatedClasses.statusTransactions}>\n        {\n          transactions.filter((tx) => !isServerTransactionPending(tx.status))\n            .length\n        }{' '}\n        / {transactions.length} transactions processed\n      </div>\n      {transactions.map(({ hash, status }) => {\n        const iconSrc = iconData[status];\n        return (\n          <div className={generatedClasses.item} key={hash}>\n            {!isTimedOut && iconSrc != null && (\n              <ReactFontawesome.FontAwesomeIcon\n                icon={iconSrc.icon}\n                className={iconSrc.classNames}\n              />\n            )}\n            <span\n              className={generatedClasses.trimContainer}\n              style={{ width: '10rem' }}\n            >\n              <Trim text={hash} />\n            </span>\n            <CopyButton text={hash} />\n            {!isServerTransactionPending(status) && (\n              <ExplorerLink page={`/transactions/${hash}`} className='ml-2' />\n            )}\n          </div>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nexport default withClassNameWrapper(TxDetails);\n","import React, { useMemo, useRef, useState } from 'react';\n\nimport { useGetTransactionDisplayInfo } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport moment from 'optionalPackages/moment';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { useSelector } from 'redux/DappProviderContext';\nimport { shardSelector } from 'redux/selectors';\nimport { isCrossShardTransaction } from 'services/transactions/isCrossShardTransaction';\nimport { SignedTransactionType } from 'types';\nimport IconState from 'UI/IconState';\nimport Progress from 'UI/Progress';\nimport TxDetails from 'UI/TxDetails';\nimport {\n  getAddressFromDataField,\n  getGeneratedClasses,\n  getIsTransactionPending,\n  getIsTransactionTimedOut\n} from 'utils';\n\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { TransactionToastPropsType } from './types';\n\nconst averageTxDurationMs = 6000;\nconst crossShardRounds = 5;\n\nconst TransactionToast = ({\n  toastId,\n  title = '',\n  shouldRenderDefaultCss = true,\n  className = 'transaction-toast',\n  withTxNonce = false,\n  transactions,\n  status,\n  onClose\n}: TransactionToastPropsType) => {\n  const ref = useRef(null);\n  const [shouldRender, setShouldRender] = useState(true);\n  const transactionDisplayInfo = useGetTransactionDisplayInfo(toastId);\n  const accountShard = useSelector(shardSelector);\n\n  const {\n    errorMessage = 'Transaction failed',\n    timedOutMessage = 'Transaction timed out',\n    successMessage = 'Transaction successful',\n    processingMessage = 'Processing transaction'\n  } = transactionDisplayInfo;\n\n  const isSameShard = useMemo(\n    () =>\n      transactions!.reduce(\n        (\n          prevTxIsSameShard: boolean,\n          { receiver, data }: SignedTransactionType\n        ) => {\n          const receiverAddress = getAddressFromDataField({\n            receiver,\n            data\n          });\n          if (receiverAddress == null) {\n            return prevTxIsSameShard;\n          }\n          return (\n            prevTxIsSameShard &&\n            isCrossShardTransaction({\n              receiverAddress,\n              senderShard: accountShard\n            })\n          );\n        },\n        true\n      ),\n    [transactions, accountShard]\n  );\n\n  const shardAdjustedDuration = isSameShard\n    ? averageTxDurationMs\n    : crossShardRounds * averageTxDurationMs;\n\n  const transactionDuration =\n    transactionDisplayInfo?.transactionDuration || shardAdjustedDuration;\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      toastFooter: 'mb-0 text-break',\n      details: 'media-body flex-grow-1',\n      toastContainer: 'w-100 media p-2',\n      wrapper: 'toast-visible clickable',\n      toastHeader: 'd-flex justify-content-between mb-1',\n      iconContainer: 'align-self-center ml-2 mr-2 pr-1',\n      title: 'm-0 font-weight-normal text-nowrap text-truncate',\n      closeButton: 'close d-flex side-action align-items-center mx-2 outline-0'\n    }\n  );\n\n  const [startTime, endTime] = useMemo(() => {\n    const startTime = moment().unix();\n    const endTime = moment()\n      .add(Number(transactionDuration), 'milliseconds')\n      .unix();\n    return [startTime, endTime];\n  }, []);\n\n  const progress = { startTime, endTime };\n\n  const successToastData = {\n    id: toastId,\n    icon: icons.faCheck,\n    expires: 30000,\n    hasCloseButton: true,\n    title: successMessage,\n    iconClassName: 'bg-success'\n  };\n\n  const pendingToastData = {\n    id: toastId,\n    expires: false,\n    icon: icons.faHourglass,\n    hasCloseButton: false,\n    title: processingMessage,\n    iconClassName: 'bg-warning'\n  };\n\n  const failToastData = {\n    id: toastId,\n    icon: icons.faTimes,\n    title: errorMessage,\n    hasCloseButton: true,\n    iconClassName: 'bg-danger'\n  };\n\n  const timedOutToastData = {\n    id: toastId,\n    icon: icons.faTimes,\n    title: timedOutMessage,\n    hasCloseButton: true,\n    iconClassName: 'bg-warning'\n  };\n\n  const isPending = getIsTransactionPending(status);\n  const isTimedOut = getIsTransactionTimedOut(status);\n\n  const toatsOptionsData = {\n    signed: pendingToastData,\n    sent: pendingToastData,\n    pending: pendingToastData,\n    success: successToastData,\n    completed: successToastData,\n    cancelled: failToastData,\n    fail: failToastData,\n    timedOut: timedOutToastData\n  };\n\n  const toastDataState = toatsOptionsData[status!];\n\n  const handleDeleteToast = () => {\n    setShouldRender(false);\n    onClose?.(toastId);\n  };\n\n  if (!shouldRender || transactions == null) {\n    return null;\n  }\n\n  return (\n    <ReactBootstrap.Toast\n      ref={ref}\n      className={generatedClasses.wrapper}\n      key={toastId}\n    >\n      <Progress\n        key={toastId}\n        id={toastId}\n        progress={progress}\n        done={!isPending || isTimedOut}\n      >\n        <div className={generatedClasses.toastContainer}>\n          <div className={generatedClasses.iconContainer}>\n            <IconState\n              iconSize='2x'\n              icon={toastDataState.icon}\n              className={toastDataState.iconClassName}\n            />\n            {withTxNonce &&\n              transactions.map((tx: any) => (\n                <p key={tx.nonce.valueOf()}>{tx.nonce.valueOf()}</p>\n              ))}\n          </div>\n          <div className={generatedClasses.details} style={{ minWidth: 0 }}>\n            <div className={generatedClasses.toastHeader}>\n              <h5 className={generatedClasses.title}>{toastDataState.title}</h5>\n              {!isPending && (\n                <button\n                  type='button'\n                  className={generatedClasses.closeButton}\n                  onClick={handleDeleteToast}\n                >\n                  <ReactFontawesome.FontAwesomeIcon\n                    icon={icons.faTimes}\n                    size='xs'\n                  />\n                </button>\n              )}\n            </div>\n            <div className={generatedClasses.toastFooter}>\n              <TxDetails\n                transactions={transactions}\n                title={title}\n                isTimedOut={isTimedOut}\n              />\n            </div>\n          </div>\n        </div>\n      </Progress>\n    </ReactBootstrap.Toast>\n  );\n};\n\nexport default withClassNameWrapper(TransactionToast);\n","import React, { useEffect, useState } from 'react';\nimport { useGetSignedTransactions } from 'hooks';\nimport { useGetPendingTransactions } from 'services';\nimport {\n  getToastsIdsFromStorage,\n  setToastsIdsToStorage\n} from 'storage/session';\nimport { SignedTransactionsBodyType } from 'types';\nimport TransactionToast from 'UI/TransactionToast';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nimport { TransactionsToastListPropsType } from './types';\n\nfunction TransactionsToastList({\n  shouldRenderDefaultCss = true,\n  withTxNonce = false,\n  className = 'transactions-toast-list',\n  pendingTransactions,\n  signedTransactions\n}: TransactionsToastListPropsType) {\n  const [toastsIds, setToastsIds] = useState<any>([]);\n\n  const pendingTransactionsFromStore =\n    useGetPendingTransactions().pendingTransactions;\n\n  const signedTransactionsFromStore =\n    useGetSignedTransactions().signedTransactions;\n\n  const pendingTransactionsToRender =\n    pendingTransactions || pendingTransactionsFromStore;\n\n  const signedTransactionsToRender =\n    signedTransactions || signedTransactionsFromStore;\n\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper:\n        'toast-messages d-flex flex-column align-items-center justify-content-sm-end',\n      toast: ''\n    }\n  );\n\n  const mappedToastsList = toastsIds?.map((toastId: string) => {\n    const currentTx: SignedTransactionsBodyType =\n      signedTransactionsToRender[toastId];\n    if (\n      currentTx == null ||\n      currentTx?.transactions == null ||\n      currentTx?.status == null\n    ) {\n      return null;\n    }\n\n    const { transactions, status } = currentTx;\n    return (\n      <TransactionToast\n        className={className}\n        key={toastId}\n        transactions={transactions}\n        status={status}\n        toastId={toastId}\n        withTxNonce={withTxNonce}\n      />\n    );\n  });\n\n  const mapPendingSignedTransactions = () => {\n    const newToasts = [...toastsIds];\n\n    for (const sessionId in pendingTransactionsToRender) {\n      const hasToast = toastsIds.includes(sessionId);\n\n      if (!hasToast) {\n        newToasts.push(sessionId);\n      }\n    }\n\n    setToastsIds(newToasts);\n  };\n\n  const fetchSessionStorageToasts = () => {\n    const sessionStorageToastsIds = getToastsIdsFromStorage();\n\n    if (sessionStorageToastsIds) {\n      const newToasts = [...toastsIds, ...sessionStorageToastsIds];\n      setToastsIds(newToasts);\n    }\n  };\n\n  const saveSessionStorageToasts = () => {\n    const shouldSaveLocalToasts = Boolean(toastsIds.length);\n    if (!shouldSaveLocalToasts) {\n      return;\n    }\n\n    setToastsIdsToStorage(toastsIds);\n  };\n\n  useEffect(() => {\n    fetchSessionStorageToasts();\n    return () => {\n      saveSessionStorageToasts();\n    };\n  }, []);\n\n  useEffect(() => {\n    mapPendingSignedTransactions();\n  }, [pendingTransactionsToRender]);\n\n  return <div className={generatedClasses.wrapper}>{mappedToastsList}</div>;\n}\n\nexport default withClassNameWrapper(TransactionsToastList);\n","let platform: any = {};\ntry {\n  platform = require('platform');\n} catch (err) {}\n\nexport default platform;\n","let qrcode: any = {};\ntry {\n  qrcode = require('qrcode');\n} catch (err) {}\n\nexport default qrcode;\n","import React, { useEffect, useState } from 'react';\n\nimport platform from 'optionalPackages/platform';\nimport QRCode from 'optionalPackages/qrcode';\nimport { useWalletConnectLogin } from 'services';\nimport ModalContainer from 'UI/ModalContainer';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { ReactComponent as Lighting } from '../WalletConnectLoginButton/lightning.svg';\nimport { LoginModalPropsType } from './types';\n\nfunction WalletConnectLoginContainer({\n  callbackRoute,\n  loginButtonText,\n  title = 'Maiar Login',\n  logoutRoute = '/unlock',\n  className = 'wallect-connect-login-modal',\n  lead = 'Scan the QR code using Maiar',\n  shouldRenderDefaultCss = true,\n  wrapContentInsideModal = true,\n  redirectAfterLogin,\n  token,\n  onClose\n}: LoginModalPropsType) {\n  const [\n    initLoginWithWalletConnect,\n    { error },\n    { uriDeepLink, walletConnectUri }\n  ] = useWalletConnectLogin({\n    logoutRoute,\n    callbackRoute,\n    token,\n    redirectAfterLogin,\n    shouldLoginUser: true\n  });\n  const [qrCodeSvg, setQrCodeSvg] = useState<string>('');\n  const isMobileDevice =\n    platform?.os?.family === 'iOS' || platform?.os?.family === 'Android';\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: 'btn btn-primary px-sm-4 m-1 mx-sm-3',\n      loginText: 'text-left',\n      container: 'm-auto login-container',\n      card: 'card my-3 text-center',\n      cardBody: 'card-body p-4 mx-lg-4',\n      qrCodeSvgContainer: 'mx-auto mb-3',\n      title: 'mb-3',\n      leadText: 'lead mb-0',\n      mobileLoginButton: 'btn btn-primary px-4 mt-4',\n      errorMessage:\n        'text-danger d-flex justify-content-center align-items-center'\n    }\n  );\n\n  const generateQRCode = async () => {\n    if (!walletConnectUri) {\n      return;\n    }\n\n    const svg = await QRCode.toString(walletConnectUri, {\n      type: 'svg'\n    });\n\n    setQrCodeSvg(svg);\n  };\n\n  useEffect(() => {\n    generateQRCode();\n  }, [walletConnectUri]);\n\n  useEffect(() => {\n    initLoginWithWalletConnect();\n  }, []);\n\n  const content = (\n    <div className={generatedClasses.container}>\n      <div className={generatedClasses.root}>\n        <div className={generatedClasses.card}>\n          <div className={generatedClasses.cardBody}>\n            <div\n              className={generatedClasses.qrCodeSvgContainer}\n              dangerouslySetInnerHTML={{\n                __html: qrCodeSvg\n              }}\n              style={{\n                width: '15rem',\n                height: '15rem'\n              }}\n            />\n            <h4 className={generatedClasses.title}>{title}</h4>\n            {isMobileDevice ? (\n              <React.Fragment>\n                <p className={generatedClasses.leadText}>{loginButtonText}</p>\n                <a\n                  id='accessWalletBtn'\n                  data-testid='accessWalletBtn'\n                  className={generatedClasses.mobileLoginButton}\n                  href={uriDeepLink || undefined}\n                  rel='noopener noreferrer nofollow'\n                  target='_blank'\n                >\n                  <Lighting\n                    className={generatedClasses.cardBody}\n                    style={{\n                      width: '0.7rem',\n                      height: '0.7rem'\n                    }}\n                  />\n                  {title}\n                </a>\n              </React.Fragment>\n            ) : (\n              <p className={generatedClasses.leadText}>{lead}</p>\n            )}\n            <div>\n              {error && (\n                <p className={generatedClasses.errorMessage}>{error}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return wrapContentInsideModal ? (\n    <ModalContainer\n      title={'Login with Maiar'}\n      className={className}\n      onClose={onClose}\n    >\n      {content}\n    </ModalContainer>\n  ) : (\n    content\n  );\n}\n\nexport default withClassNameWrapper(WalletConnectLoginContainer);\n","import React, { Fragment, useState } from 'react';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport WalletConnectLoginContainer from '../WalletConnectLoginContainer';\nimport { WalletConnectLoginButtonPropsType } from './types';\n\nconst WalletConnectLoginButton = ({\n  children,\n  callbackRoute,\n  loginButtonText = 'Maiar App',\n  title = 'Maiar Login',\n  logoutRoute = '/unlock',\n  shouldRenderDefaultCss = true,\n  wrapContentInsideModal = true,\n  redirectAfterLogin = false,\n  buttonClassName,\n  className = 'wallect-connect-login',\n  lead = 'Scan the QR code using Maiar',\n  token\n}: WalletConnectLoginButtonPropsType) => {\n  const [showLoginModal, setShowLoginModal] = useState(false);\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n        buttonClassName != null ? buttonClassName : ''\n      }`,\n      loginText: 'text-left'\n    }\n  );\n\n  const handleOpenModal = () => {\n    setShowLoginModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowLoginModal(false);\n  };\n\n  return (\n    <Fragment>\n      <button onClick={handleOpenModal} className={generatedClasses.wrapper}>\n        {children || (\n          <span className={generatedClasses.loginText}>{loginButtonText}</span>\n        )}\n      </button>\n      {showLoginModal && (\n        <WalletConnectLoginContainer\n          callbackRoute={callbackRoute}\n          loginButtonText={loginButtonText}\n          title={title}\n          token={token}\n          className={className}\n          logoutRoute={logoutRoute}\n          lead={lead}\n          wrapContentInsideModal={wrapContentInsideModal}\n          redirectAfterLogin={redirectAfterLogin}\n          onClose={handleCloseModal}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default withClassNameWrapper(WalletConnectLoginButton);\n","import React from 'react';\nimport { useWebWalletLogin } from 'services';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { WebWalletLoginButtonPropsType } from './types';\n\nconst WebWalletLoginButton: (\n  props: WebWalletLoginButtonPropsType\n) => JSX.Element = ({\n  children,\n  token,\n  className = 'web-wallet-login',\n  callbackRoute,\n  buttonClassName,\n  loginButtonText = 'Elrond Web Wallet',\n  shouldRenderDefaultCss = true\n}) => {\n  const [onInitiateLogin] = useWebWalletLogin({\n    callbackRoute,\n    token\n  });\n  const classes = getGeneratedClasses(className, shouldRenderDefaultCss, {\n    wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n      buttonClassName != null ? buttonClassName : ''\n    }`,\n    loginText: 'text-left'\n  });\n\n  const handleLogin = () => {\n    onInitiateLogin();\n  };\n\n  return (\n    <button onClick={handleLogin} className={classes.wrapper}>\n      {children || <span className={classes.loginText}>{loginButtonText}</span>}\n    </button>\n  );\n};\n\nexport default withClassNameWrapper(WebWalletLoginButton);\n","import React from 'react';\nimport { useGetLoginInfo } from 'hooks';\nimport ExtensionLoginButton from 'UI/extension/LoginButton';\n\nimport LedgerLoginButton from 'UI/ledger/LoginButton';\nimport WalletConnectLoginButton from 'UI/walletConnect/WalletConnectLoginButton';\nimport WebWalletLoginButton from 'UI/webWallet/LoginButton';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './types';\n\nconst UnlockPage = ({\n  loginRoute,\n  title = 'Login',\n  className = 'unlock-page',\n  shouldRenderDefaultCss = true,\n  LedgerLoginButtonText = 'Ledger',\n  description = 'Pick a login method',\n  WalletConnectLoginButtonText = 'Maiar',\n  ExtensionLoginButtonText = 'Extension',\n  WebWalletLoginButtonText = 'Web wallet'\n}: Props) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: `home d-flex flex-fill align-items-center ${wrapperClassName}`,\n      title: 'mb-4',\n      description: 'mb-4',\n      cardContainer: 'm-auto',\n      card: 'card my-4 text-center',\n      cardBody: 'card-body py-4 px-2 px-sm-2 mx-lg-4'\n    }\n  );\n  const { isLoggedIn } = useGetLoginInfo();\n\n  React.useEffect(() => {\n    if (isLoggedIn) {\n      window.location.href = loginRoute;\n    }\n  }, [isLoggedIn]);\n\n  return (\n    <div className={generatedClasses.wrapper}>\n      <div className={generatedClasses.cardContainer}>\n        <div className={generatedClasses.card}>\n          <div className={generatedClasses.cardBody}>\n            <h4 className={generatedClasses.title}>{title}</h4>\n            <p className={generatedClasses.description}>{description}</p>\n            <ExtensionLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={ExtensionLoginButtonText}\n            />\n            <WebWalletLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={WebWalletLoginButtonText}\n            />\n            <LedgerLoginButton\n              loginButtonText={LedgerLoginButtonText}\n              callbackRoute={loginRoute}\n            />\n            <WalletConnectLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={WalletConnectLoginButtonText}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withClassNameWrapper(UnlockPage);\n"],"names":["logoutAction","createAction","loginAction","payload","createDeepEqualSelector","createSelectorCreator","defaultMemoize","isEqual","networkConfigSelector","state","networkConfig","proxySelector","proxy","providerSelector","provider","chainIDSelector","ChainID","chainID","apiProviderSelector","apiProvider","walletConnectBridgeAddressSelector","network","walletConnectBridgeAddress","walletConnectDeepLinkSelector","walletConnectDeepLink","networkSelector","apiNetworkSelector","apiAddress","explorerAddressSelector","explorerAddress","egldLabelSelector","egldLabel","TransactionServerStatusesEnum","TransactionBatchStatusesEnum","LoginMethodsEnum","NotificationTypesEnum","TypesOfSmartContractCallsEnum","EnvironmentsEnum","accountInfoSelector","account","addressSelector","address","accountSelector","accountBalanceSelector","balance","accountNonceSelector","nonce","valueOf","shardSelector","shard","ledgerAccountSelector","ledgerAccount","walletConnectAccountSelector","walletConnectAccount","isAccountLoadingSelector","isAccountLoading","isAccountLoadingErrorSelector","accountLoadingError","loginInfoSelector","loginInfo","loginMethodSelector","loginMethod","isLoggedInSelector","none","Boolean","walletConnectLoginSelector","walletConnectLogin","ledgerLoginSelector","ledgerLogin","walletLoginSelector","walletLogin","loginExpiresAtSelector","loginExpiresAt","getNewLoginExpiresTimestamp","Date","setHours","getHours","optionalRedirect","callbackUrl","shouldRedirect","setTimeout","window","location","pathname","includes","href","getBridgeAddressFromNetwork","walletConnectBridgeAddresses","Math","floor","random","length","initialState","tokenLogin","extensionLogin","loginInfoSlice","createSlice","name","reducers","setLoginMethod","action","setTokenLogin","setTokenLoginSignature","signature","setWalletLogin","setWalletConnectLogin","setLedgerLogin","setLoginExpiresAt","extraReducers","builder","addCase","actions","reducer","whitelistedActions","throttledSetNewToken","throttle","store","dispatch","loginSessionMiddleware","next","type","appState","getState","loginTimestamp","isLoggedIn","now","isExpired","console","log","logout","err","error","emptyAccount","publicKey","accountInfoSlice","setAddress","Address","hex","setAccount","setAccountNonce","setAccountShard","setLedgerAccount","setWalletConnectAccount","setIsAccountLoading","setAccountLoadingError","REHYDRATE","accountInfo","DAPP_INIT_ROUTE","getProviderType","constructor","WalletProvider","wallet","WalletConnectProvider","walletconnect","HWProvider","ledger","ExtensionProvider","extension","EmptyProvider","extra","newWalletProvider","walletAddress","notInitializedError","caller","init","login","options","Error","getAddress","isInitialized","isConnected","sendTransaction","transaction","signTransaction","signTransactions","transactions","signMessage","message","emptyProvider","getProvider","extraActionsSlice","initializeExtraActions","modalsSlice","setTxSubmittedModal","txSubmittedModal","setNotificationModal","notificationModal","clearTxSubmittedModal","undefined","clearNotificationModal","defaultNetwork","id","egldDenomination","decimals","gasPerDataByte","apiTimeout","ProxyProvider","timeout","Number","ApiProvider","networkConfigSlice","initializeNetworkConfig","omit","setChainID","setProvider","defaultTransactionErrorMessage","defaultTransactionSuccessMessage","defaultTransactionProcessingMessage","defaultTransactionSubmittedMessage","signTransactionsSlice","setTransactionsDisplayInfo","sessionId","transactionsDisplayInfo","errorMessage","successMessage","processingMessage","submittedMessage","transactionDuration","clearTransactionsInfoForSessionId","clearTransactionsInfo","TransactionTypesEnum","okInHex","ESDTTransferTypes","areScCallsSuccessful","scResults","completedThreshold","numberOfOkParts","forEach","result","data","decoded","Buffer","from","toString","split","hasOkPart","find","part","isContract","receiver","sender","isContractAddress","extractedAddress","getAddressFromDataField","isExtractedAddressContractCall","isSelfESDTContract","isHexValidCharacters","str","toLowerCase","match","isHexValidLength","parts","restParts","isSelfTransaction","isCorrectESDTType","areDataPartsValid","every","parsedData","TransactionPayload","fromEncoded","addressIndex","getAddressIndex","MultiESDTNFTTransfer","ESDTNFTTransfer","pendingBatchTransactionsStates","sent","successBatchTransactionsStates","success","failBatchTransactionsStates","fail","cancelled","timedOut","timedOutBatchTransactionsStates","pendingServerTransactionsStatuses","pending","successServerTransactionsStates","completedServerTransactionsStates","completed","failServerTransactionsStates","invalid","getIsTransactionCompleted","status","getIsTransactionPending","isScCall","isPending","isBatchTransactionPending","isServerTransactionPending","getIsTransactionSuccessful","isBatchTransactionSuccessful","isServerTransactionSuccessful","getIsTransactionFailed","isBatchTransactionFailed","isServerTransactionFailed","getIsTransactionTimedOut","isBatchTransactionTimedOut","isUtf8","i","charCodeAt","decodePart","decodedPart","hexPart","trim","getAllStringOccurrences","sourceStr","searchStr","matchAll","RegExp","map","a","index","parseMultiEsdtTransferData","contractCallDataIndex","startsWith","encodedTxCount","rest","txCount","BigNumber","toNumber","itemIndex","txIndex","nftTransaction","token","encodedNonce","esdtTransaction","amount","some","tx","scCallData","scCall","noData","tokenId","getTokenFromData","tokenTransfer","ESDTTransfer","nftTransfer","encodedToken","encodedAmount","replace","e","isTokenTransfer","erdLabel","buildUrlParams","search","urlParams","urlSearchParams","URLSearchParams","params","Object","fromEntries","nextUrlParams","builtCallbackUrl","url","entries","URL","origin","parseTransactionAfterSigning","isLedger","version","TransactionVersion","withTxHashSignVersion","TransactionOptions","withTxHashSignOptions","parsedTransaction","toPlainObject","hash","getHash","signedTransactions","transactionsToSign","signTransactionsError","customTransactionInformationForSessionId","defaultCustomInformation","signWithoutSending","sessionInformation","redirectAfterSign","transactionsSlice","moveTransactionsToSignedState","customTransactionInformation","clearSignedTransaction","clearTransactionToSign","updateSignedTransaction","updateSignedTransactions","updateSignedTransactionStatus","transactionHash","areTransactionsSuccessful","areTransactionsFailed","setTransactionsToSign","clearAllTransactionsToSign","clearAllSignedTransactions","setSignTransactionsError","parsedSignedTransactions","reduce","acc","txTimestamp","expiration","extraActions","modals","transactionsInfo","localStorage","sessionStorage","require","transactionsInfoPersistConfig","key","storage","transactionsReducer","blacklist","persistReducer","rootReducer","combineReducers","localStorageReducers","persistConfig","whitelist","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","PAUSE","PERSIST","PURGE","REGISTER","ignoredPaths","concat","persistor","persistStore","extraActionsSelector","extraActionsInit","createSelector","newTransaction","rawTransaction","atob","Transaction","value","Balance","fromString","Nonce","gasLimit","GasLimit","gasPrice","GasPrice","transactionsSelectors","signedTransactionsSelector","signTransactionsErrorSelector","pendingSignedTransactionsSelector","txBody","successfulTransactionsSelector","completedTransactionsSelector","failedTransactionsSelector","timedOutTransactionsSelector","transactionsToSignSelector","transactionStatusSelector","_","transactionSessionId","defaultTransactionInfo","transactionsInfoSelectors","transactionDisplayInfoSelector","modalsSliceSelector","txSubmittedModalSelector","notificationModalSelector","getIsLoggedIn","onRedirect","providerType","switchTrue","object","defaultValue","obj","keys","cur","canTransformToPublicKey","checkAddress","bech32","addressIsValid","destinationAddress","isValidBach","test","getNetworkProxy","getApiProvider","getAccountProvider","getAccountProviderType","getChainID","getNetworkConfig","getEgldLabel","getIsProviderEqualTo","comparedProviderType","loggedIn","Promise","resolve","getAccount","setNonce","getLatestNonce","currentAccountNonce","isNaN","max","getAccountBalance","accountAddress","refreshAccount","setNewAccount","initialized","accountData","isAddressOfMetachain","pubKey","metachainPrefix","pubKeyPrefix","slice","equals","zeroAddress","alloc","fill","getShardOfAddress","hexPubKey","numShards","maskHigh","parseInt","maskLow","lastByteOfPubKey","logarithmicRest","position","minp","maxp","minv","maxv","scale","exp","ERROR_SIGNING","TRANSACTION_CANCELLED","ERROR_SIGNING_TX","PROVIDER_NOT_INTIALIZED","MISSING_PROVIDER_MESSAGE","DEFAULT_MIN_GAS_LIMIT","configEndpoint","mainnet","testnet","devnet","fallbackNetworkConfigurations","ledgerErrorCodes","code","gasPriceModifier","defaultGasPrice","defaultGasLimit","denomination","dappInitRoute","walletSignSession","pipe","previous","condition","then","newValue","Function","config","ROUNDING_MODE","ROUND_FLOOR","denominate","input","configDenomination","configDecimals","showLastNonZeroDecimal","addCommas","Token","validation","stringIsInteger","toDenominated","current","bnBalance","isZero","integerPart","decimalPart","bNdecimalPart","decimalPlaces","min","shownDecimalsAreZero","isGreaterThan","substring","formatted","toFormat","formattedBalance","integerPartZero","numericPart","zeroPlaceholders","Array","zeros","join","minAmount","nominate","customDenomination","createBalanceBuilder","TokenType","Fungible","classnames","getGeneratedClasses","className","shouldRenderDefaultCss","defaultStyles","defaultClassNames","classNames","wrapperClassName","moment","setItem","expires","String","JSON","stringify","getItem","item","deserializedItem","parse","hasOwnProperty","expired","unix","removeItem","clear","defaultContextValue","DappCoreContext","React","createContext","useStore","createStoreHook","useDispatch","createDispatchHook","useSelector","createSelectorHook","useExtensionLogin","initiateLogin","setIsLoading","getInstance","isSuccessfullyInitialized","warn","encodeURIComponent","callbackRoute","providerLoginData","loginToken","redirectAfterLogin","setError","useState","isLoading","loginFailed","useWebWalletLogin","setMinutes","getMinutes","walletLoginData","loginData","ledgerAppErrorText","failInitializeErrorText","defaultAddressesPerPage","useLedgerLogin","onStartLogin","hwWalletP","selectedAddress","accounts","setShowAddressList","fetchAccounts","getAccounts","startIndex","addressesPerPage","setAccounts","statusCode","onConfirmSelectedAddress","hwWalletProvider","loginUser","dispatchLoginActions","onLoginFailed","setStartIndex","setSelectedAddress","showAddressList","loginType","customMessage","onSelectAddress","newSelectedAddress","onGoToNextPage","onGoToPrevPage","useEffect","useUpdateEffect","effect","dependencies","isInitialMount","useRef","useWalletConnectLogin","generateWcUri","providerRef","walletConnectUri","hasUri","setWcUri","wcUriWithToken","loginProvider","shouldGenerateWcUri","wcUri","providerHandlers","onClientLogin","handleOnLogin","onClientLogout","handleOnLogout","newProvider","getSignature","hasSignature","loginActionData","logoutRoute","walletConnector","on","clearInterval","heartbeatDisconnectInterval","setInterval","handleHeartbeat","isProviderConnected","connected","method","sendCustomMessage","heartbeatInterval","hasWcUri","uriDeepLink","interval","removeTransactionsToSign","removeSignedTransaction","removeAllSignedTransactions","removeAllTransactionsToSign","calcTotalFee","minGasLimit","totalFee","fee","operations","calculateFeeLimit","getGasLimit","getGasPrice","getData","chainId","plus","networkConstants","accountBalance","storeChainId","transactionsPayload","isArray","bNtotalFee","bNbalance","stringIsFloat","hasSufficientFunds","minus","notificationPayload","warning","iconClassName","title","description","hasValidChainId","signTransactionsPayload","transformAndSignTransactions","validatedReceiver","addr","ErrorCodesEnum","invalidReceiver","transactionsChainId","sendTransactions","txToSign","areComplexTransactions","getPrototypeOf","useTrackTransactionStatus","transactionId","onSuccess","onFail","onCancelled","onTimedOut","onCompleted","transactionsBatch","isFailed","isTimedOut","isSuccessful","isCompleted","isCancelled","useGetPendingTransactions","pendingTransactions","pendingTransactionsArray","hasPendingTransactions","useGetFailedTransactions","failedTransactions","failedTransactionsArray","hasFailedTransactions","useGetSuccessfulTransactions","successfulTransactions","successfulTransactionsArray","hasSuccessfulTransactions","multiTxData","useParseMultiEsdtTransferData","parsedTransactionsByDataField","setParsedTransactions","allTransactions","setAllTransactions","addTransactionDataToParsedInfo","txInfo","existing","getTxInfoByDataField","multiTransactionData","extractTransactionESDTData","transactionIndex","multiTxs","trx","idx","newTx","push","getReceiver","useGetActiveTransactionsStatus","timedOutTransactions","completedTransactions","hasActiveTransactions","useGetCompletedTransactions","completedTransactionsArray","hasCompletedTransactions","sendSignedTransactions","promises","axios","post","all","response","txHash","getTransactionsByHashes","hashes","get","withScResults","responseData","previousStatus","txOnNetwork","txResponse","invalidTransaction","results","hasStatusChanged","ProviderInitializer","setExtensionProvider","setLedgerProvider","isInitializationSuccessful","tryAuthenticateWalletUser","fetchAccount","initWalletLoginProvider","refreshChainID","initializeProvider","sendSignedTransactionsAsync","getTransactionsByHash","completedTransactionsDelay","OverrideDefaultBehaviourContext","TransactionSender","handleSendTransactions","sessionIds","skipSending","isSessionIdSigned","signed","shouldSendCurrentSession","sendingRef","transactionsToSend","transactionObject","Signature","applySignature","responseHashes","newStatus","newTransactions","submittedModalPayload","clearSignInfo","history","pushState","document","useContext","TransactionStatusTracker","transactionPayload","intervalRef","isFetchingStatusRef","retriesRef","timeoutRefs","manageTimedOutTransactions","checkTransactionStatus","serverTransactions","retriesForThisHash","isScCallCompleted","resultWithError","scResult","returnMessage","TransactionsTracker","mappedPendingTransactionsTrackers","Fragment","getServerConfigurationForEnvironment","environment","useGetNetworkConfig","useGetNotification","notification","clearNotification","useGetTransactionDisplayInfo","toastId","useParseSignedTransactions","searchData","qs","signSessionId","getTransactionsFromWalletUrl","useSignTransactions","savedCallback","hasTransactions","onAbort","isExtensionProvider","cancelAction","onCancel","isTxCancelled","errorsMessages","signWithWallet","buildedCallbackUrl","signTransactionsWithProvider","hasSameTransactions","hasAllTransactionsSigned","shouldMoveTransactionsToSignedState","signedTransactionsArray","values","shouldRedirectAfterSign","redirectRoute","isCurrentRoute","isProviderInitialized","setTransactionNonces","latestNonce","proxyAccount","isSigningWithWebWallet","isSigningWithProvider","mappedTransactions","defaultErrorMessage","useGetSignedTransactions","hasSignedTransactions","swr","fetcher","useGetTokenDetails","useSwr","selectedToken","tokenDenomination","tokenLabel","tokenAvatar","assets","svgUrl","useSignTransactionsWithLedger","sign","currentTransaction","trueForLedger","setWaitingForDevice","signedTx","newSignedTx","currentStep","newSignedTransactions","setSignedTransactions","isLastTransaction","setCurrentStep","exising","reset","setCurrentTransaction","waitingForDevice","extractTransactionsInfo","dataField","transactionTokenInfo","isTokenTransaction","signTx","isFirst","continueWithoutSigning","endsWith","onSignTransaction","onNext","nextStep","onPrev","useGetSignTransactionsError","useGetAccountInfo","useGetLoginInfo","useGetAccountProvider","getAccountShard","AppInitializer","initializeApp","initializeCustomExtraActions","initializeNetwork","setInitialized","fallbackConfig","customNetworkConfig","serverConfig","children","onLogin","word","DappProvider","memoizedSendSignedTransactionsAsync","useCallback","memoizedGetTransactionsByHash","Provider","context","PersistGate","loading","AuthenticatedRoutesWrapper","routes","unlockRoute","authenticatedRoutesRef","filter","route","authenticatedRoute","isOnAuthenticatedRoute","path","TransactionParameter","functionName","inputParameters","outputParameters","withClassNameWrapper","Component","props","denominateInvalid","denominateValid","showLabel","denominatedValue","valueParts","hasNoDecimals","isNotZero","Denominate","DenominateWrapper","denominateProps","fontawesomeFreeSolidIcons","ReactFontawesome","ExplorerLink","page","text","target","FontAwesomeIcon","icon","icons","faSearch","ExtensionLoginButton","buttonClassName","loginButtonText","onInitiateLogin","isFirefox","navigator","userAgent","indexOf","classes","wrapper","loginText","noExtensionButtonWrapper","noExtensionButtonContent","noExtensionButtonTitle","noExtensionButtonIcon","handleLogin","elrondWallet","rel","faArrowRight","onClick","ReactBootstrap","ModalContainer","noSpacer","onClose","Modal","show","backdrop","onHide","animation","centered","size","faTimes","PageState","iconClass","dataTestId","iconBgClass","iconSize","generatedClasses","iconContainer","trimHash","keep","start","end","noBalance","AddressRow","setBalance","handleChange","checked","fetchBalance","onChange","role","htmlFor","ledgerWaitingText","AddressTable","cardBody","tableWrapper","tableContent","tableHeader","tableHeaderText","buttonsWrapper","arrowButton","confirmButton","faCircleNotch","disabled","faChevronLeft","faChevronRight","ConfirmAddress","noBorder","LedgerConnect","connectPageContent","LedgerLogo","LedgerLoginContainer","wrapContentInsideModal","spinner","getContent","LedgerLoginButton","showLoginModal","setShowLoginModal","handleOpenModal","handleCloseModal","notificationTypesToIcons","faExclamationTriangle","defaultIcon","NotificationModal","showModal","onDone","SignWithExtensionModal","handleClose","closeBtn","close","preventDefault","freeSolidIcons","faHourglass","Simple","Combined","small","getIdentifierWithoutNonce","identifier","tokenParts","getDetails","isEgldTransfer","symbol","label","EgldIcon","faGem","TokenDetails","render","process","env","NODE_ENV","combined","allOccurences","TransactionData","highlight","output","encodedScCall","remainingDataFields","SignStep","transactionData","onCloseClick","signBtnLabel","denominatedAmount","getValue","formGroup","formLabel","contentWrapper","tokenWrapper","tokenValue","tokenAmountLabel","tokenAmountValue","dataFormGroup","cancelButton","signButton","tokenlabel","Icon","Label","Symbol","SignWithLedgerModal","container","SignWithWalletConnectModal","hasMultipleTransactions","SignTransactionsModals","CustomConfirmScreens","signError","signProps","Ledger","WalletConnect","Extension","Extra","SessionStorageKeysEnum","setToastsIdsToStorage","ids","toasts","getToastsIdsFromStorage","toastsIds","isCrossShardTransaction","receiverAddress","senderShard","senderAddress","receiverShard","pubkey","IconState","half","Progress","progress","done","ref","removeTxFromSession","toastProgress","hasSessionStoredTx","add","saveToSession","getInitialData","totalSeconds","endTime","startTime","remaining","currentRemaining","percentRemaining","setPercentRemaining","maxPercent","perc","int","duration","toFixed","asMilliseconds","decrement","style","width","fallbackCopyTextToClipboard","textArea","createElement","body","appendChild","focus","select","execCommand","removeChild","copyTextToClipboard","clipboard","writeText","CopyButton","copyResult","setCopyResut","handleCopyToClipboard","stopPropagation","noSpaces","faCopy","faCheck","Trim","overflow","setOverflow","trimRef","hiddenTextRef","listener","debounce","diff","offsetWidth","addWindowResizeListener","addEventListener","removeEventListener","ceil","TxDetails","statusTransactions","iconSuccess","iconFailed","trimContainer","iconPending","iconSuccessData","iconFailedData","iconPendingData","faSpinner","iconData","iconSrc","averageTxDurationMs","crossShardRounds","TransactionToast","withTxNonce","shouldRender","setShouldRender","transactionDisplayInfo","accountShard","timedOutMessage","isSameShard","useMemo","prevTxIsSameShard","shardAdjustedDuration","toastFooter","details","toastContainer","toastHeader","closeButton","successToastData","hasCloseButton","pendingToastData","failToastData","timedOutToastData","toatsOptionsData","toastDataState","handleDeleteToast","Toast","minWidth","TransactionsToastList","setToastsIds","pendingTransactionsFromStore","signedTransactionsFromStore","pendingTransactionsToRender","signedTransactionsToRender","toast","mappedToastsList","currentTx","mapPendingSignedTransactions","newToasts","hasToast","fetchSessionStorageToasts","sessionStorageToastsIds","saveSessionStorageToasts","shouldSaveLocalToasts","platform","qrcode","WalletConnectLoginContainer","lead","shouldLoginUser","initLoginWithWalletConnect","qrCodeSvg","setQrCodeSvg","isMobileDevice","os","family","card","qrCodeSvgContainer","leadText","mobileLoginButton","generateQRCode","QRCode","svg","content","root","dangerouslySetInnerHTML","__html","height","Lighting","WalletConnectLoginButton","WebWalletLoginButton","UnlockPage","loginRoute","LedgerLoginButtonText","WalletConnectLoginButtonText","ExtensionLoginButtonText","WebWalletLoginButtonText","cardContainer"],"mappings":"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"}