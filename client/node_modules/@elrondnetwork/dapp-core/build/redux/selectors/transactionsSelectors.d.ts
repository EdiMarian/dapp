import { Transaction } from '@elrondnetwork/erdjs';
import { CustomTransactionInformation, SignedTransactionsType } from 'types/transactions';
import { RootState } from '../store';
export interface TransactionsToSignReturnType {
    callbackRoute?: string;
    sessionId: string;
    transactions: Transaction[];
    customTransactionInformation: CustomTransactionInformation;
}
export declare const transactionsSelectors: (state: RootState) => any;
export declare const signedTransactionsSelector: import("reselect").OutputSelector<any, SignedTransactionsType, (res: any) => SignedTransactionsType>;
export declare const signTransactionsErrorSelector: import("reselect").OutputSelector<any, any, (res: any) => any>;
export declare const pendingSignedTransactionsSelector: import("reselect").OutputSelector<any, {}, (res: SignedTransactionsType) => {}>;
export declare const successfulTransactionsSelector: import("reselect").OutputSelector<any, {}, (res: SignedTransactionsType) => {}>;
export declare const completedTransactionsSelector: import("reselect").OutputSelector<any, {}, (res: SignedTransactionsType) => {}>;
export declare const failedTransactionsSelector: import("reselect").OutputSelector<any, {}, (res: SignedTransactionsType) => {}>;
export declare const timedOutTransactionsSelector: import("reselect").OutputSelector<any, {}, (res: SignedTransactionsType) => {}>;
export declare const transactionsToSignSelector: import("reselect").OutputSelector<any, TransactionsToSignReturnType | null, (res: any) => TransactionsToSignReturnType | null>;
export declare const transactionStatusSelector: import("reselect").OutputParametricSelector<any, string | null, import("../../types/transactions").SignedTransactionsBodyType, (res1: SignedTransactionsType, res2: string | null) => import("../../types/transactions").SignedTransactionsBodyType>;
